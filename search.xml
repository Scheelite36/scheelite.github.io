<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实战JavaScript轮播图</title>
      <link href="/2020/05/17/js-ratation/"/>
      <url>/2020/05/17/js-ratation/</url>
      
        <content type="html"><![CDATA[<p>实现很多网站首页的图片轮播和导航菜单效果</p><iframe width:1200px height:500px src="http://cdn.rice-and-bran.site/JavaScript%E8%BD%AE%E6%92%AD%E5%9B%BE.gif"><h2 id="轮播图内容和样式"><a href="#轮播图内容和样式" class="headerlink" title="轮播图内容和样式"></a>轮播图内容和样式</h2><h3 id="设置轮播图样式"><a href="#设置轮播图样式" class="headerlink" title="设置轮播图样式"></a>设置轮播图样式</h3><p>新建三个图片的div</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'main'</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片轮播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'banner'</span> <span class="attr">id</span>=<span class="string">'banner'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner-slide slide1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner-slide slide2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner-slide slide3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置相关样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">'微软雅黑'</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#14191e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在图片轮播区域，设置轮播图作为背景*/</span></span><br><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner-slide</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: cover;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将第二三张图片先暂时隐藏，后续通过js实现轮播*/</span></span><br><span class="line"><span class="selector-class">.slide1</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../static/js1.jpg'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide2</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../static/js2.jpg'</span>);</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide3</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../static/js3.jpg'</span>);</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置轮播图的按钮"><a href="#设置轮播图的按钮" class="headerlink" title="设置轮播图的按钮"></a>设置轮播图的按钮</h3><p><code>href=&quot;javascript:void(0)&quot;</code>当点击超级链接时，什么都不发生。其中void()可用于执行操作符中的代码</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 举例：执行 void() 操作符中的js代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(alert('nothing'))"</span>&gt;</span>点我弹出警告框!!!<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加轮播图的按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上一张下一张按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">class</span>=<span class="string">'button prev'</span> <span class="attr">id</span>=<span class="string">"prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">class</span>=<span class="string">'button next'</span> <span class="attr">id</span>=<span class="string">'next'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../static/箭头.png'</span>);</span><br><span class="line"><span class="attribute">background-size</span>: contain;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line"><span class="comment">/*兼容其他浏览器的透明度设置*/</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=<span class="number">80</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.prev</span>&#123;</span><br><span class="line"><span class="comment">/*设置按键旋转180度*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.next</span>&#123;</span><br><span class="line"><span class="comment">/*上面设置了244px,先将left不起作用*/</span></span><br><span class="line"><span class="attribute">left</span>: auto;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置轮播图圆点"><a href="#设置轮播图圆点" class="headerlink" title="设置轮播图圆点"></a>设置轮播图圆点</h3><p><code>class=&#39;active&#39;</code>表示当前所处的按钮，要通过js、css实现效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 圆点导航 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dots"</span> <span class="attr">id</span>=<span class="string">'dots'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'active'</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dots</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dots</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="comment">/*生成行内的块级元素*/</span></span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">0.4</span>);</span><br><span class="line"><span class="comment">/*设置圆点的阴影 水平 垂直 距离 模糊程度 颜色 inset向内阴影*/</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>) inset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置选中的圆点样式*/</span></span><br><span class="line"><span class="selector-class">.dots</span> <span class="selector-tag">span</span><span class="selector-class">.active</span>&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">0.4</span>) inset;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="轮播图特效的实现"><a href="#轮播图特效的实现" class="headerlink" title="轮播图特效的实现"></a>轮播图特效的实现</h2><h3 id="封装getElementById-方法"><a href="#封装getElementById-方法" class="headerlink" title="封装getElementById()方法"></a>封装getElementById()方法</h3><p>为了减少代码量，封装一个代替getElementById()的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个代替getElementById()的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byId</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="comment">// ===判断值的同时还要判断类型 三目运算符，满足参数为string返回对应div对象，否则返回参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span>(id) === <span class="string">"string"</span>?<span class="built_in">document</span>.getElementById(id):id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="轮播图自动轮播"><a href="#轮播图自动轮播" class="headerlink" title="轮播图自动轮播"></a>轮播图自动轮播</h3><p>定义一个切换图片的函数，这个函数里面用于切换图片，我们现在这一步完成自动轮播的部分。</p><p><em>main是html页面中最大的一个div，包含所有div</em></p><p>切换图片的原理是通过全局变量index对应div的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置全局变量，</span></span><br><span class="line"><span class="keyword">var</span> index=<span class="number">0</span>,timer=<span class="literal">null</span>,</span><br><span class="line">pics=byId(<span class="string">'banner'</span>).getElementsByTagName(<span class="string">'div'</span>),</span><br><span class="line">len=pics.length;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slideImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> main = byId(<span class="string">"main"</span>);</span><br><span class="line"><span class="comment">// 划过清除定时器，离开继续</span></span><br><span class="line">main.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 划过图片清除定时器</span></span><br><span class="line"><span class="keyword">if</span>(timer) clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line">main.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 每隔三秒调用切换函数</span></span><br><span class="line"><span class="comment">// 间歇调用 setInterval返回一个 ID（数字），可以将这个ID传递给clearInterval()</span></span><br><span class="line">timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(index&gt;=len)&#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用切换图片函数</span></span><br><span class="line">changeImg();</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 切换图片的函数</span></span><br><span class="line"><span class="comment">// 遍历banner下所有的div将其隐藏</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">pics[i].style.display=<span class="string">'none'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让轮播图的div显示</span></span><br><span class="line">pics[index].style.display=<span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用轮播函数</span></span><br><span class="line">slideImg();</span><br></pre></td></tr></table></figure><h3 id="点击圆点切换图片"><a href="#点击圆点切换图片" class="headerlink" title="点击圆点切换图片"></a>点击圆点切换图片</h3><p>这一步我们需要实现点击圆点切换对应图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继续在slideImg()函数中添加该方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slideImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 点击圆点切换图片</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="comment">// 给dots添加id属性</span></span><br><span class="line">dots[i].id=i;</span><br><span class="line">dots[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index=<span class="keyword">this</span>.id;</span><br><span class="line">changeImg();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按钮切换图片"><a href="#按钮切换图片" class="headerlink" title="按钮切换图片"></a>按钮切换图片</h3><p>实现点击按钮切换图片(继续在slideImg()函数中添加该方法)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下一张</span></span><br><span class="line">byId(<span class="string">'next'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(index&gt;=len)&#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeImg();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一张</span></span><br><span class="line">byId(<span class="string">'prev'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index--;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">index=len<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeImg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导航菜单的内容和样式"><a href="#导航菜单的内容和样式" class="headerlink" title="导航菜单的内容和样式"></a>导航菜单的内容和样式</h2><h3 id="导航主菜单的结构样式"><a href="#导航主菜单的结构样式" class="headerlink" title="导航主菜单的结构样式"></a>导航主菜单的结构样式</h3><p><code>&amp;#xe665</code>是引用的字体中的一个箭头标志，字体通过css引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'menu'</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-menu hide"</span> <span class="attr">id</span>=<span class="string">"sub-menu"</span>&gt;</span></span><br><span class="line">    待完善</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'menu-content'</span> <span class="attr">id</span>=<span class="string">"menu-content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>手机、配件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>家具<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*引用的字体，已经提前下载好*/</span></span><br><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../static/font/iconfont.eot'</span>);</span><br><span class="line"><span class="comment">/*兼容不同浏览器*/</span></span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../static/font/iconfont.eot'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">'../static/font/iconfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">'../static/font/iconfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">'../static/font/iconfont.svg#iconfog'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*导航菜单*/</span></span><br><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-content</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">454px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">64px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span> <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1.5px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span> <span class="selector-tag">i</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续在slideImg()函数中添加导航菜单的动效方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> index=<span class="number">0</span>,timer=<span class="literal">null</span>,</span><br><span class="line">pics=byId(<span class="string">'banner'</span>).getElementsByTagName(<span class="string">'div'</span>),</span><br><span class="line">len=pics.length,</span><br><span class="line">dots=byId(<span class="string">'dots'</span>).getElementsByTagName(<span class="string">'span'</span>),</span><br><span class="line">menu_content=byId(<span class="string">'menu-content'</span>),</span><br><span class="line">sub_menu=byId(<span class="string">'sub-menu'</span>),</span><br><span class="line">menuItems=menu_content.getElementsByClassName(<span class="string">'menu-item'</span>),</span><br><span class="line">inner_box=sub_menu.getElementsByClassName(<span class="string">'inner-box'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slideImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">// 导航菜单</span></span><br><span class="line"><span class="comment">// 遍历menu-item 添加划过效果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;menuItems.length;m++)&#123;</span><br><span class="line"><span class="comment">// 给每一个menu-item定义data-index属性，作为索引</span></span><br><span class="line">menuItems[m].setAttribute(<span class="string">'data-index'</span>,m);</span><br><span class="line">menuItems[m].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// TODO 鼠标滑过显示子菜单</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子菜单结构与样式"><a href="#子菜单结构与样式" class="headerlink" title="子菜单结构与样式"></a>子菜单结构与样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-menu hide"</span> <span class="attr">id</span>=<span class="string">"sub-menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>手机、配件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold mr10"</span>&gt;</span>手机通讯：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>手机维修<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>以旧换新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold mr10"</span>&gt;</span>手机配件：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>手机壳<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>手机存储卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>数据线<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>充电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>电池<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold mr10"</span>&gt;</span>运营商：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>中国联通<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>中国移动<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>中国电信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold mr10"</span>&gt;</span>智能设备：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>智能手环<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>智能家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>智能手表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>其他配件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold mr10"</span>&gt;</span>娱乐：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>耳机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>音响<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>收音机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ml10 mr10"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>麦克风<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-inner-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>家具<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sub-menu</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">740px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">454px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">30</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner-box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#f01414</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.sub-row</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.bold</span>&#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.mr10</span>&#123;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.ml10</span>&#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hide</span>&#123;</span><br><span class="line">    <span class="comment">/*通过该属性来控制子菜单的显示与隐藏*/</span></span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充之前的导航菜单js方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导航菜单</span></span><br><span class="line"><span class="comment">// 遍历menu-item 添加划过效果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;menuItems.length;m++)&#123;</span><br><span class="line"><span class="comment">// 给每一个menu-item定义data-index属性，作为索引</span></span><br><span class="line">menuItems[m].setAttribute(<span class="string">'data-index'</span>,m);</span><br><span class="line">menuItems[m].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> idx = <span class="keyword">this</span>.getAttribute(<span class="string">'data-index'</span>);</span><br><span class="line"><span class="comment">// 遍历所有子菜单，先将每一个都隐藏</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;inner_box.length;j++)&#123;</span><br><span class="line">inner_box[j].style.display=<span class="string">'none'</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 再将子菜单显示，及对应inner-box显示</span></span><br><span class="line">sub_menu.className=<span class="string">'sub-menu'</span>;</span><br><span class="line">inner_box[idx].style.display=<span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标移出子菜单 隐藏</span></span><br><span class="line">sub_menu.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sub_menu.className=<span class="string">'sub-menu hide'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标位于子菜单 显示</span></span><br><span class="line">sub_menu.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sub_menu.className=<span class="string">'sub-menu'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标移出主菜单 子菜单隐藏</span></span><br><span class="line">menu_content.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sub_menu.className=<span class="string">'sub-menu hide'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></iframe>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django表单的使用与介绍（更新中）</title>
      <link href="/2020/05/17/django-form/"/>
      <url>/2020/05/17/django-form/</url>
      
        <content type="html"><![CDATA[<p>该文章是<a href="https://www.imooc.com" target="_blank" rel="noopener">慕课网</a>的相关课程笔记</p><p><strong>如何学好表单</strong></p><ul><li>掌握HTML各表单元素的使用</li><li>掌握前后端验证表单的方法</li><li>掌握从后端获取表单传递的数据</li><li>掌握在django中使用表单</li><li>实战演练夯实基础</li></ul><h2 id="表单相关介绍"><a href="#表单相关介绍" class="headerlink" title="表单相关介绍"></a>表单相关介绍</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用浏览器直接访问谷歌学术（超简单的教程）</title>
      <link href="/2020/05/15/visit-scholar-google/"/>
      <url>/2020/05/15/visit-scholar-google/</url>
      
        <content type="html"><![CDATA[<p>众所周知，通过谷歌学术可以方便的查找、引用、下载文献，但是由于审查原因，国内ip无法正常访问。</p><p>这里教大家一种访问谷歌学术的简便方法！通过该方法也可以访问谷歌的其他产品。</p><p>需要用到的工具：<font color="red">Chromium版的Edge浏览器</font>，一定认准是最新的Chrome内核的Edge浏览器哦</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515214604760.png"  alt="image-20200515214604760"></p><p><em>这里我用的是测试版，直接去官网下载的应该是正式版了</em></p><p><em>新版Edge浏览器因为用的是Chrome内核，所以也可以安装chrome浏览器的扩展文件，而且微软的扩展应用商店访问速度更快，所以非常建议大家用这个浏览器替换Chrome浏览器</em></p><h2 id="下载新版的Edge浏览器"><a href="#下载新版的Edge浏览器" class="headerlink" title="下载新版的Edge浏览器"></a>下载新版的Edge浏览器</h2><p><a href="https://www.microsoft.com/zh-cn/edge" target="_blank" rel="noopener">官方下载地址，点我</a></p><h2 id="安装扩展商店的Ghelper"><a href="#安装扩展商店的Ghelper" class="headerlink" title="安装扩展商店的Ghelper"></a>安装扩展商店的Ghelper</h2><p>打开edge浏览器，点击设置及其他，找到扩展</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515215102090.png"  alt="image-20200515215102090"></p><p>在扩展中找到”获取Microsoft Edge扩展”进入扩展插件商城</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515215623385.png"  alt="image-20200515215623385"></p><p>搜索 Ghelper 或 谷歌上网助手 安装</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515215833067.png"  alt="image-20200515215833067"></p><p>安装完毕后，浏览器工具栏中会出现ghelper图表，可以通过扩展打开或关闭该插件。</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515220502243.png"  alt="image-20200515220502243"></p><h2 id="使用10分钟临时邮箱注册Ghelper"><a href="#使用10分钟临时邮箱注册Ghelper" class="headerlink" title="使用10分钟临时邮箱注册Ghelper"></a>使用10分钟临时邮箱注册Ghelper</h2><p>该插件需要使用邮箱注册，且只提供3天免费使用期限。为了能够一直白嫖下去你需要这样做：</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515220652755.png"  alt="image-20200515220652755"></p><ol><li><p>点击立即注册</p></li><li><p>百度搜索10分钟临时邮箱</p><p>这种临时邮箱网站一大堆，随便选一个即可，我用的是<a href="http://www.linshiyouxiang.net/" target="_blank" rel="noopener">http://www.linshiyouxiang.net/</a></p><p>这种邮箱使用时间只有10分钟，我们用它来进行注册和验证</p></li><li><p>将生成的邮箱地址复制，到ghelper的注册页面粘贴4次（账号密码都不需要记住），点击注册</p></li></ol><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515221042886.png"  alt="image-20200515221042886"></p><ol start="4"><li><p>到临时邮箱页面接收邮件，激活账户</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515221648576.png"  alt="image-20200515221648576"></p><p>点击邮件，访问邮件中的激活连接，大功告成！</p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515222056758.png"  alt="image-20200515222056758"></p></li><li><p>三天到期之后退出当前账户，重新用临时邮箱注册即可（1分钟即可完成）</p></li></ol><p><font color="yellow" size="5">赶紧去试试吧，Bye</font></p><p><img src="/" class="lazyload" data-src="/2020/05/15/visit-scholar-google/image-20200515223323714.png"  alt="image-20200515223323714"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django2.2实战积分商城1——创建ORM模型</title>
      <link href="/2020/05/12/django-mooc-project/"/>
      <url>/2020/05/12/django-mooc-project/</url>
      
        <content type="html"><![CDATA[<p>用Django来实战一个积分商城的项目</p><p>项目准备阶段在我的<a href="[https://www.rice-and-bran.site/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/](https://www.rice-and-bran.site/2020/04/09/Django框架入门/)">Django框架入门</a> 文章中，不再赘述</p><h2 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h2><p>设计模型添加系统轮播图和新闻及通知到数据库中，可以从数据库中调取数据后展现到首页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> system <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slider</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 系统轮播图 """</span></span><br><span class="line">    name = models.CharField(<span class="string">'名称'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">'描述'</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    types = models.SmallIntegerField(<span class="string">'展示位置'</span>, choices=constants.SLIDER_TYPES_CHOICES,</span><br><span class="line">                                     default=constants.SLIDER_TYPE_INDEX)</span><br><span class="line">    img = models.ImageField(<span class="string">'图片'</span>, upload_to=<span class="string">'slider'</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">'排序'</span>, default=<span class="number">0</span>, help_text=<span class="string">'数字越大越靠前'</span>)</span><br><span class="line">    start_time = models.DateTimeField(<span class="string">'开始生效时间'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    end_time = models.DateTimeField(<span class="string">'生效结束时间'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    target_url = models.CharField(<span class="string">'跳转地址'</span>, max_length=<span class="number">256</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">'是否删除'</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = models.DateTimeField(<span class="string">'创建时间'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_time = models.DateTimeField(<span class="string">'最后修改时间'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'system_slider'</span></span><br><span class="line">        ordering = [<span class="string">'-reorder'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 新闻及通知 """</span></span><br><span class="line">    types = models.SmallIntegerField(<span class="string">'类型'</span>, choices=constants.NEWS_TYPES_CHOICES,</span><br><span class="line">                                     default=constants.NEWS_TYPE_NOTICES)</span><br><span class="line">    title = models.CharField(<span class="string">'标题'</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    content = models.TextField(<span class="string">'内容'</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">'排序'</span>, default=<span class="number">0</span>, help_text=<span class="string">'数字越大越靠前'</span>)</span><br><span class="line">    start_time = models.DateTimeField(<span class="string">'开始生效时间'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    end_time = models.DateTimeField(<span class="string">'生效结束时间'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">'是否删除'</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = models.DateTimeField(<span class="string">'创建时间'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_time = models.DateTimeField(<span class="string">'最后修改时间'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    view_count = models.IntegerField(<span class="string">'浏览次数'</span>, default=<span class="number">0</span>)</span><br><span class="line">    is_top = models.BooleanField(<span class="string">'是否顶置'</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'system_news'</span></span><br><span class="line">        ordering = [<span class="string">'-reorder'</span>]</span><br></pre></td></tr></table></figure><p>将上面的变量写入constants中，方便后期维护修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统模块-轮播图配置</span></span><br><span class="line">SLIDER_TYPE_INDEX = <span class="number">11</span></span><br><span class="line">SLIDER_TYPES_CHOICES = (</span><br><span class="line">(SLIDER_TYPE_INDEX, <span class="string">'首页'</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 系统模块-新闻通知</span></span><br><span class="line">NEWS_TYPE_NEWS=<span class="number">11</span></span><br><span class="line">NEWS_TYPE_NOTICES=<span class="number">12</span></span><br><span class="line">NEWS_TYPES_CHOICES = (</span><br><span class="line">(NEWS_TYPE_NEWS, <span class="string">'新闻'</span>),</span><br><span class="line">    (NEWS_TYPE_NOTICES, <span class="string">'通知'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用migrate同步到数据库，并给表中添加数据</p><h2 id="实现首页轮播图和新闻、消息通知"><a href="#实现首页轮播图和新闻、消息通知" class="headerlink" title="实现首页轮播图和新闻、消息通知"></a>实现首页轮播图和新闻、消息通知</h2><p>创建首页视图后，在首页html中添加模板，并通过视图传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!--顶部轮播--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container swiper-banner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">              &#123;% for slider in slider_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; slider.target_url &#125;&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; slider.img &#125;&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container swiper-news"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">              &#123;% for notice in notice_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../system/templates/news_info.html"</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目首页的视图中添加轮播图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">""" 首页 """</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    <span class="comment"># 查询首页轮播图</span></span><br><span class="line">    slider_list = Slider.objects.filter(types=constants.SLIDER_TYPE_INDEX)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询首页通知通知 顶置 有效 在生效时间内</span></span><br><span class="line">    notice_list = News.objects.filter(types=constants.NEWS_TYPE_NOTICES, is_top=<span class="literal">True</span>,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">        <span class="string">'slider_list'</span>: slider_list,</span><br><span class="line">        <span class="string">'notice_list'</span>: notice_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>在system模块中添加通知列表和详情url ，同步添加视图notice_list 、notice_detail</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'notice_list/'</span>,views.notice_list,name=<span class="string">'notice_list'</span>),</span><br><span class="line">re_path(<span class="string">r'^notice_detail/(?P&lt;pk&gt;\d+)/$'</span>,views.notice_detail,name=<span class="string">'notice_detail'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response, get_object_or_404</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> system <span class="keyword">import</span> constants</span><br><span class="line"><span class="keyword">from</span> system.models <span class="keyword">import</span> News</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notice_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">""" 新闻或通知列表 """</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    notice_list = News.objects.filter(types=constants.NEWS_TYPE_NOTICES, is_top=<span class="literal">True</span>,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'news_list.html'</span>, &#123;</span><br><span class="line">        <span class="string">'notice_list'</span>: notice_list</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notice_detail</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="string">""" 新闻或通知详情 """</span></span><br><span class="line">    <span class="comment"># 获得目标新闻或通知，没有的话就返回404</span></span><br><span class="line">    new_obj = get_object_or_404(News, pk=pk, is_valid=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 查看一次详情view_count增加1次</span></span><br><span class="line">    new_obj.view_count = F(<span class="string">'view_count'</span>) + <span class="number">1</span></span><br><span class="line">    new_obj.save()</span><br><span class="line">    <span class="comment"># 刷新 重新从数据库取出数据</span></span><br><span class="line">    new_obj.refresh_from_db()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'news_info.html'</span>, &#123;</span><br><span class="line">        <span class="string">'new_obj'</span>: new_obj</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>从项目url中引入system模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'sys/'</span>,include((<span class="string">'system.urls'</span>,<span class="string">'system'</span>),namespace=<span class="string">'sys'</span>)),</span><br></pre></td></tr></table></figure><p>修改html，使得index、news_list、news_detail的相关html页面能实现互相跳转，并继承自base.html，简化页面代码</p><p>继承base.html的过程及方法不再赘述，可查看我的django入门文章中的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &#123;# index.html,实现首页显示通知，并点击跳转和查看更多 #&#125;</span><br><span class="line"><span class="comment">&lt;!--新闻切换--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wy-ind-news"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"news-icon-laba"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container swiper-news"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">              &#123;% for notice in notice_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span></span><br><span class="line">                &#123;# url跳转 'namespace:name' 参数 #&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'sys:notice_detail' notice.pk %&#125;"</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'sys:notice_list' %&#125;"</span> <span class="attr">class</span>=<span class="string">"newsmore"</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"news-icon-more"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;# news_list.html #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-cells wy-news-list"</span>&gt;</span></span><br><span class="line">          &#123;% for notice in notice_list %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"weui-cell weui-cell_access"</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'sys:notice_detail' notice.pk %&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-cell__bd"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-cell__ft"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;# news_info.html #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"weui-article"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; new_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"wy-news-time"</span>&gt;</span>&#123;&#123; new_obj.created_time|date &#125;&#125; </span><br><span class="line">            浏览次数：&#123;&#123; new_obj.view_count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"wy-news-info"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123; new_obj.content &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upload/ban1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upload/ban2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分页处理消息列表"><a href="#分页处理消息列表" class="headerlink" title="分页处理消息列表"></a>分页处理消息列表</h2><p>提前插入多条数据准备</p><p><strong>使用django模型 控制台插入mysql日期数据时候报错：RuntimeWarning: DateTimeField News.start_time received a naive datetime (xxx) while time zone support is active.</strong></p><p>错误原因：和UTC（世界标准时间）有关。插入的数据包含日期类型</p><p>解决方法：…/settings.py 文件中设置：USE_TZ = False</p><p>在system视图中补充notice_list 使用分页器分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notice_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">""" 查看新闻列表 """</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    notice_list = News.objects.filter(types=constants.NEWS_TYPE_NOTICES,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">    page_size = <span class="number">15</span></span><br><span class="line">    pages = Paginator(notice_list, page_size)</span><br><span class="line">    notice_data = pages.page(page)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'news_list.html'</span>, &#123;</span><br><span class="line">        <span class="string">'notice_data'</span>: notice_data</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>修改news_list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-cells wy-news-list"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.object_list当前数据页列表--&gt;</span></span><br><span class="line">    &#123;% for notice in notice_data.object_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"weui-cell weui-cell_access"</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'sys:notice_detail' notice.pk %&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-cell__bd"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html添加分页按钮，加入if标签判断，并使用jQueryweui修饰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--从官网copy组件然后添加内容即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"weui-footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"weui-footer__text"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.paginator.num_pages可以查看总的分页数--&gt;</span></span><br><span class="line">    当前是第&#123;&#123; notice_data.number &#125;&#125;页，共&#123;&#123; notice_data.paginator.num_pages &#125;&#125;页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--判断是否存在上一页，添加上一页的跳转链接--&gt;</span></span><br><span class="line">    &#123;% if notice_data.has_previous %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"weui-footer__link"</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'sys:notice_list' %&#125;?page=&#123;&#123; notice_data.previous_page_number &#125;&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% if notice_data.has_next %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"weui-footer__link"</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'sys:notice_list' %&#125;?page=&#123;&#123; notice_data.next_page_number &#125;&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/05/12/django-mooc-project/image-20200515160423314.png"  alt="image-20200515160423314"></p><h2 id="用户基本信息的实现"><a href="#用户基本信息的实现" class="headerlink" title="用户基本信息的实现"></a>用户基本信息的实现</h2><h3 id="设计模型-1"><a href="#设计模型-1" class="headerlink" title="设计模型"></a>设计模型</h3><p><img src="/" class="lazyload" data-src="/2020/05/12/django-mooc-project/image-20200515161705432.png"  alt="image-20200515161705432"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> accounts <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtils</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'create_time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">'update_time'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 按更新时间排序，-号表示降序</span></span><br><span class="line">        ordering = [<span class="string">'-upated_at'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 用户基本信息表 """</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">256</span>)</span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">'avatar'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    integral = models.SmallIntegerField(<span class="string">'用户积分'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    level = models.SmallIntegerField(<span class="string">'用户等级'</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'accounts_user'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(CommonUtils)</span>:</span></span><br><span class="line">    <span class="string">""" 用户详细信息表 """</span></span><br><span class="line">    user = models.OneToOneField(User, models.CASCADE)</span><br><span class="line">    real_name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_email_valid = models.BooleanField(<span class="string">'邮箱是否已经通过验证'</span>, default=<span class="literal">False</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    phone_num = models.CharField(max_length=<span class="number">13</span>)</span><br><span class="line">    sex = models.SmallIntegerField(default=<span class="number">1</span>, choices=constants.SEX_CHOICES)</span><br><span class="line">    age = models.SmallIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'accounts_user_profile'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span><span class="params">(CommonUtils)</span>:</span></span><br><span class="line">    <span class="string">""" 用户收货地址表 """</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE)</span><br><span class="line">    province = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    area = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    address = models.CharField(<span class="string">'详细地址'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    receiver = models.CharField(<span class="string">'收件人'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">'地址是否有效'</span>, default=<span class="literal">True</span>)</span><br><span class="line">    is_default = models.BooleanField(<span class="string">'是否默认地址'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'accounts_user_address'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginRecord</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 用户登录历史 """</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE)</span><br><span class="line">    ip = models.CharField(<span class="string">'ip地址'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    address = models.CharField(<span class="string">'所在地'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    source = models.CharField(<span class="string">'登录来源'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    login_time = models.DateTimeField(<span class="string">'登录时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'accounts_user_login'</span></span><br><span class="line">        ordering = [<span class="string">'id'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordChangeLog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 用户更改密码记录 """</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE)</span><br><span class="line">    new_pass = models.CharField(<span class="string">'新密码'</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    old_pass = models.CharField(<span class="string">'旧密码'</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    change_time = models.DateTimeField(<span class="string">'修改时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'accounts_password_change_log'</span></span><br></pre></td></tr></table></figure><h2 id="商品的基本信息"><a href="#商品的基本信息" class="headerlink" title="商品的基本信息"></a>商品的基本信息</h2><p><img src="/" class="lazyload" data-src="/2020/05/12/django-mooc-project/image-20200515183136821.png"  alt="image-20200515183136821"></p><h3 id="related-name-related-query-name区别"><a href="#related-name-related-query-name区别" class="headerlink" title="related_name/related_query_name区别"></a>related_name/related_query_name区别</h3><blockquote><p>看表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">   name = models.CharField(verbose_name=<span class="string">'姓名'</span>, max_length=<span class="number">50</span>)</span><br><span class="line">   age = models.IntegerField(verbose_name=<span class="string">'年龄'</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">   name = models.CharField(verbose_name=<span class="string">'书名'</span>, max_length=<span class="number">100</span>)</span><br><span class="line">   author = models.ForeignKey(Author, verbose_name=<span class="string">'作者'</span>, related_name=<span class="string">'bs'</span>, related_query_name=<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><p>那该怎么查询呢？？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;Author.objects.filter(b__name=<span class="string">'learn_python'</span>)</span><br><span class="line">&gt;<span class="comment">#通过related_query_name查询书名为learn_python的作者</span></span><br><span class="line"></span><br><span class="line">&gt;author = Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">&gt;author.bs.all()</span><br><span class="line">&gt;通过related_name来查询该作者所有的书</span><br></pre></td></tr></table></figure><p>看懂例子自然就明白这两个的区别的用法了<br>————————————————<br>版权声明：本文为CSDN博主「木木木可可可」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_45154837/article/details/9989299" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45154837/article/details/9989299</a></p></blockquote><p>首先我们要设计商品表、商品分类表、标签表以及评论表。其中商品的图片需要关联商品，也要关联店铺、关联评论，这样图片需要单独使用一张表，且用到复合关联，这张表我们放在system模块中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># system 模块中添加该表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 图片表 """</span></span><br><span class="line">    <span class="comment"># 给图片文件夹进行分割 2020/5</span></span><br><span class="line">    img = models.ImageField(<span class="string">'图片'</span>, upload_to=<span class="string">'%Y%m/images/'</span>)</span><br><span class="line">    summary = models.CharField(<span class="string">'图片名称'</span>, max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复合关联</span></span><br><span class="line">    content_type = models.ForeignKey(ContentType, models.CASCADE)</span><br><span class="line">    object_id = models.PositiveIntegerField()</span><br><span class="line">    content_object = GenericForeignKey(<span class="string">'content_type'</span>, <span class="string">'object_id'</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">'是否有效'</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'create_time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">'update_time'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'system_images'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mall模块中</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericRelation</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> accounts.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> system.models <span class="keyword">import</span> ImageFile</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtil</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 公共类 """</span></span><br><span class="line">    uid = models.UUIDField(<span class="string">'商品/分类/标签等的uid'</span>, default=uuid.uuid4, editable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">'是否有效'</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'create_time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">'update_time'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">'排序'</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classify</span><span class="params">(CommonUtil)</span>:</span></span><br><span class="line">    <span class="string">""" 商品分类表 """</span></span><br><span class="line">    <span class="comment"># 分类下面的子分类，进行外键关联</span></span><br><span class="line">    parent = models.ForeignKey(<span class="string">'self'</span>, models.CASCADE, related_name=<span class="string">'children'</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">'分类主图'</span>, upload_to=<span class="string">'classify'</span>)</span><br><span class="line">    code = models.CharField(<span class="string">'编码'</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">'名称'</span>, max_length=<span class="number">12</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">'描述'</span>, max_length=<span class="number">64</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mall_classify'</span></span><br><span class="line">        ordering = [<span class="string">'-reorder'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(CommonUtil)</span>:</span></span><br><span class="line">    <span class="string">""" 商品标签表 """</span></span><br><span class="line">    name = models.CharField(<span class="string">'名称'</span>, max_length=<span class="number">12</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">'分类主图'</span>, upload_to=<span class="string">'tag'</span>)</span><br><span class="line">    code = models.CharField(<span class="string">'编码'</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mall_tag'</span></span><br><span class="line">        ordering = [<span class="string">'-reorder'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(CommonUtil)</span>:</span></span><br><span class="line">    <span class="string">""" 商品基本信息表 """</span></span><br><span class="line">    name = models.CharField(<span class="string">'商品名称'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">'商品描述'</span>, max_length=<span class="number">128</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    content = models.TextField(<span class="string">'商品描述'</span>)</span><br><span class="line">    types = models.SmallIntegerField(<span class="string">'商品类型'</span>, choices=constants.PRODUCT_TYPE_CHOICES,</span><br><span class="line">                                     default=constants.PRODUCT_TYPE_ACTUAL)</span><br><span class="line">    price = models.FloatField(<span class="string">'兑换价格'</span>)</span><br><span class="line">    origin_price = models.FloatField(<span class="string">'商品原价'</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">'商品主图'</span>, upload_to=<span class="string">'product'</span>)</span><br><span class="line">    buy_link = models.CharField(<span class="string">'购买链接'</span>, max_length=<span class="number">256</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    status = models.SmallIntegerField(<span class="string">'商品状态'</span>, choices=constants.PRODUCT_STATUS_CHOICES,</span><br><span class="line">                                      default=constants.PRODUCT_STATUS_OFF)</span><br><span class="line">    storage = models.IntegerField(<span class="string">'库存'</span>)</span><br><span class="line">    remain_storage = models.IntegerField(<span class="string">'剩余库存'</span>)</span><br><span class="line">    view_count = models.IntegerField(<span class="string">'浏览次数'</span>)</span><br><span class="line">    score = models.FloatField(<span class="string">'商品评分'</span>, default=<span class="number">10.0</span>)</span><br><span class="line">    <span class="comment"># 关联Tag Classify</span></span><br><span class="line">    tags = models.ManyToManyField(Tag, verbose_name=<span class="string">'标签'</span>, related_name=<span class="string">'tags'</span>)</span><br><span class="line">    classes = models.ManyToManyField(Classify, verbose_name=<span class="string">'商品分类'</span>, related_name=<span class="string">'classify'</span>)</span><br><span class="line">    <span class="comment"># 方向关联system中的图片</span></span><br><span class="line">    banners = GenericRelation(ImageFile, verbose_name=<span class="string">'banner图'</span>, related_query_name=<span class="string">'banners'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mall_product'</span></span><br><span class="line">        ordering = [<span class="string">'-reorder'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comments</span><span class="params">(CommonUtil)</span>:</span></span><br><span class="line">    <span class="string">""" 商品评论表 """</span></span><br><span class="line">    product = models.ForeignKey(Product, models.CASCADE)</span><br><span class="line">    <span class="comment"># on_delete=models.PROTECT用户删除后，评论不删除</span></span><br><span class="line">    user = models.OneToOneField(User, models.PROTECT)</span><br><span class="line">    content = models.TextField(<span class="string">'评论内容'</span>)</span><br><span class="line">    score = models.FloatField(<span class="string">'用户评分'</span>, choices=constants.COMMENTS_SCORE)</span><br><span class="line">    img = models.ImageField(<span class="string">'评论图片'</span>, upload_to=<span class="string">'comments'</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mall_comments'</span></span><br><span class="line">        <span class="comment"># 先按排序降序，再按发表时间排序</span></span><br><span class="line">        ordering = [<span class="string">'-reorder'</span>, <span class="string">'-created_at'</span>]</span><br></pre></td></tr></table></figure><h2 id="订单中心及购物车"><a href="#订单中心及购物车" class="headerlink" title="订单中心及购物车"></a>订单中心及购物车</h2><p>个人中心模型</p><p><img src="/" class="lazyload" data-src="/2020/05/12/django-mooc-project/image-20200517090713181.png"  alt="image-20200517090713181"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericRelation</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> accounts.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"><span class="keyword">from</span> system.models <span class="keyword">import</span> ImageFile</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 用户订单 """</span></span><br><span class="line">    sn = models.CharField(<span class="string">'订单编号'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    user = models.ForeignKey(User, models.PROTECT, related_name=<span class="string">'orders'</span>)</span><br><span class="line">    buy_count = models.IntegerField(<span class="string">'购买数量'</span>, default=<span class="number">1</span>)</span><br><span class="line">    buy_amount = models.FloatField(<span class="string">'总价'</span>)</span><br><span class="line">    product = models.ForeignKey(Product, models.PROTECT)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'订单提交时间'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 商品快照</span></span><br><span class="line">    name = models.CharField(<span class="string">'商品名称'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    price = models.FloatField(<span class="string">'兑换价格'</span>)</span><br><span class="line">    origin_price = models.FloatField(<span class="string">'商品原价'</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">'商品主图'</span>)</span><br><span class="line">    <span class="comment"># 收货人信息</span></span><br><span class="line">    to_user = models.CharField(<span class="string">'收货人'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    to_area = models.CharField(<span class="string">'省市区'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    to_address = models.CharField(<span class="string">'详细地址'</span>, max_length=<span class="number">128</span>)</span><br><span class="line">    to_phone = models.CharField(<span class="string">'手机号码'</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    remark = models.CharField(<span class="string">'备注信息'</span>, max_length=<span class="number">256</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 快递信息</span></span><br><span class="line">    express_name = models.CharField(<span class="string">'快递'</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    status = models.SmallIntegerField(<span class="string">'订单状态'</span>, choices=constants.ORDER_STATUS_CHOICES,</span><br><span class="line">                                      default=constants.ORDER_STATUS_SUBMIT)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mine_order'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 购物车模型 """</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE, related_name=<span class="string">'carts'</span>)</span><br><span class="line">    product = models.ForeignKey(Product, models.CASCADE)</span><br><span class="line">    <span class="comment"># 与订单关联，提交订单时订单可以获取到购物车的商品</span></span><br><span class="line">    order = models.ForeignKey(Order, models.CASCADE, verbose_name=<span class="string">'订单'</span>, null=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 商品快照</span></span><br><span class="line">    name = models.CharField(<span class="string">'商品名称'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    price = models.FloatField(<span class="string">'兑换价格'</span>)</span><br><span class="line">    origin_price = models.FloatField(<span class="string">'商品原价'</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">'商品主图'</span>)</span><br><span class="line"></span><br><span class="line">    count = models.PositiveIntegerField(<span class="string">'购买数量'</span>)</span><br><span class="line">    amount = models.FloatField(<span class="string">'总额'</span>)</span><br><span class="line"></span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'创建时间'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">'修改时间'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    status = models.SmallIntegerField(<span class="string">'订单状态'</span>, choices=constants.ORDER_STATUS_CHOICES,</span><br><span class="line">                                      default=constants.ORDER_STATUS_INIT)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mine_cart'</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 因为需要关联订单，所以将评论移动至了mine表中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comments</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 商品评论表 """</span></span><br><span class="line">    product = models.ForeignKey(Product, models.CASCADE, related_name=<span class="string">'comments'</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.PROTECT用户删除后，评论不删除</span></span><br><span class="line">    user = models.OneToOneField(User, models.PROTECT, related_name=<span class="string">'comments'</span>)</span><br><span class="line">    oder = models.ForeignKey(Order, models.PROTECT, related_name=<span class="string">'comments'</span>, verbose_name=<span class="string">'订单'</span>)</span><br><span class="line">    content = models.TextField(<span class="string">'评论内容'</span>)</span><br><span class="line">    score = models.FloatField(<span class="string">'商品评分'</span>, choices=constants.COMMENTS_SCORE)</span><br><span class="line">    imgs = GenericRelation(ImageFile, verbose_name=<span class="string">'评价晒图'</span>, related_query_name=<span class="string">'imgs'</span>)</span><br><span class="line">    is_anonymous = models.BooleanField(<span class="string">'是否匿名'</span>, default=<span class="literal">True</span>)</span><br><span class="line">    uid = models.UUIDField(<span class="string">'商品/分类/标签等的uid'</span>, default=uuid.uuid4, editable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">'是否有效'</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'create_time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">'update_time'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">'排序'</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'mine_product_comments'</span></span><br><span class="line">        <span class="comment"># 先按排序降序，再按发表时间排序</span></span><br><span class="line">        ordering = [<span class="string">'-reorder'</span>, <span class="string">'-created_at'</span>]</span><br></pre></td></tr></table></figure><p>最终的数据表</p><p><img src="/" class="lazyload" data-src="/2020/05/12/django-mooc-project/image-20200517110542810.png"  alt="image-20200517110542810"></p>]]></content>
      
      
      <categories>
          
          <category> 实战案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何应对拖延症</title>
      <link href="/2020/05/11/against-Procrastination/"/>
      <url>/2020/05/11/against-Procrastination/</url>
      
        <content type="html"><![CDATA[<p>一直以来我都有比较严重的拖延症，毫无疑问拖延症一直影响着学习、工作以及生活。对我个人而言，拖延症主要原因还是在于想逃避相对完成难度较大的任务，我会倾向于挑简单的事情先完成，导致难度大但是重要的事情一拖再拖，最后造成严重后果。摘录一个心理测试结果用来提醒自己，对抗拖延症！</p><h2 id="如何应对拖延？"><a href="#如何应对拖延？" class="headerlink" title="如何应对拖延？"></a><font color="red">如何应对拖延？</font></h2><p>在解决拖延前需要做的三件事：</p><p>1、停止指责自己</p><p>当拖延出现时，不必急于指责自己，你不妨觉察一下，是什么原因使你抗拒做事？</p><p>拖延很多时候是难以依靠意识控制的，因为它可能涉及你内在的冲突、防御或习惯化。所以一味地要求自己克服拖延可能会引发焦虑或自我否定，从而陷入越想克服拖延、越焦虑、越焦虑越难以开启行动的恶性循环。</p><p>停止自我批评和指责，思考拖延对于你的意义和原因，你才能找到解决的办法。</p><p>2、理解你拖延的意义</p><p>任何行为的发生都是有意义的，拖延也是如此，它的背后可能暗含着多种提示信号，比如提示着内心的冲突，提示着未被觉察的焦虑和恐惧，提示着暂时无法接受的现实。或者，它在提示你，比起计划中要做的事，你潜意识中有更渴望的事情想做。</p><p>在克服拖延之前，不妨试着思考拖延在提示你什么，这可以帮助你获得更多有价值的信息，从而做出更适合你的判断与决策。</p><p>3、觉察拖延带给你怎样的好处？</p><p>仔细想想，拖延一定在某种程度上给你带来了一些“好处”。</p><p>这些好处是什么呢？比如：</p><p>间接地表达了你不被允许的感受：比如我不愿意被控制、我用拖延来表达反抗等等；</p><p>暂时地逃避了面对现实的痛苦感；</p><p>使你不必面对失望感等等；</p><p>拖延往往只是人们内在冲突的一种表达。去理解你内在的冲突是什么，你才能找到应对的办法。</p><p><strong>下面的七条建议是帮助你应对拖延的小技巧：</strong></p><p>1、将事件与自尊和自我价值区分开</p><p>当我们迟迟无法开始做某件事，往往是赋予了这件事不同寻常的意义。此时，事件已经不单单是它本身，它还可能涉及到个人的自尊、自我价值、欲望等等。</p><p>比如，一个演员拖延应该参加的排练，可能是害怕失败减损自己的自尊感；</p><p>一个完美主义的画家，迟迟无法动笔，因为一旦落笔，就会失去“完美感”；</p><p>一个孩子担负了家庭太多的预期，担忧自己的表现令人失望，于是总是回避去行动等等；</p><p>一件事情结果的好坏和一个人的自我价值是不同的。区分它们两个，能够使你更专注于当下的事件。</p><p>2、了解自己的能力，选择有适当挑战的任务</p><p>在面对过度超越自己能力的任务时，任何人都会选择拖延或逃跑。挑战过大时，容易减损自己的信心，对自我过于苛责。</p><p>而当挑战适度，人们更愿意迎接挑战，并从过程中获得成长和快感。</p><p>3、将任务拆分成更容易的目标</p><p>当你感到要做的事情非常多，压力和焦虑的感觉可能会让你想要回避所有的任务。</p><p>因此，每当面临一项繁重的任务而感到压力时，你可以试着将任务分成几个小部分，将注意力集中在单独的小目标上。当你选定一个小目标而不去看剩下的所有事情，你会有更大的动力去完成它。</p><p>4、训练大脑，提升自控力和意志力</p><p>据科学研究表明，人的大脑具有极强的可塑性。大脑能够将个体的经验转化为自身的能力。我们的意志力也是可以锻炼的。</p><p>研究发现，在小事上持续自控可以提高整体的意志力。你可以尝试从日常生活中的小事做起，比如：每天早上吃早餐、一周锻炼两次身体等等。</p><p>5、保护自己的意志力资源</p><p>人的意志力资源是有限的。这意味着，我们不可能同时做好所有事情。所以，在行动前，不妨先将事情区分个轻重缓急，对于那些不太重要的事，可以降低对自己的要求，避免意志力资源过分消耗。</p><p>6、坚持体育运动</p><p>心理学家认为，理解自己的情绪状态，和良好的身体状态，都有助于帮助个体面对和完成被拖延的任务。在行为主义对拖延的干预中，也提到了体育运动的重要性。坚持运动可以改善个体的情绪状态，对于抑郁和焦虑也有一定的改善，同时还可以提升个体的自信心。这可以在一定程度上缓解拖延。</p><p>7、接纳自己的局限</p><p>拖延的本质是我们延迟去面对某件事，这背后往往蕴含着我们不想面对的现实。因为一旦开始行动，现实就更加难以掩饰。</p><p>这些现实可能包括：</p><p>1.我们只是一个普通人。</p><p>2.我们无法不犯错。</p><p>3.我们没办法每次都成功。</p><p>4.总有些事情是我们不了解的。</p><p>5.你不可能让每一件事都非常出色。</p><p>6.努力不一定会有回报等等。</p><p>这意味着，只要做事和行动，我们就可能要面对理想化的破灭，不可避免要去面对我们自己的一些局限和痛苦感。</p><p>但我们都是有局限的普通人，接纳自我、做最小的尝试，才是最有力量的行动。请你将每一次的拖延都看做自我探索的机会，理解它，并学习和它相处。</p><p>如果拖延已经开始影响到你的工作和生活，并伴随着情绪上的困扰，比如抑郁、焦虑等等；建议寻求专业心理咨询的帮助。心理咨询师会帮助你探索和理解你拖延的意义，帮助你面对你内在的冲突和困境。</p><p>最后，祝你好运！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（提升篇）（更新中）</title>
      <link href="/2020/05/11/Linux2/"/>
      <url>/2020/05/11/Linux2/</url>
      
        <content type="html"><![CDATA[<h2 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h2><p>该篇主要内容是线程同步和进程同步的方法</p><p>有关进程同步的内容可以查看 <a href="[https://www.rice-and-bran.site/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5](https://www.rice-and-bran.site/2020/04/15/操作系统/#进程管理之进程同步)">操作系统（基础篇）进程同步</a></p><blockquote><p><strong>临界资源</strong>：临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。当有进程在使用临界资源时，其他进程必须依据操作系统额同步机制等待占用进程释放该共享资源才可重新竞争使用资源。</p></blockquote><div class="mermaid">          graph TD;A[保护临界资源]-->B[线程间同步]A-->C[进程间同步]B-->D[互斥量]B-->E[读写锁]B-->F[自旋锁]B-->G[条件变量]C-->H[共享内存]C-->I[域套接字]C-->J[...]          </div><p>其他内容：用户态与内核态、上下文切换、协程、编写性能良好的程序指南</p><h2 id="线程同步至互斥量"><a href="#线程同步至互斥量" class="headerlink" title="线程同步至互斥量"></a>线程同步至互斥量</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell切入虚拟环境</title>
      <link href="/2020/04/29/powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/04/29/powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>PowerShell切入虚拟环境需要以下步骤：</p><ol><li>用cd进入虚拟环境目录</li><li>使用命令“Set-ExecutionPolicy -ExecutionPolicy Unrestricted”修改执行策略，询问是否更改时输入”Y”。</li><li>cd 进入Scripts文件夹</li><li>输入命令”.\activate.ps1”进入该虚拟环境</li></ol><p><img src="/" class="lazyload" data-src="/2020/04/29/powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/image-20200429212019072.png"  alt="image-20200429212019072"></p><p>如果是命令提示符环境直接输入<code>workon django2.2</code>即可</p><p><img src="/" class="lazyload" data-src="/2020/04/29/powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/image-20200429212208471.png"  alt="image-20200429212208471"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器</title>
      <link href="/2020/04/24/Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2020/04/24/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>装饰器</p><ul><li>用于扩展原来函数功能的函数</li><li>返回函数的函数</li><li>在不用更改原函数的代码的前提下给函数增加新的功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span><span class="params">(a_func)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warpTheFunction</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'I am doing some boring work before executing a_func()'</span>)</span><br><span class="line">a_func()</span><br><span class="line">print(<span class="string">'I am doing some boring work after executing a_func()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> warpTheFunction</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'I am the function which needs some decoration to remove my foul smell'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a_function_requiring_decoration()</span><br><span class="line">    <span class="comment">#outputs: "I am the function which needs some decoration to remove my foul smell"</span></span><br><span class="line">    </span><br><span class="line">    a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br><span class="line"><span class="comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span></span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure><p>它们封装一个函数，并且用这样或者那样的方式来修改它的行为，以上演示的就是装饰器的基本原理</p><p>装饰器中的@可以用简短的方式生成被装饰的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Hey you! Decorate me!"""</span></span><br><span class="line">    print(<span class="string">"I am the function which needs some decoration to "</span></span><br><span class="line">          <span class="string">"remove my foul smell"</span>)</span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#the @a_new_decorator is just a short way of saying:</span></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure><h2 id="wraps"><a href="#wraps" class="headerlink" title="@wraps"></a>@wraps</h2><p>接上，如果输出<code>a_function_requiring_decoration.__name__</code>，结果将是wrapTheFunction。这里的函数被warpTheFunction替代了。它重写了我们函数的名字和注释文档(docstring)。幸运的是Python提供给我们一个简单的函数来解决这个问题，那就是functools.wraps。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span><span class="params">(a_func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(a_func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapTheFunction</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"I am doing some boring work before executing a_func()"</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        print(<span class="string">"I am doing some boring work after executing a_func()"</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"> </span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Hey yo! Decorate me!"""</span></span><br><span class="line">    print(<span class="string">"I am the function which needs some decoration to "</span></span><br><span class="line">          <span class="string">"remove my foul smell"</span>)</span><br><span class="line"> </span><br><span class="line">print(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure><h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><ul><li>通过给单层装饰器函数外层再添加一层嵌套，达到给单层装饰器添加参数的目的</li><li>可以不传入参数，但是不能省略小括号</li></ul><p>1、<em>args代表不定长参数，“不定长”意味着你在定义函数的时候不知道调用者会传递几个参数进来，加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</em>代表传入的参数类型是元组<br>2、*<em>kwargs允许传递不定长的关键字参数。若需要在函数中定义不定长个命名参数，需要使用。\</em>*代表传入的参数类型是字典<br>3、结合在一起使用</p><p>日志的例子，并创建一个包裹函数，能让我们指定一个用于输出的日志文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logit</span><span class="params">(logfile=<span class="string">'out.log'</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logging_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped_function</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            log_string = func.__name__ + <span class="string">" was called"</span></span><br><span class="line">            print(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile，并写入内容</span></span><br><span class="line">            <span class="keyword">with</span> open(logfile, <span class="string">'a'</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的logfile</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line">    <span class="keyword">return</span> logging_decorator</span><br><span class="line"> </span><br><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">myfunc1()</span><br><span class="line"><span class="comment"># Output: myfunc1 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 out.log 的文件出现了，里面的内容就是上面的字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@logit(logfile='func2.log')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">myfunc2()</span><br><span class="line"><span class="comment"># Output: myfunc2 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 func2.log 的文件出现了，里面的内容就是上面的字符串</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基本操作</title>
      <link href="/2020/04/23/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/23/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h2><p>MySQL配置文件部分参数</p><p>MySQL默认端口号3306，80端口是HTTP常用端口，21端口主要用于FTP（File Transfer Protocol，文件传输协议）服务，22端口是ssh常用端口。</p><p>MySQL配置文件：<br>在my.ini文件中，我们可以配置各种MySQL的配置，例如字符集、端口号、目录地址等等。<br>在结构上分三大块：client图形界面的设置、mysql命令行客户端的设置（客户端配置信息）、mysqld数据库配置信息</p><p><img src="/" class="lazyload" data-src="/2020/04/23/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/5e78338c00015cfc19201080.jpg"  alt="img"></p><p><strong>如何覆盖root用户密码</strong>：</p><ol><li>在任何目录下创建一个TXT文件，定义修改密码的SQL语句：ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘123456’（假设文件所在目录为E:/temp.txt）</li><li>右键左侧开始图标，点击Windows PowerShell(管理员)(A)</li><li>关闭MySQL服务：net stop mysql80</li><li>修改密码命令：mysqld –defaults -file=”C:\ProgramData\MySQL\MySQL Server 8.0\my.ini” –init-file=”E:/temp.txt” –console</li><li>按Ctrl+C关闭mysqld</li><li>关闭当前Windows PowerShell(管理员)(A)打开另一个Windows PowerShell(管理员)(A)启动MySQL服务 ：net start mysql80</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><p>MySQL支持所有标准SQL数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。</p><p><a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">菜鸟教程mysql数据类型</a></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>命令行登录数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><strong>Python连接数据库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector# 安装mysql-connector驱动</span><br></pre></td></tr></table></figure><p>创建数据库连接</p><p>通过cursor.execute(sql)来执行sql语句，fetchone、fetchall可以获取执行后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"> </span><br><span class="line">mydb = mysql.connector.connect(</span><br><span class="line">  host=<span class="string">"localhost"</span>,       <span class="comment"># 数据库主机地址</span></span><br><span class="line">  user=<span class="string">"yourusername"</span>,    <span class="comment"># 数据库用户名</span></span><br><span class="line">  passwd=<span class="string">"yourpassword"</span>   <span class="comment"># 数据库密码</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">mycursor = mydb.cursor()</span><br><span class="line">mycursor.execute(<span class="string">"CREATE DATABASE runoob_db"</span>)</span><br></pre></td></tr></table></figure><h2 id="创建-删除数据库数据表"><a href="#创建-删除数据库数据表" class="headerlink" title="创建/删除数据库数据表"></a>创建/删除数据库数据表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>使用 mysqladmin 创建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p create 数据库名</span><br></pre></td></tr></table></figure><p>drop删除数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>使用 mysqladmin 删除数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p drop 数据库名;</span><br></pre></td></tr></table></figure><p>选择数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><p>创建数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">colum_name colum_type,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br></pre></td></tr></table></figure><ul><li><p>SELECT 命令可以读取一条或者多条记录。</p></li><li><p>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</p></li><li><p>你可以使用 WHERE 语句来包含任何条件。</p></li><li><p>你可以使用 LIMIT 属性来设定返回的记录数。</p></li><li><p>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</p></li></ul><h3 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a>WHERE子句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号<strong>,</strong> 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><h4 id="LIKE子句"><a href="#LIKE子句" class="headerlink" title="LIKE子句"></a>LIKE子句</h4><p> LIKE 子句中使用百分号 %字符来表示任意字符，用来继续限定条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE field1 LIKE condition1 [AND [OR]] filed2 &#x3D; &#39;somevalue&#39;</span><br></pre></td></tr></table></figure><h3 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE 更新"></a>UPDATE 更新</h3><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1&#x3D;new-value1, field2&#x3D;new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><h3 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h3><p>使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure><h3 id="UNION操作符"><a href="#UNION操作符" class="headerlink" title="UNION操作符"></a>UNION操作符</h3><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure><p>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</p><p>ALL: 可选，返回所有结果集，包含重复数据。</p><h3 id="ORDER-BY排序"><a href="#ORDER-BY排序" class="headerlink" title="ORDER BY排序"></a>ORDER BY排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]</span><br></pre></td></tr></table></figure><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。</li></ul><h3 id="GROUP-BY-语句"><a href="#GROUP-BY-语句" class="headerlink" title="GROUP BY 语句"></a>GROUP BY 语句</h3><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name, function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name;</span><br></pre></td></tr></table></figure><h4 id="HAVING子句"><a href="#HAVING子句" class="headerlink" title="HAVING子句"></a>HAVING子句</h4><p>用于限定GROUP BY的查询，作为GROUP BY的条件使用</p><p>例如：查询每个部门汇总，1982年以后入职的员工超过2个人的部门</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT deptno FROM t_emp</span><br><span class="line">WHERE hiredate&gt;&#x3D;&#39;1982-01-01&#39;</span><br><span class="line">GROUP BY deptno HAVING COUNT(*)&gt;&#x3D;2;</span><br></pre></td></tr></table></figure><h3 id="JOIN语句"><a href="#JOIN语句" class="headerlink" title="JOIN语句"></a>JOIN语句</h3><p>JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。<br>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。<br>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</p><p>ON 接连接条件</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>WHERE和SELECT子句的子查询效率低下不推荐使用，应该改成表连接的写法。但是FROM子查询经常使用，因为他只会查询一次。</p><p>查询底薪超过公司底薪的员工信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT empno,ename,sal</span><br><span class="line">FROM t_emp</span><br><span class="line">WHERE sal&gt;&#x3D;(SELECT AVG(sal) FROM t_emp); # 比较每条记录都要重复执行</span><br></pre></td></tr></table></figure><p>改为FROM子查询后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.empno,e.ename,e.sal,t.svg</span><br><span class="line">FROM t_emp e JOIN</span><br><span class="line">(SELECT deptno,AVG(sal)) as avg</span><br><span class="line">FROM t_emp GROUP BY deptno) t</span><br><span class="line">ON e.deptno&#x3D;t.deptno AND e.sal&gt;&#x3D;t.avg;</span><br></pre></td></tr></table></figure><p>注意：FROM字查询之后的数据来源不是数据表，而是一个查询结果，一般FROM子查询的返回类型的多行多列的结果集</p><h2 id="其他MySQL内容"><a href="#其他MySQL内容" class="headerlink" title="其他MySQL内容"></a>其他MySQL内容</h2><p>参见<a href="https://www.runoob.com/mysql/mysql-null.html" target="_blank" rel="noopener">MySQL</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django对象关系映射(ORM)</title>
      <link href="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/"/>
      <url>/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/</url>
      
        <content type="html"><![CDATA[<p>本文是<a href="www.imooc.com">慕课网</a>相关课程的学习笔记</p><p><strong>ORM(Object Relational Mapping)</strong>，对象关系映射</p><p>ORM的重要特性：</p><ul><li>面向对象的编程思想，方便扩充</li><li>少写SQL，提升开发效率</li><li>支持多种类型的数据库，方便切换</li><li>ORM技术成熟，能解决大部分问题</li></ul><h2 id="ORM模型"><a href="#ORM模型" class="headerlink" title="ORM模型"></a>ORM模型</h2><h3 id="Django-ORM配置"><a href="#Django-ORM配置" class="headerlink" title="Django ORM配置"></a>Django ORM配置</h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>:<span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>:<span class="string">'mydatabase'</span>,</span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'mydatabase_user'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'mypassword'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>default：默认的数据库，可配置多个数据，使用名称来区分<br>ENGINE：数据库引擎<br><code>&#39;django.db.backends.mysql&#39;&#39;django.db.backends.postgresql&#39;&#39;django.db.backends.sqlite3&#39;&#39;django.db.backends.oracle&#39;</code><br>NAME：数据库名称<br>USER：数据库登录用户名<br>PASSWORD：数据库登录密码<br>HOST：数据库访问地址<br>PORT：数据库访问端口<br>sqlite3的配置选项：<br>只需要指定数据库引擎和数据库文件名称即可，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>:<span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>:<span class="string">'mydatabase.db'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见类型介绍"><a href="#常见类型介绍" class="headerlink" title="常见类型介绍"></a>常见类型介绍</h3><p>数据库字段和ORM模型对应，是用field对应，field是一个基础的类，有很多很多子类<br>基类类型的选项：<br>1、null、blank——是否为Null、空值（null是什么都没填，空值是空字符串）<br>2、db_column——数据库表中对应的字段名称<br>3、default——不填写该字段时的默认值<br>4、primary_key、unique——主键、唯一索引<br>5、verbose_name——供编程查看的字段名称（便于阅读）<br>6、hep_text——帮助文字<br>7、choices——可供选择的选项，如：性别的选项（男，女）<br>8、get_FOO_display()——展示choices对应的值<br>Django中的常见类型：<br>1、CharField、TextField——字符串、文本<br>2、DateField、DatetimeField——日期时间<br>3、FileField、ImageField——文件、图片<br>4、IntegerField、SmallIntegerField——整数（前面大一点、后面小一点）<br>5、FloatField、DecimalField——小数<br>CharField：<br>1、max_length——最大长度<br>2、相关类型：<br>    EmailField——邮件输入<br>    URLField——URL输入<br>    TextField——长文本输入<br>    FielPathField——文件路径的输入<br>    ImageField——图片输入<br>DateField：<br>1、auto_now——更新时间为记录更改时的时间<br>2、auto_now_add——记录创建的时间</p><h3 id="常见类型创建"><a href="#常见类型创建" class="headerlink" title="常见类型创建"></a>常见类型创建</h3><p>stttings配置数据库，同时要新建一个名为‘students的数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'students'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE students;</span><br></pre></td></tr></table></figure><p>利用Django新建模型，用模型去生成数据表。根据业务需求来执行app.models</p><p>使用Django模型新建的表<font color="red">自带id作为主键</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 创建学生表 """</span></span><br><span class="line">    name=models.CharField(<span class="string">'name'</span>,max_length=<span class="number">64</span>)</span><br><span class="line">    sex=models.CharField(<span class="string">'sex'</span>,max_length=<span class="number">1</span>,choices=(</span><br><span class="line">        (<span class="string">'1'</span>,<span class="string">'male'</span>),</span><br><span class="line">        (<span class="string">'2'</span>,<span class="string">'female'</span>),</span><br><span class="line">    ),default=<span class="string">'1'</span>)</span><br><span class="line">    age=models.PositiveIntegerField(<span class="string">'age'</span>,default=<span class="number">0</span>)</span><br><span class="line">    username=models.CharField(<span class="string">'username'</span>,max_length=<span class="number">64</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    password=models.CharField(<span class="string">'password'</span>,max_length=<span class="number">256</span>)</span><br><span class="line">    created_at=models.DateTimeField(<span class="string">'create_time'</span>,auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at=models.DateTimeField(<span class="string">'update_time'</span>,auto_now=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="模型同步migrate"><a href="#模型同步migrate" class="headerlink" title="模型同步migrate"></a>模型同步migrate</h3><p>将模型同步到数据库，INSTALLED_APPS中添加相应模块</p><p>终端或命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 检查模型是否存在问题</span><br><span class="line">python manage.py check</span><br><span class="line"># 使用makemigrations生成同步原语</span><br><span class="line">python manage.py makemigrations</span><br><span class="line"># 使用migrate执行同步到数据库</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>如果check时候报错未安装mysqlclient，需要先安装下<code>pip install mysqlclient</code></p><p>同步数据后，模块中会出现migrations包，students数据库中也出现了数据表</p><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200424180801837.png"  alt="image-20200424180801837"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名;</span><br><span class="line"># 查看表结构</span><br></pre></td></tr></table></figure><p>模型变更(添加、修改、删除)了一些字段，怎么快速的修改数据库对应的表结构？</p><p>如果直接操作数据库的话需要使用UPDATE、ALTER等语句修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD COLUMN 列名 VARCHAR(30);</span><br><span class="line">ALTER TABLE 表名 DROP COLUMN 列名;</span><br></pre></td></tr></table></figure><p>如果使用Django模型，直接在models中添加修改即可，然后使用migrate同步</p><h3 id="模型的元数据"><a href="#模型的元数据" class="headerlink" title="模型的元数据"></a>模型的元数据</h3><ul><li><p>使用Meta类来表示</p></li><li><p>对模型的补充说明</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    verbose_name = <span class="string">'用户基础信息'</span></span><br><span class="line">    verbose_name_plural = <span class="string">'用户基础信息'</span></span><br><span class="line">    db_table = <span class="string">'oauth_user'</span></span><br></pre></td></tr></table></figure></li></ul><p>元数据的描述：</p><p>db_table——模型映射的数据库表的名称<br>ordering——指定数据表的默认排序规则<br>verbose_name——供编程查看的字段名称（便于阅读）<br>abstract——抽象类（抽象类不会生成数据库表）<br>一些公共用的字段部分（如创建时间和更新时间），写成一个类，这个类不会被创建一个表，其他类需要<strong>继承</strong>自这个类，减少代码量</p><p>proxy——代理模型（对父模型的功能进行扩充）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtils</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'create_time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">'update_time'</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 按更新时间排序，-号表示降序</span></span><br><span class="line">        ordering = [<span class="string">'-upated_at'</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(CommonUtils)</span>:</span></span><br><span class="line">    <span class="string">""" 创建学生表 """</span></span><br><span class="line">    name = models.CharField(<span class="string">'name'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    sex = models.CharField(<span class="string">'sex'</span>, max_length=<span class="number">1</span>, choices=(</span><br><span class="line">        (<span class="string">'1'</span>, <span class="string">'male'</span>),</span><br><span class="line">        (<span class="string">'2'</span>, <span class="string">'female'</span>),</span><br><span class="line">    ), default=<span class="string">'1'</span>)</span><br><span class="line">    id_no = models.CharField(<span class="string">'student_id'</span>, max_length=<span class="number">10</span>)</span><br><span class="line">    email = models.EmailField(<span class="string">'email'</span>)</span><br><span class="line">    age = models.PositiveIntegerField(<span class="string">'age'</span>, default=<span class="number">0</span>)</span><br><span class="line">    username = models.CharField(<span class="string">'username'</span>, max_length=<span class="number">64</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    password = models.CharField(<span class="string">'password'</span>, max_length=<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 重命名表名</span></span><br><span class="line">        db_table = <span class="string">'students'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyStudent</span><span class="params">(Student)</span>:</span></span><br><span class="line">    <span class="string">""" 对Student表的功能进行扩充 """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取学生的姓</span></span><br><span class="line">        <span class="keyword">return</span> self.name[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="外键关联类型、复合类型"><a href="#外键关联类型、复合类型" class="headerlink" title="外键关联类型、复合类型"></a>外键关联类型、复合类型</h3><p>数据关系的几种类型：</p><p>OneToOneField——一对一关系</p><p>举例：用户信息进行分表</p><div class="mermaid">          graph RLA[用户详细信息] --> B[用户基本信息]          </div><p><font color="red">接着上面的代码补充学生信息表</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetail</span><span class="params">(CommonUtils)</span>:</span></span><br><span class="line">    <span class="string">""" 学生详细信息表 """</span></span><br><span class="line">    student = models.OneToOneField(Student, on_delete=models.CASCADE, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    motto = models.CharField(<span class="string">'motto'</span>, max_length=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 按更新时间排序，-号表示降序</span></span><br><span class="line">        ordering = [<span class="string">'-updated_at'</span>]</span><br></pre></td></tr></table></figure><p>ManyToManyField——表示多对多关系</p><p>举例：学生选课</p><p>补充选课表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(CommonUtils)</span>:</span></span><br><span class="line">    <span class="string">""" 课程目录表 """</span></span><br><span class="line">    name = models.CharField(<span class="string">'course_name'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    <span class="comment"># TO DO 可补充一对一的老师表</span></span><br><span class="line">    teacher = models.CharField(<span class="string">'teacher'</span>, max_length=<span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(CommonUtils)</span>:</span></span><br><span class="line">...</span><br><span class="line">    course = models.ManyToManyField(Course)</span><br></pre></td></tr></table></figure><p>ForeignKey——表示多对一关系</p><p>举例：用户的收货地址</p><p>补充学生地址表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stu_addr</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 学生地址表 """</span></span><br><span class="line">    student = models.ForeignKey(Student, on_delete=models.CASCADE)</span><br><span class="line">    phone = models.CharField(<span class="string">'phone'</span>, max_length=<span class="number">10</span>)</span><br><span class="line">    addr = models.CharField(<span class="string">'address'</span>, max_length=<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p><strong>ForeignKey.ondelete</strong>在Djnago2.2中是必填内容，当被关联的表删除后，设置关联表的操作</p><p>举个例子：</p><blockquote><p>当你在Django中删除了一个有着外键关联的数据时，比如一个作者和他名下的所有的书的信息，书的外键是作者（一个作者可有好多本书），当你把作者的信息从数据库中删除时，Django提供了一下几个参数来对作者的书的数据进行操作</p><p>外键的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">#models.py</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">   author = models.CharField(max_length=<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(models.Model)</span>:</span> </span><br><span class="line">   book = models.ForeignKey(Author,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p>CASCADE：删除作者信息一并删除作者名下的所有书的信息；<br>PROTECT：删除作者的信息时，采取保护机制，抛出错误：即不删除Books的内容；<br>SET_NULL：只有当null=True才将关联的内容置空；<br>SET_DEFAULT：设置为默认值；<br>SET( )：括号里可以是函数，设置为自己定义的东西；<br>DO_NOTHING：字面的意思，啥也不干，你删除你的干我毛线关系<br>————————————————<br>版权声明：本文为CSDN博主「Lex_lht」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/lht_521/article/details/80605146" target="_blank" rel="noopener">https://blog.csdn.net/lht_521/article/details/80605146</a></p></blockquote><p><strong>oauth.Course: (models.E015) ‘ordering’ refers to the nonexistent field ‘upated_at’.</strong></p><p>当Meta.ordering存在于通用表中时，且继承的表中存在外键关联，会出现以上报错，解决方法：应在关联表中添加Meta.ordering，不能在通用表中添加该方法。</p><p>比如上面的课程表中的ordering不能放在CommonUtils表中</p><h4 id="Mysql中查看外键关联关系"><a href="#Mysql中查看外键关联关系" class="headerlink" title="Mysql中查看外键关联关系"></a>Mysql中查看外键关联关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where REFERENCED_TABLE_NAME&#x3D;‘被引用表的表名’;</span><br><span class="line"># \G可以让表分行显示，更加美观可读</span><br><span class="line">select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where REFERENCED_TABLE_NAME&#x3D;‘被引用表的表名’\G</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200426231505455.png"  alt="image-20200426231505455"></p><p>图中显示了students表与其他表的外键关联情况，但是<font color="red">多对多、一对一等关系不会在mysql中体现，是通过Django约束来实现的。</font></p><h4 id="外键关联复合类型"><a href="#外键关联复合类型" class="headerlink" title="外键关联复合类型"></a>外键关联复合类型</h4><p>举例：用户收藏商品、收藏店铺都是多对多关系，如果用manytomany则需要两张表，其有大部分字段重复。需要将用户收藏店铺和商品都放在一张表中，整合到一起<br>ContentType——模型类型</p><p>使用djangoORM会自动在数据库中生成一个表django_content_type</p><p>给定appLabel和model，一一对应。根据id可以查到对应模块下的模型。</p><p>​    <img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200427163913047.png"  alt="image-20200427163913047"><br>models.ForeignKey（ContentType）——关联复合模型<br>    用于追踪项目中所有的model<br>    通过ForeignKey找到ContentType（通过多对一关联店铺或者商品）<br>GenericForeignKey——关联模型<br>​    GenericForeignKey关联店铺或商品ID,实现收藏商品的过程<br>GenericRelation——反向关联<br>​    找到用户收藏的商品</p><blockquote><p>ContentType是Django的内置的一个应用，在ContentType表中，记录了项目中所有的APP和model的对应关系，content_type字段关联到ContentType表，object_id是IntegerField字段，表示关联数据的id，在本案例中，即是商品id或者店铺id，GenericForeignKey将content_type和object_id关联，至此我们可以通过object_id查找到content_type，即通过object_id找到是商品模型还是店铺模型。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey, GenericRelation</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> oauth.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Production</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 商品表 """</span></span><br><span class="line">    product_name = models.CharField(<span class="string">'product_name'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    <span class="comment"># 反向关联找到该商品关联的被收藏的次数</span></span><br><span class="line">    collections = GenericRelation(<span class="string">'Collection'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 店铺名称 """</span></span><br><span class="line">    store_name = models.CharField(<span class="string">'store_name'</span>, max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 商品收藏 """</span></span><br><span class="line">    user = models.ForeignKey(Student, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># 通过django_content_type表关联商品和店铺</span></span><br><span class="line">    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># 关联的id，店铺或者商品的di</span></span><br><span class="line">    object_id = models.IntegerField(<span class="string">'关联的id'</span>)</span><br><span class="line">    <span class="comment"># 通过content_type和object_id关联的模型 即店铺/商品，然后找到关联的商品或店铺</span></span><br><span class="line">    content_object = GenericForeignKey(<span class="string">'content_type'</span>, <span class="string">'object_id'</span>)</span><br><span class="line"></span><br><span class="line">    created_time = models.DateTimeField(<span class="string">'collected_time'</span>, auto_now_add=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>注意：必须将该模块添加进settings.INSTALLED_APPS中，否则makemigrations时候报错No changes detected</p><h2 id="ORM的增删改查操作"><a href="#ORM的增删改查操作" class="headerlink" title="ORM的增删改查操作"></a>ORM的增删改查操作</h2><h3 id="分析定义模型"><a href="#分析定义模型" class="headerlink" title="分析定义模型"></a>分析定义模型</h3><p>以微博为例：</p><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/5db92b110001888819201080.jpg"  alt="img"></p><p>新建微博模块</p><p>新建用户、微博、评论、图片等模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboUser</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" weibo user """</span></span><br><span class="line">    username = models.CharField(<span class="string">'username'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    password = models.CharField(<span class="string">'password'</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    nickname = models.CharField(<span class="string">'nickname'</span>, max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'weibo_user'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weibo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" weibo content """</span></span><br><span class="line">    user = models.ForeignKey(WeiboUser, on_delete=models.CASCADE, verbose_name=<span class="string">'weibo user'</span>)</span><br><span class="line">    content = models.CharField(<span class="string">'weibo content'</span>, max_length=<span class="number">500</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'create time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    source = models.CharField(<span class="string">'weibo source'</span>, max_length=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'weibo_content'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboComment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" weibo comments """</span></span><br><span class="line">    user = models.ForeignKey(WeiboUser, on_delete=models.CASCADE, verbose_name=<span class="string">'weibo user'</span>)</span><br><span class="line">    weibo = models.ForeignKey(Weibo, on_delete=models.CASCADE, verbose_name=<span class="string">'related weibo'</span>)</span><br><span class="line">    content = models.CharField(<span class="string">'comment detail'</span>, max_length=<span class="number">500</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'create time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'weibo_comment'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboImg</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" weibo images """</span></span><br><span class="line">    <span class="comment"># file will be uploaded to MEDIA_ROOT/weibo</span></span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">'weibo'</span>, verbose_name=<span class="string">'weibo images'</span>)</span><br><span class="line">    weibo = models.ForeignKey(Weibo, models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'weibo_image'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboFriends</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" weibo friends """</span></span><br><span class="line">    <span class="comment"># 对于两个关联同一个外键的属性，需要指定related_name</span></span><br><span class="line">    user_from = models.ForeignKey(WeiboUser, <span class="string">'weibo follower'</span>,related_name=<span class="string">'follower'</span>)</span><br><span class="line">    user_to = models.ForeignKey(WeiboUser, <span class="string">'weibo follow'</span>,related_name=<span class="string">'follow'</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">'follow time'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'weibo_friends'</span></span><br></pre></td></tr></table></figure><p><strong>错误记录：(fields.E304) Reverse accessor for  “ “clashes with reverse accessor for “ “.</strong></p><p>对于两个关联同一个外键的属性，需要指定related_name</p><h3 id="使用ORM实现新增操作"><a href="#使用ORM实现新增操作" class="headerlink" title="使用ORM实现新增操作"></a>使用ORM实现新增操作</h3><p><font color="red">C</font>reate<font color="red">R</font>ead<font color="red">U</font>pdate<font color="red">D</font>elete</p><p>Pycharm控制台输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password, check_password</span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">password=make_password(<span class="string">'123456'</span>)</span><br><span class="line">user_obj=User(username=<span class="string">'zhangsan'</span>,password=password,nickname=<span class="string">'张三'</span>)</span><br><span class="line">user_obj.save()</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">user=User.objects.create(username=<span class="string">'lisi'</span>,password=password,nickname=<span class="string">'李四'</span>)</span><br></pre></td></tr></table></figure><p>Django自带密码加密与解密方法make_password，check_password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd=<span class="string">'123456'</span></span><br><span class="line"><span class="comment"># 参数三可指定加密算法</span></span><br><span class="line">make_password(pwd,salt=<span class="literal">None</span>,<span class="string">'pbkdf2_sha256'</span>)</span><br></pre></td></tr></table></figure><p>内置算法详见Django文档</p><blockquote><p>加Salt散列</p><p>我们知道，如果直接对密码进行散列，那么黑客（统称那些有能力窃取用户数据并企图得到用户密码的人）可以对一个已知密码进行散列，然后通过对比散列值得到某用户的密码。换句话说，虽然黑客不能取得某特定用户的密码，但他可以知道使用特定密码的用户有哪些。</p><p>加Salt可以一定程度上解决这一问题。所谓加Salt，就是加点“佐料”。其基本想法是这样的——当用户首次提供密码时（通常是注册时），由系统自动往这个密码里撒一些“佐料”，然后再散列。而当用户登录时，系统为用户提供的代码撒上同样的“佐料”，然后散列，再比较散列值，已确定密码是否正确。</p><p>这里的“佐料”被称作“Salt值”，这个值是由系统随机生成的，并且只有系统知道。这样，即便两个用户使用了同一个密码，由于系统为它们生成的salt值不同，他们的散列值也是不同的。即便黑客可以通过自己的密码和自己生成的散列值来找具有特定密码的用户，但这个几率太小了（密码和salt值都得和黑客使用的一样才行）。</p></blockquote><p>从命令行插入数据（powershell切换虚拟环境不成功）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在项目所在目录切换虚拟环境</span><br><span class="line">workon django2.2</span><br><span class="line"># 将项目中的配置加载到环境变量中</span><br><span class="line">python manage.py shell</span><br><span class="line">...（之后的操作和前面一致）</span><br></pre></td></tr></table></figure><h3 id="ORM查询操作"><a href="#ORM查询操作" class="headerlink" title="ORM查询操作"></a>ORM查询操作</h3><p>get()通过条件用来查询单条记录，不存在的记录会报错。all()用来查询表中的所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="comment"># pk=primary key,使用id也可以</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = User.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">print(user.username,user.nickname)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_list = User.objects.all()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">print(user.nickname)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h3 id="ORM修改操作"><a href="#ORM修改操作" class="headerlink" title="ORM修改操作"></a>ORM修改操作</h3><p>使用模型的save()修改单条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.get(id=<span class="number">1</span>)</span><br><span class="line">    user.nickname = <span class="string">'张三三'</span></span><br><span class="line">    user.save()</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><p>使用模型的update()批量修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.all().update(<span class="string">'123456'</span>)</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><h3 id="ORM删除操作"><a href="#ORM删除操作" class="headerlink" title="ORM删除操作"></a>ORM删除操作</h3><p>使用模型的delete()修改单条或全部数据 all().delete()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.get(id=<span class="number">1</span>)</span><br><span class="line">    user.delete()</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><p>这里的删除属于<font color="red">物理删除</font>，慎用。</p><p>逻辑删除：<br>将数据标记删除，删除后还占磁盘空间，删除后还可以恢复，删除后通过查询条件不展示给用户<br>物理删除：<br>将数据从数据库干掉，干掉了就不占磁盘空间了，干掉了就找不回来了</p><p>实现逻辑删除应该给用户添加一个状态属性，标记数据的存在和删除</p><h2 id="查询条件的使用"><a href="#查询条件的使用" class="headerlink" title="查询条件的使用"></a>查询条件的使用</h2><h3 id="结果集QuerySet常用方法"><a href="#结果集QuerySet常用方法" class="headerlink" title="结果集QuerySet常用方法"></a>结果集QuerySet常用方法</h3><ol><li>Queryset表示从数据库中取出来的对象的集合</li><li>它可以含有零个、一个或者多个过滤器（filter）（相当于数据库的where）</li><li>从模型的Manager那里取得QuerySet</li><li>QuerySet的筛选结果本身还是QuerySet</li><li>QuerySet是惰性的（不是每一次都去数据库执行sql，比如：把用户取出一个结果集，查找一次后不会去数据库中查找了，会在用户结果集中查找）</li></ol><p>QuerySet常用方法：</p><ol><li><p>get()——返回单条记录</p></li><li><p>create()——创建/新增一条数据库记录</p></li><li><p>get_or_create()——有则返回，没有则创建记录</p></li><li><p>bulk_create()——创建/新增多条数据库记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user1 = User(username=<span class="string">'user1'</span>, nickname=<span class="string">'用户1'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line">user2 = User(username=<span class="string">'user2'</span>, nickname=<span class="string">'用户2'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line">user3 = User(username=<span class="string">'user3'</span>, nickname=<span class="string">'用户3'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line">User.objects.bulk_create([user1,user2,user3])</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>first()/last()——返回第一条/最后一条记录</p></li><li><p>count()——返回记录行数之和</p></li><li><p>exists()——结果集是否存在（1条以上）</p></li><li><p>update()——修改记录</p></li><li><p>delete()——物理删除记录</p></li></ol><p>QuerySet链式查询方法：</p><ol><li><p>filter()——筛选出满足条件的多条记录</p></li><li><p>exclude()——排除满足条件的多条记录</p></li><li><p>order_by()——对查询的记录排序</p></li><li><p>all()——查询所有记录</p></li><li><p>none()——创建一个空的结果集</p></li><li><p>using()——使用指定的数据库查询(在settings中添加多数据库支持)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找xx数据库的全部记录，并将其通过id降序排列</span></span><br><span class="line">User.objects.all().order_by(<span class="string">'-id'</span>).using(<span class="string">'数据库名'</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h3><p>减少等待时间，提升用户体验<br>如何进行分页查询：</p><ol><li><p>对查询结果集QuerySet进行分片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回前n个对象（LIMIT 5）</span></span><br><span class="line">User.objects.all()[:<span class="number">5</span>]</span><br><span class="line"><span class="comment"># 返回第6到第10个对象（offset 5 limit 5）sql中offset偏移的意思</span></span><br><span class="line">User.objects.all()[<span class="number">5</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用django.core.paginator进行分页处理(分页处理器)</p><p>分页处理相关类：<br>Paginator——分页器<br>Page——某一页对象<br>异常：<br>InvalidPage——无效的页码<br>PageNotAnInteger——页码必须是整数<br>EmptyPage——空页（没有数据）</p></li></ol><h3 id="分页处理器"><a href="#分页处理器" class="headerlink" title="分页处理器"></a>分页处理器</h3><ol><li><p>取得分页器Paginator(objects,page_size)<br>objects——要进行分页的数据<br>page_size——每页的数据放多少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = Paginator(objects,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>分页器的属性：<br>count——数据记录的总条数<br>num_pages——总页数（总记录条数/每页大小）<br>page_range——页码范围</p></li><li><p>取得页面实例page=p.page(page_num)<br>page_num——当前页的页码，如第几页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Paginator(objects,<span class="number">2</span>)</span><br><span class="line">page = p.page(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>页面实例的属性：<br>number——当前页的页码<br>object_list——当前页的数据列表<br>paginator——分页器对象的引用<br>页面实例的常用方法：<br>has_next()——是否还有下一页<br>has_previous()——是否还有上一页<br>has_other_pages()——是否还有其他页（上/下一页）<br>next_page_number()——下一页的页码，如果没有，触发InvalidPage异常<br>previous_page_number()——上一页的页码，如果没有，触发InvalidPage异常</p></li></ol><h4 id="使用分页处理器"><a href="#使用分页处理器" class="headerlink" title="使用分页处理器"></a>使用分页处理器</h4><p>添加urls等略过，写views方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, render_to_response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paginator</span><span class="params">(request, page)</span>:</span></span><br><span class="line">    <span class="comment"># 获取微博用户数据</span></span><br><span class="line">    objects = WeiboUser.objects.all()</span><br><span class="line">    page_size=<span class="number">5</span></span><br><span class="line">    <span class="comment"># 生成分页器</span></span><br><span class="line">    p = Paginator(objects, per_page=page_size)</span><br><span class="line">    <span class="comment"># 获取当前页数据，若没有获取到则打印错误到控制台</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page_data = p.page(page)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'weibo_paginator.html'</span>, context=&#123;</span><br><span class="line">        <span class="string">'count'</span>: p.count,</span><br><span class="line">        <span class="string">'num_pages'</span>: p.num_pages,</span><br><span class="line">        <span class="string">'num_range'</span>: p.page_range,</span><br><span class="line">        <span class="string">'page_num'</span>: page_data.number,</span><br><span class="line">        <span class="string">'object_list'</span>: page_data.object_list,</span><br><span class="line">        <span class="string">'has_next'</span>: page_data.has_next(),</span><br><span class="line">        <span class="string">'has_previous'</span>: page_data.has_previous(),</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200504165151150.png"  alt="image-20200504165151150"></p><h3 id="查询条件的使用-1"><a href="#查询条件的使用-1" class="headerlink" title="查询条件的使用"></a>查询条件的使用</h3><p>查询语法：<br>字段名称__查询条件 = “查询内容” <font color="red">注意是双下划线</font></p><ol><li><p>相等/等于<br>exact, iexact——等于xx值（默认的形式）<br>如：id_exact=6 或者 id=6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeiboUser.objects.filter(username__iexact=<span class="string">'gan'</span>)</span><br></pre></td></tr></table></figure></li><li><p>是否包含xx字符串<br>contains, icontains——包含xx值<br>如：name__contains= ‘san’</p></li><li><p>以xx开始<br>startswith、istartswith</p></li><li><p>以xx结束<br>endswith、iendswith</p></li><li><p>在xx选项（列表）之类<br>in</p></li><li><p>gt大于某个值、gte大于等于某个值、lt小于某个值、lte小于或等于某个值、isnull是否为空值等等</p></li><li><p>date/datetime查询条件</p><p>date——日期<br>year——年<br>month——月份<br>day——天<br>hour/minute/second——时分秒<br>week/week_day——星期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询在2020年1月1日之后创建的数据</span></span><br><span class="line">user_list = WeiboUser.objects.filter(created_at__gt=<span class="string">'2020-1-1'</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="外键关联查询"><a href="#外键关联查询" class="headerlink" title="外键关联查询"></a>外键关联查询</h4><p>查询条件是外键的某个属性（字段）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询外键关联表字段包含'xx'的在本表数据</span></span><br><span class="line">model.objects.filter(model__column__icontains=<span class="string">'xx'</span>)</span><br></pre></td></tr></table></figure><p>手动添加微博及评论，然后举例外键关联查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> Weibo,WeiboUser,WeiboComment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动添加微博和评论</span></span><br><span class="line">user=User.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">weibo=Weibo.objects.create(user=user,content=<span class="string">'wdnmd'</span>,source=<span class="string">''</span>)</span><br><span class="line">WeiboComment.objects.create(weibo=weibo,user=user,content=<span class="string">'dnmd'</span>)</span><br></pre></td></tr></table></figure><p>外键关联：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line">user=WeiboUser.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 查询该用户的评论集合</span></span><br><span class="line">comments_list=UserComment.objects.filter(user=user)</span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="comment"># 根据外键的某个属性(字段)进行查询</span></span><br><span class="line">comment_list=Comment.objects.filter(user__username=<span class="string">'zhangsan'</span>)</span><br></pre></td></tr></table></figure><h2 id="Django中事务与统计的使用"><a href="#Django中事务与统计的使用" class="headerlink" title="Django中事务与统计的使用"></a>Django中事务与统计的使用</h2><h3 id="Django中事务的使用"><a href="#Django中事务的使用" class="headerlink" title="Django中事务的使用"></a>Django中事务的使用</h3><p>事务与回滚：<br>事务：多个数据库逻辑操作的集合<br>回滚：多个逻辑中某个操作出错，回到初始状态<br>事务的原子性要求事务要么全部完成，要么全部不完成，不可能停滞在某个中间状态</p><p>需要事务控制的情况：</p><ol><li>对多个ORM模型操作时（比如：用户信息表和用户详细信息表，必须一致）</li><li>对结果要求严格一致（要么成功，要么失败）</li></ol><p>在django中使用事务：</p><ol><li><p>自动提交</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"><span class="meta">@transaction.atomic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">viewfunc</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 事务内的代码</span></span><br><span class="line">do_stuff()</span><br></pre></td></tr></table></figure><p>atomic自动提交过程解析<br>a. 进入到最外层的atomic代码块时会打开一个事务<br>b. 进入到内层atomic代码块时会创建一个标记<br>c. 退出内部块时会释放或回滚至标记<br>d. 退出外部块时提交或回退事务</p></li><li><p>手动提交和回滚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 放弃自动提交</span></span><br><span class="line">    transaction.set_autocommit(<span class="literal">False</span>)</span><br><span class="line">a.save()</span><br><span class="line">b.save()</span><br><span class="line">transaction.commit() <span class="comment"># 提交事务</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">transaction.rollback() <span class="comment"># 回滚</span></span><br></pre></td></tr></table></figure></li></ol><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="meta">@transaction.atomic()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">""" 事务练习：用户发布微博时候，顺便发布一条评论，只能同时成功，否则发生回滚 """</span></span><br><span class="line">    <span class="comment"># 获得一个用户</span></span><br><span class="line">    user = WeiboUser.objects.get(pk=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 发布一条微博和评论</span></span><br><span class="line">    weibo = Weibo.objects.create(user=user, content=<span class="string">'事务练习'</span>, source=<span class="string">'other'</span>)</span><br><span class="line">    WeiboComment.objects.create(user=user, content=<span class="string">'事务练习'</span>, weibo=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ojbk'</span>)</span><br></pre></td></tr></table></figure><p>上例中会weibo不能为空值，会触发回滚机制，若事务机制不存在，则只会将weibo对象创建成功</p><p>通过with来完成自动的事务提交：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transaction_with</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">""" 事务练习：用户发布微博时候，顺便发布一条评论，只能同时成功，否则发生回滚 """</span></span><br><span class="line">    <span class="comment"># 获得一个用户</span></span><br><span class="line">    user = WeiboUser.objects.get(pk=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">        <span class="comment"># 发布一条微博和评论</span></span><br><span class="line">        weibo = Weibo.objects.create(user=user, content=<span class="string">'事务练习_with'</span>, source=<span class="string">'other'</span>)</span><br><span class="line">        WeiboComment.objects.create(user=user, content=<span class="string">'事务练习_with'</span>, weibo=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ojbk'</span>)</span><br></pre></td></tr></table></figure><h4 id="手动提交事务"><a href="#手动提交事务" class="headerlink" title="手动提交事务"></a>手动提交事务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transaction_hand</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">""" 事务练习：用户发布微博时候，顺便发布一条评论，只能同时成功，否则发生回滚 """</span></span><br><span class="line">    <span class="comment"># 获得一个用户</span></span><br><span class="line">    user = WeiboUser.objects.get(pk=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 放弃自动提交</span></span><br><span class="line">        transaction.set_autocommit(<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 发布一条微博和评论</span></span><br><span class="line">        weibo = Weibo.objects.create(user=user, content=<span class="string">'事务练习_hand'</span>, source=<span class="string">'other'</span>)</span><br><span class="line">        WeiboComment.objects.create(user=user, content=<span class="string">'事务练习_hand'</span>, weibo=<span class="literal">None</span>)</span><br><span class="line">        transaction.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        transaction.rollback()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ojbk'</span>)</span><br></pre></td></tr></table></figure><h3 id="聚合与统计"><a href="#聚合与统计" class="headerlink" title="聚合与统计"></a>聚合与统计</h3><p>内置聚合函数：</p><p>聚合函数位于django.db.models中，有Sum、Avg、Count、Max/Min等</p><p>聚合的两种使用方法：</p><ol><li><p>使用aggregate从<font color="red">整个</font>查询结果集生成统计数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line">Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line"><span class="comment"># 获得的对象为字典格式 &#123;'price__avg': 34.35&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用annotate为查询结果集中的<font color="red">每一项</font>生成统计数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">q = Book.objects.annotate(Count(<span class="string">'authors'</span>))</span><br><span class="line"><span class="comment"># 查询第一个作者的书籍数量</span></span><br><span class="line">q[<span class="number">0</span>].author__count</span><br></pre></td></tr></table></figure></li></ol><p>举例：<br>有学生成绩模型和填充的数据表如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu_info</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 学生表 """</span></span><br><span class="line">    student_name = models.CharField(<span class="string">'student_name'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    student_tel = models.CharField(<span class="string">'student_tel'</span>, max_length=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'stu_info'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Score</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 学生分数表 """</span></span><br><span class="line">    <span class="comment"># related_name方便在聚合统计时候使用外键关联对象</span></span><br><span class="line">    student = models.ForeignKey(Stu_info, models.CASCADE, related_name=<span class="string">'stu_sco'</span>)</span><br><span class="line">    subject = models.CharField(<span class="string">'subject_name'</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    score = models.PositiveIntegerField(<span class="string">'sbuject_score'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'stu_score'</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200507235731189.png"  alt="image-20200507235731189"></p><p>添加聚合统计的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Sum</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> score.models <span class="keyword">import</span> Stu_info,Score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aggre</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 计算所有成绩平均分</span></span><br><span class="line">    avg_score = Score.objects.all().aggregate(avg=Avg(<span class="string">'score'</span>))</span><br><span class="line">    print(<span class="string">'average_score:'</span>, avg_score[<span class="string">'avg'</span>])</span><br><span class="line">    <span class="comment"># 计算单个学生的平均成绩</span></span><br><span class="line">    <span class="comment"># 相当于 SELECT student,SUM(score) FROM stu_score GROUP BY student</span></span><br><span class="line">    avg_score = Score.objects.values_list(<span class="string">'student'</span>).annotate(Avg(<span class="string">'score'</span>))</span><br><span class="line">    print(avg_score)</span><br><span class="line">    <span class="comment"># 计算单个学生的平均成绩，但是可以显示两个表的内容 stu_sco是分数表中的related_name</span></span><br><span class="line">    <span class="comment"># 相当于 SELECT i.student_name,SUM(score) FROM stu_score s JOIN stu_info i ON i.id=s.student_id GROUP BY i.student_name</span></span><br><span class="line">    stu_list= Stu_info.objects.all().annotate(Sum(<span class="string">'stu_sco__score'</span>))</span><br><span class="line">    <span class="keyword">for</span> stu <span class="keyword">in</span> stu_list:</span><br><span class="line">        print(stu.student_name,stu.stu_sco__score__sum)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>控制台返回结果：</p><p>average_score: 84.6667<br>&lt;QuerySet [(1, 86.6667), (2, 89.3333), (3, 78.0)]&gt;<br>gan 260<br>lee 268<br>wong 234</p><h2 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h2><h3 id="自定义查询函数Q"><a href="#自定义查询函数Q" class="headerlink" title="自定义查询函数Q"></a>自定义查询函数Q</h3><p>多个可选的查询条件：</p><ul><li>使用Q()函数实现复杂的查询</li><li>Q()函数支持&amp;（且）和|（或），对应SQL中的AND和OR</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_q</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 通过url指定name参数，查询参数中的username或nickname为指定参数的用户</span></span><br><span class="line">    name = request.GET.get(<span class="string">'name'</span>)</span><br><span class="line">    query = Q(username=name) | Q(nickname=name)</span><br><span class="line">    user_list = WeiboUser.objects.filter(query)</span><br><span class="line">    print(user_list)</span><br><span class="line">    <span class="comment"># 通过url指定参数，查询多条件数据</span></span><br><span class="line">    name = request.GET.get(<span class="string">'name'</span>)</span><br><span class="line">    query = Q(username=name) &amp; Q(password=<span class="string">'123'</span>)</span><br><span class="line">    user_list = WeiboUser.objects.filter(query)</span><br><span class="line">    print(user_list)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>(url中的参数通过?name=xxx传递)</p><h3 id="自定义查询函数F"><a href="#自定义查询函数F" class="headerlink" title="自定义查询函数F"></a>自定义查询函数F</h3><p>F()函数的使用：<br>F()函数从数据库操作层面修改数据<br>F()函数可避免同时操作时竞态条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">""" 改变用户状态 使用自定义查询F()"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_count=<span class="number">100</span>, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.max_count = max_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        user = WeiboUser.objects.get(pk=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 最多循环max_count次数</span></span><br><span class="line">            <span class="keyword">if</span> count &gt;= self.max_count:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 原本是10 set status=11</span></span><br><span class="line">            <span class="comment"># user.status += 1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 相当于SET status=status+1</span></span><br><span class="line">            user.status = F(<span class="string">'status'</span>) + <span class="number">1</span></span><br><span class="line">            user.save()</span><br><span class="line">            print(self.getName(), count)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = ChangeThread(max_count=<span class="number">200</span>)</span><br><span class="line">    t2 = ChangeThread(max_count=<span class="number">400</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><h3 id="使用SQL查询"><a href="#使用SQL查询" class="headerlink" title="使用SQL查询"></a>使用SQL查询</h3><p>关联多张表的时候需要使用sql查询</p><h4 id="管理器raw-sql-查询"><a href="#管理器raw-sql-查询" class="headerlink" title="管理器raw(sql)查询"></a>管理器raw(sql)查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw(raw_query,params=<span class="literal">None</span>,translations=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 返回django.db.models.query.RawQuerySet实例</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raw_sql</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 通过url传入指定参数</span></span><br><span class="line">    username = request.GET.get(<span class="string">'name'</span>)</span><br><span class="line">    sql = (</span><br><span class="line">        <span class="string">'SELECT id FROM weibo_user '</span></span><br><span class="line">        <span class="string">'WHERE username=%s'</span></span><br><span class="line">    )</span><br><span class="line">    user_list = WeiboUser.objects.raw(sql, (username,))</span><br><span class="line">    <span class="comment"># user_list对象是一个RawQuerySet</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">        <span class="comment"># user也只是单个Query,可指定其字段</span></span><br><span class="line">        print(user.nickname)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><h4 id="获取数据库连接、游标、直接执行sql"><a href="#获取数据库连接、游标、直接执行sql" class="headerlink" title="获取数据库连接、游标、直接执行sql"></a>获取数据库连接、游标、直接执行sql</h4><p>类似于python操作数据库，举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取数据库的连接</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">    <span class="comment"># 根据连接获取游标</span></span><br><span class="line">    cursor = connection.cursor()</span><br><span class="line">    sql = (</span><br><span class="line">        <span class="string">'SELECT id,username,nickname FROM weibo_user '</span></span><br><span class="line">        <span class="string">'WHERE id=%s'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 执行sql</span></span><br><span class="line">    cursor.execute(sql, (<span class="number">3</span>,))</span><br><span class="line">    <span class="comment"># 查询结果</span></span><br><span class="line">    user_list = cursor.fetchall()</span><br><span class="line">    <span class="comment"># user_list对象是一个元组</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">        print(user)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义SQL分页"><a href="#自定义SQL分页" class="headerlink" title="自定义SQL分页"></a>自定义SQL分页</h3><ol><li>为SQL添加LIMIT及OFFSET分页处理</li><li>根据页面参数page生成偏移量</li><li>封装分页类</li><li>返回记录总数</li><li>返回总页数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqlpaginator</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">""" sql语句分页查询 """</span></span><br><span class="line">    sql = (</span><br><span class="line">        <span class="string">'SELECT id,nickname FROM weibo_user '</span></span><br><span class="line">        <span class="string">'WHERE id &gt; %s '</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        param = int(request.GET.get(<span class="string">'id&gt;'</span>))</span><br><span class="line">        page = int(request.GET.get(<span class="string">'page'</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 调用自定义异常</span></span><br><span class="line">        <span class="keyword">raise</span> InputError</span><br><span class="line">     <span class="comment"># 调用自定义SQL分页查询方法</span></span><br><span class="line">    sql_paginator = SQLPaginator(sql, param, page_size=<span class="number">10</span>)</span><br><span class="line">    rest = sql_paginator.page(page)</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> rest:</span><br><span class="line">        print(user)</span><br><span class="line">    print(<span class="string">'总记录数：'</span>, sql_paginator.count)</span><br><span class="line">    print(<span class="string">'总页数：'</span>, sql_paginator.page_count)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">""" 自定义异常处理 """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLPaginator</span>:</span></span><br><span class="line">    <span class="string">""" 封装sql分页器 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sql, param, page_size)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.sql = sql  <span class="comment"># 传入sql语句</span></span><br><span class="line">        self.param = param  <span class="comment"># 传入其他的参数</span></span><br><span class="line">        self.page_size = page_size  <span class="comment"># 传入单个页面大小</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">page_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 查询总页数 """</span></span><br><span class="line">        page_count = math.ceil(self.count / self.page_size)</span><br><span class="line">        <span class="keyword">return</span> page_count</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 查询总记录数"""</span></span><br><span class="line">        sql = (</span><br><span class="line">            <span class="string">'SELECT COUNT(1) FROM ( '</span></span><br><span class="line">            <span class="string">'&#123;&#125;) AS search_list'</span></span><br><span class="line">        ).format(self.sql)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor = connection.cursor()</span><br><span class="line">            cursor.execute(sql, (self.param,))</span><br><span class="line">            rest = cursor.fetchone()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            rest = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> rest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(self, now_page)</span>:</span></span><br><span class="line">        <span class="string">""" 自定义页码 """</span></span><br><span class="line">        <span class="comment"># if now_page &gt; self.page_count or now_page &lt; 1:</span></span><br><span class="line">        <span class="comment">#     raise InputError</span></span><br><span class="line">        <span class="comment"># 设置查询偏移量</span></span><br><span class="line">        offset = int((now_page - <span class="number">1</span>) * self.page_size)</span><br><span class="line">        sql = self.sql + <span class="string">' LIMIT %s OFFSET %s'</span></span><br><span class="line">        <span class="comment"># 调用游标，执行sql,返回结果</span></span><br><span class="line">        cursor = connection.cursor()</span><br><span class="line">        cursor.execute(sql, (self.param, self.page_size, offset))</span><br><span class="line">        rest = cursor.fetchall()</span><br><span class="line">        <span class="keyword">return</span> rest</span><br></pre></td></tr></table></figure><h3 id="代理和自定义管理器"><a href="#代理和自定义管理器" class="headerlink" title="代理和自定义管理器"></a>代理和自定义管理器</h3><p>管理器（Mnanager）：</p><ul><li>Manager是Django的模型进行数据库查询操作的接口</li><li>每个模型都拥有至少一个Manager</li><li>Django为每个模型添加一个名为objects的默认Manager</li></ul><p>在models中添加一个自定义管理器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="string">""" 自定义管理器 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_user</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 返回最近创建的三个用户 """</span></span><br><span class="line">        <span class="comment"># 直接调用现有方法，也可以使用cusor-sql方法查询</span></span><br><span class="line">        <span class="keyword">return</span> self.all().order_by(<span class="string">'-pk'</span>)[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>然后在其他模型class中添加调用该自定义管理器，如下在WeiboUser创建实例<code>users=UserManager()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python console中操作</span></span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"><span class="comment"># 然后就可以调用该自定义管理器中的方法</span></span><br><span class="line">WeiboUser.users.top_user()</span><br></pre></td></tr></table></figure><p>代理的使用在<strong>模型的元数据</strong>单元中，不再赘述</p><h3 id="调试及查询优化"><a href="#调试及查询优化" class="headerlink" title="调试及查询优化"></a>调试及查询优化</h3><p>首先要知道查询中最耗时的部分，就需要知道执行了那些SQL语句</p><ol><li><p>QuerySet.query属性查看执行的SQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line">user_list = User.objects.all()</span><br><span class="line"><span class="comment"># .query返回的是一个查询结果集对象,需要转化为字符串</span></span><br><span class="line">str(user_list.query)</span><br><span class="line"><span class="comment"># SELECT XXX FROM XXX</span></span><br></pre></td></tr></table></figure></li><li><p>使用django-debug-toolbar</p><p>安装：<code>pip install django-debug-toolbar</code></p><p>参照<a href="https://django-debug-toolbar.readthedocs.io/en/latest" target="_blank" rel="noopener">官方文档</a>进行相关配置：</p><p>项目settings中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'debug_toolbar'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># 这一项需要放在尽可能靠前的位置</span></span><br><span class="line">    <span class="string">'debug_toolbar.middleware.DebugToolbarMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">INTERNAL_IPS = [</span><br><span class="line">    <span class="string">'127.0.0.1'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>项目urls中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="keyword">import</span> debug_toolbar</span><br><span class="line">    urlpatterns += [</span><br><span class="line">        path(<span class="string">'__debug__/'</span>, include(debug_toolbar.urls)),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>当页面加载后可以在浏览器的侧边看到关于页面的很多信息，包括SQL查询：</p><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200512153337721.png"  alt="image-20200512153337721"></p></li></ol><h5 id="外键关联优化查询"><a href="#外键关联优化查询" class="headerlink" title="外键关联优化查询"></a>外键关联优化查询</h5><p><code>QuerySet.select_related()</code><br>将外键关联的对象查询合并到主查询，一次性查询结果，减少SQL执行的数量</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for comment in comment_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            评论内容：&#123;&#123; comment.content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            用户：&#123;&#123; comment.user &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            关联微博：&#123;&#123; comment.weibo &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;# user和weibo是外键关联项 #&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_opitimize</span><span class="params">(request)</span>:</span></span><br><span class="line">    comment_list = WeiboComment.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'sql_optimize.html'</span>, &#123;</span><br><span class="line">        <span class="string">'comment_list'</span>: comment_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>当加载页面时，会先一次性查询完WeiboComment表中的信息，再依次查询每条记录关联的表（如下图），这样每一条记录都需要查询一次关联表，造成了资源浪费，低效。</p><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200512153911106.png"  alt="image-20200512153911106"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_opitimize</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 将外键关联的对象查询合并到主查询，一次性查询结果，减少SQL执行的数量</span></span><br><span class="line">    comment_list = WeiboComment.objects.all().select_related()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'sql_optimize.html'</span>, &#123;</span><br><span class="line">        <span class="string">'comment_list'</span>: comment_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>优化后：</p><p><img src="/" class="lazyload" data-src="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200512154043413.png"  alt="image-20200512154043413"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（基础篇）</title>
      <link href="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h2><p><strong>操作系统演进</strong>：</p><ol><li><p>无操作系统</p><p>人工操作，用户独占，CPU等待人工操作，资源利用率很低</p></li><li><p>批处理系统</p><p>无需等待人工操作，批量输入任务，资源利用率提升，多道程序设计</p></li><li><p>分时系统</p><p>人-机交互，多用户共享，及时调试程序，资源利用率提升</p></li></ol><p><strong>多道程序设计设计</strong>：</p><p>早起批处理系统只能一次处理一个任务，多道程序设计使得批处理系统可以一次处理多个任务。对多道程序的管理是操作系统的重要功能。</p><ul><li>多道程序设计是指在计算机内存中同时存放多个程序</li><li>多道程序在计算机的管理程序之下相互穿插运行</li></ul><p><strong>操作系统对多道程序的管理</strong>分为五大功能：进程管理、存储管理、作业管理、文件管理、设备管理</p><h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h2><h3 id="操作系统概念"><a href="#操作系统概念" class="headerlink" title="操作系统概念"></a>操作系统概念</h3><p>操作系统是管理计算机硬件和软件资源的计算机程序；管理配置内存、决定资源供需顺序、控制输入输出设备等；操作系统提供让用户和系统交互的操作界面。该定义不局限于计算机</p><h3 id="操作系统的基本功能"><a href="#操作系统的基本功能" class="headerlink" title="操作系统的基本功能"></a>操作系统的基本功能</h3><ul><li><p>处理器资源、存储器资源、IO设备资源、文件资源。操作系统统一管理这这些计算机资源。</p></li><li><p>用户无需面向硬件接口编程</p><p>IO设备管理软件，提供读写接口</p><p>文件管理软件，提供操作文件接口</p><p>实现了对计算机资源的抽象</p></li><li><p>提供了用户于计算机之间的接口</p><p>图像窗口形式、命令形式、系统调用形式</p></li></ul><h3 id="操作系统的相关概念"><a href="#操作系统的相关概念" class="headerlink" title="操作系统的相关概念"></a>操作系统的相关概念</h3><ul><li><p>并发性</p><p><font color="red">并行是指两个或多个事件可以在同一个时刻发生，并发是指两个或多个事件可以在同一个时刻间隔发生。</font></p><p>对于单处理器来说，有两个程序交替运行，两个程序并发关系；对双处理器来说，两个程序可同一时刻运行，是并行关系，但是对于单个核心，依然是并发关系。</p></li><li><p>共享性</p><p>表现为操作系统中的资源可供多个并发的程序共同使用，这种共同使用的形式称之为资源共享。</p><p>资源共享根据属性可以分为两种方式：互斥共享形式、同时访问形式。<strong>互斥共享</strong>：当资源被程序或进程A占用时，只有A使用完之后，其他才可以使用（如打印机）；<strong>同时访问</strong>：某种资源在一段时间内并发地被多个程序访问</p></li><li><p>虚拟性</p><p>虚拟性表现为把一个物理实体转变为若干个逻辑实体，虚拟的技术主要有<strong>时分复用技术</strong>和<strong>空分复用技术</strong>。</p><p><strong>时分复用技术</strong>：资源在时间上进行复用，不同程序并发使用，多道程序分时使用计算机的硬件资源，提高资源的利用率。其中<strong>虚拟处理器技术</strong>是借用多道程序设计为每个程序建立进程，多个程序分时复用处理器；<strong>虚拟设备技术</strong>是物理设备虚拟为多个逻辑设备，每个程序占用一个逻辑设备，多个程序并发访问</p><p><strong>空分复用技术</strong>：用来实现虚拟磁盘、虚拟内存等，提高资源的利用率，提升编程效率。</p></li><li><p>异步性</p><p>表现为多道程序环境下，允许多个进程并发执行；进程在使用资源时可能需要等待或放弃；进程的执行并不是一气呵成的，而是以走走停停的形式推进</p></li></ul><h2 id="进程管理之进程实体"><a href="#进程管理之进程实体" class="headerlink" title="进程管理之进程实体"></a>进程管理之进程实体</h2><h3 id="为什么需要进程"><a href="#为什么需要进程" class="headerlink" title="为什么需要进程"></a>为什么需要进程</h3><ul><li>进程是系统进行资源分配和调度的基本单位</li><li>进程作为程序独立运行的载体保障程序正常执行</li><li>进程的存在使得操作系统的资源利用率大幅提升</li></ul><h3 id="进程的实体"><a href="#进程的实体" class="headerlink" title="进程的实体"></a>进程的实体</h3><ul><li><p>标识符，唯一标记一个进程，用于区别其他进程</p></li><li><p>状态，标记进程的进程状态，如：运行态</p></li><li><p>程序计数器，程序即将被执行的下一条指令的地址</p></li><li><p>内存指针，程序代码、进程数据相关指针</p></li><li><p>上下文数据，<font color="red">进程执行时处理器存储的数据</font></p></li><li><p>IO状态信息，被进程IO操作所占用的文件列表</p></li><li><p>记账信息，使用处理器时间、时钟数总和等</p></li></ul><p><strong>进程控制块（PCB）</strong>：</p><p>用于描述和控制进程运行的通用数据结构，记录进程当前状态和控制进程运行的全部信息。是使得进程能够独立运行的基本单位。</p><p>PCB是操作系统进行调度进程会被读取的信息，PCB是常驻内存的，存放在系统专门开辟的PCB区域内。</p><p><strong>进程（Process）与线程（Thread）</strong>：</p><p>一个进程可以有多个线程。线程是操作系统进行运行调度的最小单位，包含在进程之中，是进程中实际运行工作的单位。一个进程可以并发多个线程，每个线程执行不同的任务。</p><table><thead><tr><th></th><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>资源</td><td>资源分配的基本单位</td><td>不拥有资源</td></tr><tr><td>调度</td><td>独立调度的基本单位</td><td>独立调度的最小单位</td></tr><tr><td>系统开销</td><td>进程系统开销大</td><td>线程系统开销小</td></tr><tr><td>通信</td><td>进程IPC</td><td>读写同一进程数据通信</td></tr></tbody></table><h2 id="进程管理之五状态模型"><a href="#进程管理之五状态模型" class="headerlink" title="进程管理之五状态模型"></a>进程管理之五状态模型</h2><p>就绪    阻塞    执行    创建    终止</p><h3 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h3><ul><li>当进程被分配到除CPU以外所有必要的资源后，只要再获得CPU的使用权，就可以立即运行</li><li>其他资源都准备好，只差CPU资源的状态为就绪状态</li><li>在一个系统中多个处于就绪状态的进程通常排成一个队列</li></ul><h3 id="执行状态"><a href="#执行状态" class="headerlink" title="执行状态"></a>执行状态</h3><ul><li>进程获得CPU，其程序正在执行称为执行状态</li><li>在单处理机中，在某个时刻只能有一个进程是处于执行状态</li></ul><h3 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h3><ul><li>进程因某种原因如：其他设备未就绪而无法继续执行，从而放弃CPU的状态称为阻塞状态</li></ul><h3 id="创建状态"><a href="#创建状态" class="headerlink" title="创建状态"></a>创建状态</h3><ul><li>创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态</li></ul><p>操作系统提供fork函数接口创建进程</p><h4 id="终止状态"><a href="#终止状态" class="headerlink" title="终止状态"></a>终止状态</h4><ul><li>进程结束由系统清理或者归还PCB的状态称为终止状态</li></ul><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200422171720968.png"  alt="image-20200422171720968"></p><h2 id="进程管理之进程同步"><a href="#进程管理之进程同步" class="headerlink" title="进程管理之进程同步"></a>进程管理之进程同步</h2><p>需要同步的原因：实现进程彼此之间的同步，对竞争资源在多进程间进行使用次序的协调，使得并发执行的多个进程之间可以有效使用资源和相互合作。</p><h3 id="进程间同步的原则"><a href="#进程间同步的原则" class="headerlink" title="进程间同步的原则"></a>进程间同步的原则</h3><p><strong>临界资源</strong>：临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。当有进程在使用临界资源时，其他进程必须依据操作系统额同步机制等待占用进程释放该共享资源才可重新竞争使用资源。</p><p>为了对临界资源使用进行约束，有四个使用原则：</p><ul><li>空闲让进：资源无占用，允许使用</li><li>忙则等待：资源有占用，请求（其他）进程等待</li><li>有限等待：保证（其他进程）有限等待时间能够使用资源</li><li>让权等待：等待时，进程需要让出CPU（即进程由运行状态进入阻塞状态）</li></ul><p>同步方法：</p><p>消息队列    共享存储    信号量</p><p>（详见下文）</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>进程内多线程也需要同步</p><p>线程同步的方法：</p><p>互斥量    读写锁    自旋锁    条件变量</p><p>（详见下文）</p><h2 id="Linux的进程管理"><a href="#Linux的进程管理" class="headerlink" title="Linux的进程管理"></a>Linux的进程管理</h2><h3 id="Linux进程相关概念"><a href="#Linux进程相关概念" class="headerlink" title="Linux进程相关概念"></a>Linux进程相关概念</h3><h4 id="进程的类型："><a href="#进程的类型：" class="headerlink" title="进程的类型："></a>进程的类型：</h4><p>前台进程    后台进程    守护进程</p><p><strong>前台进程</strong>：具有终端，可以和用户交互的进程</p><p><strong>后台进程</strong>：与前台进程相对，没有占用终端的就是后台进程；后台程序基本上不和用户交互，优先级比前台进程低，不影响前台进程。<font color="red">将需要执行的命令以“&amp;”符号结束</font></p><p><strong>守护进程</strong>：守护(daemon)进程是特殊的后台进程；很多守护进程在系统引导的时候启动，一直运行知道系统关闭。crond    hhtpd    sshd    mysqld等</p><p>进程名字以‘d’结尾的一般都是守护进程</p><h4 id="进程的标记"><a href="#进程的标记" class="headerlink" title="进程的标记"></a>进程的标记</h4><ul><li><p>进程ID是进程的唯一标识，每个进程拥有不同的ID</p></li><li><p>进程ID表现为一个非负整数，最大值由操作系统限定</p></li></ul><p>top命令查看系统进程</p><p>ID为0的进程为idle进程，是系统创建的第一个进程</p><p>ID为1的进程是init进程，是0号进程的子进程，完成系统初始化</p><p>Init进程是所有用户进程的祖先进程</p><p><strong>进程的状态标记</strong></p><table><thead><tr><th>状态符号</th><th>状态说明</th></tr></thead><tbody><tr><td>R</td><td>(TASK_RUNNING)，进程正处于运行状态</td></tr><tr><td>S</td><td>(TASK_INTERRUPTIBLE)，进程正处于睡眠状态</td></tr><tr><td>D</td><td>(TASK_UNINTERRUPTIBLE)，进程正处于IO等待的睡眠状态</td></tr><tr><td>T</td><td>(TASK_STOPPED)，进程正处于暂停状态</td></tr><tr><td>Z</td><td>(TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态，或僵尸进程</td></tr></tbody></table><p><code>man ps</code>命令显示进程相关的命令说明</p><p>后台运行一个python程序，打印该进程状态 S状态，处于睡眠状态</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200422205300367.png"  alt="image-20200422205300367"></p><h4 id="操作Linux进程的相关命令"><a href="#操作Linux进程的相关命令" class="headerlink" title="操作Linux进程的相关命令"></a>操作Linux进程的相关命令</h4><p><strong>ps命令</strong>：</p><p><code>ps</code>列出当前的进程</p><p><code>ps aux</code> 打印进程详细信息</p><p><code>ps -u root</code> 查看root用户进程</p><p><code>ps -aux | grep &#39;pyhton3&#39;</code>查看python3进程</p><p><code>ps -ef --forest</code>可打印进程父子状态</p><p><code>ps -aux --sort=pcpu</code>按cpu频率查看进程 pmem 按内存排序</p><ul><li>ps命令产用于显示当前进程的状态</li><li>ps命令常配合aux参数或ef参数和grep命令检索特定进程</li></ul><p><strong>top命令</strong>：<br>查看进程的状态</p><p><strong>kill命令</strong>：</p><p>kill后台进程 -9表示无条件停止</p><h2 id="作业管理之进程调度"><a href="#作业管理之进程调度" class="headerlink" title="作业管理之进程调度"></a>作业管理之进程调度</h2><p><strong>进程调度</strong>是指计算机通过决策哪个就绪进程可以获得CPU使用权</p><ul><li>保留旧进程的运行信息，请出旧进程（收拾包袱）</li><li>选择新进程，准备运行环境并分配CPU（新进驻）</li></ul><p>进程调度的三种机制：</p><ol><li><p>就绪队列的排队机制</p><p>将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程</p></li><li><p>选择运行进程的委派机制</p><p>调度程序以一定的策略选择就绪进程，将CPU资源分配给它</p></li><li><p>新老进程的上下文切换机制</p><p>保存当前进程的上下文信息，装入被委派执行进程的运行上下文</p></li></ol><p>如果进程调度时候，老进程还没执行完，有两种调度方式：</p><ol><li><p>非抢占式的调度抢</p><p>处理器一旦分配给某个进程，就让该进程一直使用下去，调度程序不以任何原因抢占正在被使用的处理器，直到进程完成工作或因为IO阻塞才会让出处理器</p></li><li><p>抢占式的调度</p><p>允许调度程序以一定的策略暂停当前运行的进程，保存好进程的上下文信息，分配处理器给新进程</p></li></ol><table><thead><tr><th></th><th>抢占式调度</th><th>非抢占式调度</th></tr></thead><tbody><tr><td>系统开销</td><td>频繁切换、开销大</td><td>切换次数少、开销小</td></tr><tr><td>公平性</td><td>相对公平</td><td>不公平</td></tr><tr><td>应用</td><td>通用系统</td><td>专用系统</td></tr></tbody></table><h3 id="进程调度的算法"><a href="#进程调度的算法" class="headerlink" title="进程调度的算法"></a>进程调度的算法</h3><h4 id="先来先服务调度算法"><a href="#先来先服务调度算法" class="headerlink" title="先来先服务调度算法"></a>先来先服务调度算法</h4><p>优先取出队列前面的进程进行调度</p><h4 id="短进程优先调度算法"><a href="#短进程优先调度算法" class="headerlink" title="短进程优先调度算法"></a>短进程优先调度算法</h4><p>调度程序优先选择就绪队列中估计运行时间最短的进程，短进程优先调度算法不利于长作业进程的执行</p><h4 id="高优先权先调度算法"><a href="#高优先权先调度算法" class="headerlink" title="高优先权先调度算法"></a>高优先权先调度算法</h4><p>进程附带优先权，调度程序优先选择权重高的进程，高优先权优先调度算法使得紧迫的任务可以优先处理</p><h4 id="时间片轮转调度算法"><a href="#时间片轮转调度算法" class="headerlink" title="时间片轮转调度算法"></a>时间片轮转调度算法</h4><p>按先来先服务的原则排列就绪进程，每次从队列头部去除待执行进程，分配一个时间片执行，是相对公平的调度算法，但不能保证及时响应用户</p><h2 id="作业管理之死锁"><a href="#作业管理之死锁" class="headerlink" title="作业管理之死锁"></a>作业管理之死锁</h2><p><strong>死锁</strong>：死锁是指两个或两个以上的线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><h3 id="死锁的产生"><a href="#死锁的产生" class="headerlink" title="死锁的产生"></a>死锁的产生</h3><ol><li><p>竞争资源：共享资源数量不满足各个进程的需求，各个进程之间发生资源进程导致死锁</p></li><li><p>调用顺序不当</p></li></ol><p>死锁产生的四个必要条件：</p><ol><li><p>互斥条件</p><p>进程对资源的使用时排他性的使用，某资源只能由一个进程使用，其他进程需要使用只能等待</p></li><li><p>请求保持条件</p><p>进程至少保持一个资源，又提出新的资源请求，新资源被占用，被阻塞的进程不释放自己保持的资源</p></li><li><p>不可剥夺条件</p><p>进程获得的资源在未完成使用前不能被剥夺，获得的资源只能由进程自身释放</p></li><li><p>环路等待条件</p><p>发生死锁时，必然存在进程-资源环形链</p></li></ol><h3 id="死锁的处理"><a href="#死锁的处理" class="headerlink" title="死锁的处理"></a>死锁的处理</h3><h4 id="预防死锁的方法"><a href="#预防死锁的方法" class="headerlink" title="预防死锁的方法"></a>预防死锁的方法</h4><p>破坏四个必要条件之一</p><ol><li><p>摒弃请求保持条件</p><p>系统规定进程运行之前，一次性申请所有需要的资源，进程在运行期间不会提出资源请求，从而摒弃请求保持条件</p></li><li><p>摒弃不可剥夺条件</p><p>当一个进程请求新的资源得不到满足时，必须释放占有的资源，进程运行时占有的资源可以被释放，意味着可以被剥夺</p></li><li><p>摒弃环路等待条件</p><p>可用资源线性排序，申请必须按照需要递增申请，线性申请不再形成环路，从而摒弃了环路等待条件</p></li></ol><h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><p>策略原理：客户申请的贷款是有限的，每次申请需要申请最大资金量，银行家在能够满足贷款时，都应该给用户贷款，客户在使用贷款后，能够及时归还贷款</p><h2 id="存储管理之内存分配与回收"><a href="#存储管理之内存分配与回收" class="headerlink" title="存储管理之内存分配与回收"></a>存储管理之内存分配与回收</h2><p>早期计算机编程并不需要过多的存储管理，随着计算机和程序越来越复杂，存储管理成为必要。</p><p>存储管理的作用：</p><ul><li>确保计算机有足够的内存 处理数据</li><li>确保程序可以从可用内存中获取一部分内存使用</li><li>确保程序可以归还使用后的内存以供其他程序使用</li></ul><h3 id="内存分配的过程"><a href="#内存分配的过程" class="headerlink" title="内存分配的过程"></a>内存分配的过程</h3><p>单一连续分配是最简单的内存分配方式，只能在单用户、单进程的操作系统中使用</p><p>固定分区分配：支持多道程序的最简单存储分配方式，内存空间被划分为若干固定大小的区域，每个分区只提供给一个程序使用，互不干扰。</p><p><strong>动态分区分配</strong>：根据进程实际需要，动态分配内存空间，涉及相关数据结构、分配算法</p><p>​    动态分区空闲表数据结构：将内存分为若干个分区，用一张表来表示分区使用情况：</p><p>​    <img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429141319922.png"  alt="image-20200429141319922"></p><p>​    0表示没有被占用，1表示被占用</p><p>​    动态分区空闲链数据结构：通过链把未被使用的分区以节点的形式连接起来，同时相邻的分区节点可以进行合并，节点需记录可存储容量</p><p>​    <img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429141649750.png"  alt="image-20200429141649750"></p><p><strong>动态分区分配算法</strong>：</p><p>首次适应算法（FF算法）：分配内存时从开始顺序查找适合内存区，若没有合适的空闲区，则该次分配失败。每次从头部开始，使得头部空间不断被划分。</p><p>最佳适应算法（BF算法）：最佳适应算法要求空闲链表按照容量大小排序，遍历空闲区链表找到最佳合适空闲区。</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429142352694.png"  alt="image-20200429142352694" title="先将上表按容量大小排列成下表"></p><p>快速适应算法（QF算法）：快速适应算法要求有多个空闲区链表，每个空闲区链表存储一种容量的空闲区。</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429142832340.png"  alt="image-20200429142832340"></p><h3 id="内存回收的过程"><a href="#内存回收的过程" class="headerlink" title="内存回收的过程"></a>内存回收的过程</h3><table><thead><tr><th></th><th>情况1</th><th>情况2</th><th>情况3</th><th>情况4</th></tr></thead><tbody><tr><td></td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td></td><td>空闲区1</td><td><font color="red">回收区</font></td><td>空闲区1</td><td>…</td></tr><tr><td></td><td><font color="red">回收区</font></td><td>空闲区1</td><td><font color="red">回收区</font></td><td>回收区</td></tr><tr><td></td><td>…</td><td>…</td><td>空闲区2</td><td>…</td></tr><tr><td></td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>解决方案</td><td>不需要新建空闲链表节点，只需要把空闲区1的容量增大为空闲区即可</td><td>将回收区与空闲区合并，新的空闲区使用回收区的地址</td><td>将空闲区1、空闲区2和回收区合并，新的空闲区使用空闲区1的地址</td><td>为回收区创建新的空闲节点，插入到相应的空闲区链表中去</td></tr></tbody></table><h2 id="存储管理之段页式存储管理"><a href="#存储管理之段页式存储管理" class="headerlink" title="存储管理之段页式存储管理"></a>存储管理之段页式存储管理</h2><h3 id="页式存储管理"><a href="#页式存储管理" class="headerlink" title="页式存储管理"></a>页式存储管理</h3><p>页面和字块都是大小一样的一块内存，<strong>字块</strong>是相对物理设备的定义，<strong>页面</strong>则是相对逻辑空间的定义</p><p>概念：将进程逻辑空间等分成若干大小的页面，相应的把物理内存空间分成与页面大小的物理块，以页面为单位把进程空间装进物理内存中分散的物理块。</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429144545117.png"  alt="image-20200429144545117"></p><p>页面大小应该适用，过大难以分配，过小内存碎片过多，页面大小通常是512B~8K</p><p><strong>页表</strong>：记录进程逻辑空间与物理空间的映射</p><p><em>在现代计算机系统中，可以支持非常大的逻辑地址空间（2<sup>32</sup>~2<sup>64</sup>），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程中的页表项可达1M（2<sup>20</sup>）个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间。</em>    32位系统进程的寻址空间是4G，4G/4KB=2<sup>20</sup></p><ul><li>将进程逻辑空间等分成若干大小的页面</li><li>相应的把物理内存空间分成与页面大小的物理块</li><li>以页面为单位把进程空间装进物理内存中分散的物理块</li></ul><p>但是如果有一段连续的逻辑分布在多个页面中，将大大降低执行效率</p><h3 id="段式存储管理"><a href="#段式存储管理" class="headerlink" title="段式存储管理"></a>段式存储管理</h3><p>将进程逻辑空间划分成若干段（非等分），段的长度由连续逻辑的长度决定，主函数MAIN、子程序段X、子函数Y等。</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429171843469.png"  alt="image-20200429171843469"></p><p>段表相比页表多了段长，用来记录逻辑长度。</p><p><strong>对比</strong>：</p><p>段氏存储和页式存储都离散地管理了进程的逻辑空间</p><ul><li>页是物理单位，段是逻辑单位</li><li>分页是为了合理利用空间，分段是满足用户要求</li><li>页大小由硬件固定，段长度可动态变化</li><li>页表信息是一维的，段表信息是二维的</li></ul><h3 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h3><p>分页可以有效提高内存利用率（虽然说存在页内碎片），分段可以更好满足用户需求，两者结合，形成段页式存储管理</p><p>先将逻辑空间按段式管理分成若干段，再把段内空间按页式管理等分成若干页</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429193849286.png"  alt="image-20200429193849286"></p><h2 id="存储管理之虚拟内存"><a href="#存储管理之虚拟内存" class="headerlink" title="存储管理之虚拟内存"></a>存储管理之虚拟内存</h2><ul><li>有些进程实际需要的内存很大，超过物理内存的容量</li><li>多道程序设计，使得每个进程可用物理内存更加稀缺</li><li>不可能无限增加物理内存，物理内存总有不够用的时候</li></ul><p><strong>虚拟内存</strong>是操作系统内存管理的关键技术，使得多道程序运行和大程序运行成为现实，把程序使用内存划分，将不封暂时不使用的内存放置在辅存</p><p><strong>程序的局部性原理</strong>指的是CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</p><p>程序运行时，无需全部装入内存，装载部分即可，如果访问页不在内存，则发出缺页中断，发起页面置换、从用户层面看，程序拥有很大的空间，即是虚拟内存。</p><p>虚拟内存实际是对物理内存的补充，速度接近于内存，成本接近于辅存</p><p><strong>虚拟内存的置换算法</strong>：先进先出算法（FIFO）、最不经常使用算法（LFU）、最近最少使用算法（LRU）。主存和辅存的替换</p><p>在计算机组成原理中有提到这些算法，应用于高速缓存与主存的替换。在这里将着重对比两种替换而不是算法。</p><ul><li>替换策略发生在Cache-主存层次，主存-辅存层次</li><li>Cache-主存层次的替换策略主要是为了解决<font color="red">速度问题</font></li><li>主存-辅存层次主要是为了解决<font color="red">容量问题</font></li></ul><h2 id="Linux的存储管理"><a href="#Linux的存储管理" class="headerlink" title="Linux的存储管理"></a>Linux的存储管理</h2><h3 id="Buddy内存管理算法"><a href="#Buddy内存管理算法" class="headerlink" title="Buddy内存管理算法"></a>Buddy内存管理算法</h3><p>Buddy算法是经典的内存管理算法，算法基于计算机处理二进制的优势具有极高的效率，算法主要是为了解决<font color="red">内存外碎片</font>的问题，实际上是将内存外碎片问题转移为了内存内碎片的问题</p><p><strong>页内碎片</strong>是已经被分配出去（能明确指出属于哪个进程）的内存空间大于请求所需的内存空间，不能被利用的内存空间就是内部碎片。</p><p><strong>页外碎片</strong>是指还没有分配出去（不属于任何进程），但是由于太小而无法分配给申请内幕才能空间的新进程的内存空间块。</p><p>该算法努力让内存分配与相邻内幕才能合并能快速进行，内存分配原则：</p><ul><li>向上取整为2的幂大小 70k→128k    129k→256k</li></ul><p><strong>伙伴系统</strong>：‘伙伴’指的是内存的‘伙伴’，一片连续内存的‘伙伴’是相邻的另一片大小一样的连续内存。</p><p>假设存储空间有1M大小，来分配100k的内存：</p><p>1.100k向上取2的幂；2. 查询是否有128k的空闲内存块；3.没有！查询是否有256k空闲内存块；4.没有！查询是否有512k空闲内存块；5.没有！查询是否有1M的空闲内存块；6. 有，摘下1M空闲内存块，分配出去；7. 拆下512k放在512k的空闲链表，其余的分配出去；8. 拆下256k放在256k的空闲链表，其余的分配出去；9. 拆下128k的空闲链表，其余的分配出去；10. 分配完毕</p><p>回收刚才分配的内存：</p><p>1.判断刚才分配的内存伙伴在空闲链表上吗？2. 在！移除伙伴，合并为256k空闲内存，判断3. 在！移除伙伴，合并为512k空闲内存，判断；4. 在！移除伙伴，合并为1M空闲内存；5. 插入1M空闲链表，回收完成</p><h3 id="Linux交换空间"><a href="#Linux交换空间" class="headerlink" title="Linux交换空间"></a>Linux交换空间</h3><p>交换空间（Swap）是磁盘的一个分区，Linux物理内存满时，会把一些内存交换至Swap空间，Swap空间是初始化系统时配置的。top命令可以查询到</p><ul><li>冷启动内存依赖</li><li>系统睡眠依赖</li><li>大进程空间依赖</li></ul><p>交换空间与虚拟内存对比：</p><ul><li>Swap空间存在于磁盘，虚拟内存也存在于磁盘</li><li>Swap空间与主存发生置换 ，虚拟内存也是与主存发生置换</li><li>Swap空间是操作系统概念，虚拟内存是进程概念</li><li>Swap空间解决系统物理内存不足的问题，虚拟内存解决物理内存不足的问题</li></ul><h2 id="操作系统的文件管理"><a href="#操作系统的文件管理" class="headerlink" title="操作系统的文件管理"></a>操作系统的文件管理</h2><h3 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h3><div class="mermaid">          graph TD;A[逻辑结构的文件类型]-->B[有结构文件]A-->C[无结构文件]C-->D[二进制文件]C-->E[链接库]B-->F[文本文件]B-->G[文档]B-->H[媒体文件]          </div><p>有结构文件：有结构内容由定长记录和可变长记录组成，定长记录存储格式、文件描述等结构化数据项，可变长记录存储文件具体内容</p><p>比如png图片文件，分为png文件标记、png数据块和文件结束标记。定长记录存储文件格式、文件描述等结构化数据项，如png文件标记和文件结束标记。可变长记录存储文件具体内容。</p><p>无结构文件：也称为流式文件，文件内容长度以字节为单位，比如exe，dll，so文件等</p><p>顺序文件：顺序文件是指按顺序存放在存储介质中的文件，磁带的存储特征使得磁带文件只能存储顺序文件，顺序文件是所有逻辑文件当中存储效率最高的。</p><p>索引文件：可变长文件不适合使用顺序文件格式存储，索引文件是为了解决可变长文件存储而发明的一种文件格式，索引文件需要配合索引表完成存储的操作。</p><h3 id="辅存的存储空间分配"><a href="#辅存的存储空间分配" class="headerlink" title="辅存的存储空间分配"></a>辅存的存储空间分配</h3><h4 id="辅存的分配方式"><a href="#辅存的分配方式" class="headerlink" title="辅存的分配方式"></a>辅存的分配方式</h4><div class="mermaid">          graph TD;A[辅存的分配方式]-->B[连续分配]A-->C[链接分配]A-->D[索引分配]C-->E[隐式连接]C-->F[显式链接]          </div><p>连续分配：顺序读取文件内容非常容易，速度很快，对存储要求高，要求满足容量的连续存储空间</p><p>链接分配：链接分配可以将分拣存储在离散的盘块中，需要额外的存储空间存储文件的盘块链接顺序。其中<strong>隐式链接分配</strong>的下一个链接指向存储在当前盘块内，适合顺序访问，随机访问效率很低，可靠性差，任何一个链接出问题都影响整个文件；<strong>显式链接分配</strong>通过FAT（File Allocation Table）表存储相关链接。不支持高校的直接存储（FAT记录项多），检索FAT表时占用较大的存储空间（需要将整个FAT表加载到内存）</p><p>索引分配：把文件的所有盘块集中存储（索引），读取某个文件时，将文件索引读取进内存即可。每个文件拥有一个索引块，记录所有盘块信息，索引分配方式支持直接访问盘块，文件较大时，索引分配方式具有明显优势</p><h4 id="辅存的存储空间管理"><a href="#辅存的存储空间管理" class="headerlink" title="辅存的存储空间管理"></a>辅存的存储空间管理</h4><div class="mermaid">          graph TD;A[存储空间管理]-->B[空闲表]A-->C[空闲链表]A-->D[位示图]          </div><p>空闲表：空闲盘区分分配与内存分配类似，首次适应算法、循环适应算法等，回收过程也与内存回收类似</p><p>空闲链表：空闲链表法把所有空闲盘区组成一个空闲链表，每个链表节点存储空闲盘块和空闲的数目</p><p>位示图：每个盘块有0/1比特位表示是否被占用。位示图维护成本低，位示图可以非常容易找到空闲盘块，位示图使用0/1比特位，占用空间很小。该方法在辅存中最为常用</p><h4 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h4><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511150223807.png"  alt="image-20200511150223807"></p><p>任何文件或目录都只有唯一路径 例如 A/D/M</p><h2 id="Linux文件基本操作"><a href="#Linux文件基本操作" class="headerlink" title="Linux文件基本操作"></a>Linux文件基本操作</h2><h3 id="Linux目录"><a href="#Linux目录" class="headerlink" title="Linux目录"></a>Linux目录</h3><p>Linux一切皆是文件</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511151640541.png"  alt="image-20200511151640541"></p><p>绝对路径    相对路径</p><h3 id="Linux文件常用操作"><a href="#Linux文件常用操作" class="headerlink" title="Linux文件常用操作"></a>Linux文件常用操作</h3><p>创建文件 <code>touch 文件名</code>    创建并修改文件 <code>vim 文件名</code>    查看文件<code>vim</code> 也可以使用<code>cat 文件名</code>    删除文件 <code>rm 文件名</code>    创建文件夹 <code>mkdir名字</code>     删除文件夹 <code>rm -r 名字</code></p><h3 id="Linux文件类型"><a href="#Linux文件类型" class="headerlink" title="Linux文件类型"></a>Linux文件类型</h3><p>Linux有这些文件类型：套接字(s)、普通文件(-)、目录文件(d)、符号链接(l)、设备文件(b、c)、FIFO(p)</p><p>通过<code>ls -al</code>可以查看文件属性，首字母表示文件类型。其中b和c分别表示块设备、字符设备</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511153038687.png"  alt="image-20200511153038687"></p><h2 id="Linux的文件系统"><a href="#Linux的文件系统" class="headerlink" title="Linux的文件系统"></a>Linux的文件系统</h2><h3 id="文件系统概览"><a href="#文件系统概览" class="headerlink" title="文件系统概览"></a>文件系统概览</h3><p>FAT、NTFS、EXT2/3/4</p><p>FAT(File Allocation Table)，分为FAT16、FAT32等，微软Dos/Windows使用的文件系统，使用一张表来保存盘块的信息</p><p>NTFS(New Technology File System)，WindowsNT环境的文件系统，NTFS对FAT进行了改进，取代了旧的文件系统。Windows、Linux、MacOS均可识别。</p><p>EXT(Extended file system)，扩展文件系统。Linux的文件系统。数字表示第几代。Window不能识别</p><h3 id="Ext文件系统"><a href="#Ext文件系统" class="headerlink" title="Ext文件系统"></a>Ext文件系统</h3><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511154155934.png"  alt="image-20200511154155934"></p><p>Boot Sector：启动扇区，安装开机管理程序。Block Group：块组，存储数据的实际位置。</p><p>每一个Block Group有这些信息：</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511154341005.png"  alt="image-20200511154341005"></p><p>Inode Table：存放文件Inode的地方，每一个文件（目录）都有一个Inode，是每一个文件（目录）的<font color="red">索引节点</font>，也是该文件唯一标记。Inode存放了文件类型、文件权限、文件物理地址、文件长度、文件连接计数、文件存取时间、文件状态、索引节点编号、访问计数、链接指针等等。</p><p><font color="yellow">需要注意的是文件名不是存放在Inode节点上的，而是存放在目录的Inode节点，目的在于列出目录文件的时候无需加载文件的Inode</font></p><p>Inode bitmap，Inode的位示图，记录已分配的Inode和未分配的Inode</p><p>Data block，存放文件内容的地方，每个block都有唯一的编号，文件的block记录在文件的Inode上</p><p>Block bitmap，功能与Inode bitmap类似，记录Data block的使用情况</p><p>Superblock，记录整个文件系统相关信息的地方，Block和Inode的使用情况，时间信息、控制信息等</p><p><code>df -T</code> 查看系统挂载的磁盘信息 <code>dumpe2fs 设备名</code> 查看其中的文件系统信息</p><p><code>stat 文件名</code>查看具体的文件信息</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511165943368.png"  alt="image-20200511165943368"></p><h2 id="操作系统的设备管理"><a href="#操作系统的设备管理" class="headerlink" title="操作系统的设备管理"></a>操作系统的设备管理</h2><h3 id="广义的IO设备"><a href="#广义的IO设备" class="headerlink" title="广义的IO设备"></a>广义的IO设备</h3><p>对CPU而言，凡是对CPU进行数据输入的都是输入设备，对CPU而言，凡是CPU进行数据输出的都是输出设备。</p><p>可以分别按使用特性分类、按设备的共享属性分类、按信息交换的单位分类、按传输速率分类</p><p>使用特性分类：存储设备（内存、硬盘等）、交互IO设备（键盘、显示器等）</p><p>信息交换单位分配：块设备（磁盘、SD卡）、字符设备（打印机、shell终端）</p><p>共享属性分类：共享设备、独占设备、虚拟设备</p><p>传输速率分类：低速设备、中速、高速</p><h3 id="IO设备缓冲区"><a href="#IO设备缓冲区" class="headerlink" title="IO设备缓冲区"></a>IO设备缓冲区</h3><p>CPU与IO设备的速率不匹配问题，所以有个各个存储器的层次结构。而缓冲区也是为了解决这个问题，它可以减少CPU处理IO请求的频率，提高CPU与IO设备之间的并行性</p><p>可以把需要多次交互的请求放入一个缓冲区，将多个请求写入缓冲区，减少交互次数。</p><p>缓冲池：专用缓冲区只适用于特定的IO进程，当这样的IO进程比较多时，对内存的消耗也很大，操作系统划出可供多个进程使用的公共缓冲区，称之为缓冲池。</p><h3 id="SPOOLing技术"><a href="#SPOOLing技术" class="headerlink" title="SPOOLing技术"></a>SPOOLing技术</h3><p>是一种慢速字符设备如何与计算机主机交换信息的一种技术，利用高速共享设备将低俗的独享设备模拟为高速的共享设备。逻辑上，系统为每一个用户都分配了一台独立的高速独享设备，所以这是一种虚拟设备技术。</p><p><img src="/" class="lazyload" data-src="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511172733715.png"  alt="image-20200511172733715"></p><p><em>假设有三个进程要使用打印机，同步调用的效率会比较低。从磁盘中划出一部分空间叫输出井，各个进程将调用请求放入输出井，由SPOOLing技术来完成输出井到打印机的交互</em></p><p><font color="red">SPOOLing技术把同步调用的低速设备改为异步调用</font></p><p>总结起来该技术就是:</p><ul><li>在输入、输出之间增加了派对转存储环节（输入井、输出井）</li><li>SPOOLing负责输入（出）井与低速设备之间的调用</li><li>逻辑上，进程直接与高速设备交互，减少了进程等待时间</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架入门</title>
      <link href="/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
      <url>/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>本文章是<a href="www.imooc.com">慕课网</a>相关课程的学习笔记</p><h2 id="初始Django框架"><a href="#初始Django框架" class="headerlink" title="初始Django框架"></a>初始Django框架</h2><h3 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h3><h4 id="Django发展历程"><a href="#Django发展历程" class="headerlink" title="Django发展历程"></a>Django发展历程</h4><blockquote><p>2003年 劳伦斯出版集团需要开发几个以新闻内容为主的网站，即是CMS（内容管理系统）软件，要快速响应，快速迭代开发。world online的三位工程师使用Python开发了Django。2005年开源，2008年发布1.0版本。</p></blockquote><h4 id="Django介绍"><a href="#Django介绍" class="headerlink" title="Django介绍"></a>Django介绍</h4><p><strong>开源免费</strong>的Python高级<strong>web框架</strong>，<strong>内置电池</strong>，用于<strong>快速开发</strong>可靠、安全、可扩展的web应用。</p><p>Django文档 <a href="https://docs.djangoproject.com" target="_blank" rel="noopener">https://docs.djangoproject.com</a></p><p>MVT模型：Django开发的三个部分，模型（Model）视图（View）模板（Template）</p><p>Django不断迭代更新，LTS（long-term support releases）支持</p><h4 id="网站开发流程"><a href="#网站开发流程" class="headerlink" title="网站开发流程"></a>网站开发流程</h4><ol><li>选择合适的版本</li><li>安装及配置</li><li>生成项目结构</li><li>内容开发</li><li>迭代、上线、维护</li></ol><h3 id="环境参数及配置安装"><a href="#环境参数及配置安装" class="headerlink" title="环境参数及配置安装"></a>环境参数及配置安装</h3><p>Windows 10    MySQL8.0    Django2.2.12    pyhton3.7</p><p>安装Django2.2.12版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;2.2.12</span><br></pre></td></tr></table></figure><p>创建Django虚拟环境</p><p>如果没有安装virtualenv 需要先安装一下。下载速度太慢的话可以切换国内镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple virtualenv</span><br><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple virtualenvwrapper-win</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv django2.2&#x2F;&#x2F;创建虚拟环境</span><br><span class="line">pip install django&#x3D;&#x3D;2.2.12&#x2F;&#x2F;安装特定版本</span><br><span class="line">workon 虚拟环境名&#x2F;&#x2F;切换虚拟环境</span><br><span class="line">deactivate&#x2F;&#x2F;退出虚拟环境</span><br></pre></td></tr></table></figure><h4 id="生成目录结构"><a href="#生成目录结构" class="headerlink" title="生成目录结构"></a>生成目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject my_project&#x2F;&#x2F;命令行生成模板</span><br><span class="line">cd my_project&#x2F;&#x2F;进入项目目录</span><br><span class="line">python manage.py runserver&#x2F;&#x2F;启动服务器</span><br><span class="line">&#x2F;&#x2F;ctrl+c结束服务</span><br></pre></td></tr></table></figure><h4 id="Django项目结构"><a href="#Django项目结构" class="headerlink" title="Django项目结构"></a>Django项目结构</h4><p><img src="/" class="lazyload" data-src="/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200409211058293.png"  alt="image-20200409211058293"></p><h3 id="网页开发流程"><a href="#网页开发流程" class="headerlink" title="网页开发流程"></a>网页开发流程</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ol><li><p>Django-amdin.py 命令行创建项目</p></li><li><p>PyCharm创建项目</p></li></ol><h4 id="创建accounts模块"><a href="#创建accounts模块" class="headerlink" title="创建accounts模块"></a>创建accounts模块</h4><p>在项目目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp accounts</span><br></pre></td></tr></table></figure><h3 id="URL介绍"><a href="#URL介绍" class="headerlink" title="URL介绍"></a>URL介绍</h3><p>URL是统一资源定位符，对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL</p><p>基本URL包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名。如下：</p><p><font color="red">scheme（协议）://host[:port#]/path/../[;url-params][?query-string][#anchor]</font></p><p><strong>URL协议(Scheme)</strong>：<br>http—超文本传输协议资源<br>https—用安全套接字层传送的超文本传输协议（在http基础上进行一层安全的包装）<br>ftp—文件传输协议</p><h4 id="常见http请求方式"><a href="#常见http请求方式" class="headerlink" title="常见http请求方式"></a>常见http请求方式</h4><p><strong>GET请求</strong>：</p><ol><li>可以用浏览器直接访问</li><li>请求可以携带参数，但是有长度限制</li><li>请求参数直接放在URL后面</li></ol><p><strong>POST请求</strong>：</p><ol><li>不能使用浏览器直接访问</li><li>对请求参数的长度没有限制</li><li>可以用来上传文件等需求</li></ol><p><strong>不同HTTP响应状态码有什么含义</strong>：<br>2xx 请求成功<br>3xx 重定向<br>4xx 请求错误<br>5xx 服务器错误</p><p><a href="https://baike.baidu.com/item/HTTP状态码" target="_blank" rel="noopener">百度百科HTTP状态码</a></p><h3 id="URL配置及参数传递"><a href="#URL配置及参数传递" class="headerlink" title="URL配置及参数传递"></a>URL配置及参数传递</h3><p>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include,path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/'</span>,views.month_archive),</span><br><span class="line">    path(<span class="string">'index/'</span>, views.index, name=<span class="string">'main-view'</span>),</span><br><span class="line">path(<span class="string">'bio/&lt;username&gt;/'</span>, views.bio, name=<span class="string">'bio'</span>),</span><br><span class="line">path(<span class="string">'articles/&lt;slug:title&gt;/'</span>, views.article, name=<span class="string">'article-detail'</span>),</span><br><span class="line">path(<span class="string">'articles/&lt;slug:title&gt;/&lt;int:section&gt;/'</span>, views.section, name=<span class="string">'article-section →'</span>),</span><br><span class="line">path(<span class="string">'weblog/'</span>, include(<span class="string">'blog.urls'</span>)),</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>比如对于匹配的 article/2020/4 的请求，会调用函数views.month_archive(request, year=2020, month=3)。</p><p>另一种url配置方法，用正则表达式法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">re_path(<span class="string">r'^index/$'</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">re_path(<span class="string">r'^bio/(?P&lt;username&gt;\w+)/$'</span>, views.bio, name=<span class="string">'bio'</span>),</span><br><span class="line">re_path(<span class="string">r'^weblog/'</span>, include(<span class="string">'blog.urls'</span>)),</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这两种方法都可以使用include包含其他模块的URL，即<strong>URL的嵌套</strong></p><p>上面的re_path中可以嵌套blog模块中的urls。urls中代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns=[</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/'</span>, views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>假设该blog模块中view视图有如下index方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request, year)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'wdnmd,&#123;&#125;'</span>.format(year))</span><br></pre></td></tr></table></figure><p>访问<a href="https://127.0.0.1:8000/articles/2020/" target="_blank" rel="noopener">https://127.0.0.1:8000/articles/2020/</a></p><p>页面会显示<code>wdnmd，2020</code></p><h4 id="设计优雅的URL"><a href="#设计优雅的URL" class="headerlink" title="设计优雅的URL"></a>设计优雅的URL</h4><ul><li><p>使用简介的URL</p></li><li><p>给URL指定命名空间namespace</p><p>举例：两种不同的角色访问不同的URL，但是结果相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include,re_path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r'^author-polls/'</span>, include((<span class="string">'polls.urls'</span>,<span class="string">'polls'</span>), namespace=<span class="string">'author-polls'</span>)),</span><br><span class="line">    re_path(<span class="string">r'^publisher-polls/'</span>,include((<span class="string">'polls.urls'</span>,<span class="string">'polls'</span>), namespace=<span class="string">'publisher-polls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>给URL指定名称name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'article/2020/$'</span>,views.article,name=<span class="string">'article_detail'</span>)</span><br></pre></td></tr></table></figure><p>作用：可以通过reverse逆向解析URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reverse(<span class="string">'article_detail'</span>)</span><br><span class="line">reverse(<span class="string">'author-polls:index'</span>)</span><br><span class="line">reverse(<span class="string">'current_app=self.request.resolve_match.namespace'</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><p>Django_proj/views</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span><span class="params">(request,year)</span>:</span></span><br><span class="line">    url=reverse(<span class="string">'archive'</span>,args=(year,))</span><br><span class="line">    <span class="comment"># 通过namespace逆向解析(namespace:模块中views的方法，【参数】)</span></span><br><span class="line">    url2=reverse(<span class="string">'oauth_detail:index'</span>,kwargs=&#123;<span class="string">'year'</span>:year&#125;)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'wdnmd, &#123;&#125; url:&#123;&#125;url2:&#123;&#125;'</span>.format(year,url,url2))</span><br></pre></td></tr></table></figure><p>Django_proj/urls</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">from</span> Django_proj <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">r'^index/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.archive, name=<span class="string">'archive'</span>),</span><br><span class="line">    <span class="comment"># include(模块.urls,模块名称)，与Django1.1不同</span></span><br><span class="line">    re_path(<span class="string">r'^auth/'</span>, include((<span class="string">'oauth.urls'</span>, <span class="string">'oauth'</span>), namespace=<span class="string">'oauth_detail'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>oauth/urls</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> oauth <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns=[</span><br><span class="line">    re_path(<span class="string">r'^article/(?P&lt;year&gt;[0-9]&#123;4&#125;)/'</span>, views.index, name=<span class="string">'index'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>oauth/views</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request, year)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'wdnmd,&#123;&#125;'</span>.format(year))</span><br></pre></td></tr></table></figure><p>此时输入</p><p><a href="http://127.0.0.1:8000/index/2021/" target="_blank" rel="noopener">http://127.0.0.1:8000/index/2021/</a></p><p>返回如下结果</p><p><img src="/" class="lazyload" data-src="/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200412130127080.png"  alt="image-20200412130127080"></p><h4 id="积分商城项目搭建"><a href="#积分商城项目搭建" class="headerlink" title="积分商城项目搭建"></a>积分商城项目搭建</h4><p>积分商城项目结构</p><p><img src="/" class="lazyload" data-src="/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200412172605560.png"  alt="image-20200412172605560"></p><p>搭建积分商城项目，先建立模块system accounts mall mine，再新建utils，static包。</p><p>将前端文件等放入static和templates中，新建首页path：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'index/'</span>, views.index, name=<span class="string">'index'</span>)</span><br></pre></td></tr></table></figure><p>views:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure><p>setting中添加静态文件路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static"</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="视图定义及实战添加视图内容"><a href="#视图定义及实战添加视图内容" class="headerlink" title="视图定义及实战添加视图内容"></a>视图定义及实战添加视图内容</h2><h3 id="视图的定义"><a href="#视图的定义" class="headerlink" title="视图的定义"></a>视图的定义</h3><ul><li><p>视图是一个视图函数，简称视图，是一个简单的Python函数</p></li><li><p>作用是，接受一个请求后，返回一个响应。</p></li><li><p>响应可以是HTML内容、文本、图像，甚至是404、重定向等</p></li></ul><p>def view_name()定义视图</p><h4 id="视图中获取URL参数"><a href="#视图中获取URL参数" class="headerlink" title="视图中获取URL参数"></a>视图中获取URL参数</h4><ol><li><p>通过正则表达式获取URL参数</p><p>urls:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r'^article/(?P&lt;year&gt;[0-9]&#123;4&#125;)/'</span>, views.index, name=<span class="string">'index'</span>)</span><br></pre></td></tr></table></figure><p>views:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时在地址栏中输入的xxx/article/2020/,就得到了参数year=202</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request, year)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'wdnmd,&#123;&#125;'</span>.format(year))</span><br></pre></td></tr></table></figure></li><li><p>获取URL中的请求(GET/POST等)参数</p><p>GET请求参数直接在后面URL后面添加?参数名=xx，携带多个参数&amp;连接，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&#x2F;aricle&#x2F;?year&#x3D;2020&amp;month&#x3D;3&amp;day&#x3D;6</span><br></pre></td></tr></table></figure><p>在views中可以得到参数，然后可进行下一步处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    year=request.GET.get(<span class="string">'year'</span>,<span class="literal">None</span>)</span><br><span class="line">    print(<span class="string">'year:&#123;&#125;'</span>.format(year))</span><br></pre></td></tr></table></figure></li></ol><h3 id="视图快捷方式"><a href="#视图快捷方式" class="headerlink" title="视图快捷方式"></a>视图快捷方式</h3><h4 id="视图加载HTML"><a href="#视图加载HTML" class="headerlink" title="视图加载HTML"></a>视图加载HTML</h4><p>首先在模板中准备一个html文件。加载html的方法有很多，最原始的是with open打开文件，然后通过HttpResposne返回html。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""不建议使用该方法，仅作为展示"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    file = os.path.join(settings.BASE_DIR, <span class="string">'templates/index.html'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(file) <span class="keyword">as</span> f:</span><br><span class="line">        html = f.read()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>通过loader.get_template获取html，然后通过HttpResposne返回html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    html = loader.get_template(<span class="string">'index.html'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html.template.source)</span><br></pre></td></tr></table></figure><p>直接使用render()或者render_to_response()，<font color="red">最为常用</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure><p>当需要替换html中内容时候，可以在html中需要替换的部分加上双大括号<code></code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">now=datetime.now()</span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,&#123;<span class="string">'now'</span>:now&#125;)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>，&#123;<span class="string">'now'</span>:now&#125;)</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>重定向就是url重新定向到其他的html</p><p>使用HttpResponseRedirect(‘url’)重定向，可以配合reverse获得url再使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重定向到url为/index/的页面</span></span><br><span class="line"><span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/index/'</span>)</span><br></pre></td></tr></table></figure><p><strong>redirect(name)</strong>，可以通过url的名称进行跳转，最为简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数为url的name</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'index'</span>)</span><br></pre></td></tr></table></figure><h3 id="内置视图及重写"><a href="#内置视图及重写" class="headerlink" title="内置视图及重写"></a>内置视图及重写</h3><h4 id="内置的错误处理视图及重写"><a href="#内置的错误处理视图及重写" class="headerlink" title="内置的错误处理视图及重写"></a>内置的错误处理视图及重写</h4><ul><li>400 Bad Request    403 Forbidden    404 Not Found    500 Server Error</li></ul><p>将500代码提示重写：</p><p>比如要让 <code>http://127.0.0.1:8000/index/</code> 提示500错误，1. 先在views方法中改写index路径对应的方法，添加<code>raise ValueError</code>，2. 退出debug模式（进入生产模式），在settings中修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"><span class="comment"># ALLOWED_HOSTS是为了限定请求中的host值，以防止黑客构造包来发送请求。只有在列表中的host才能访问。*表示不设置访问限制</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><p>此时访问 <a href="http://127.0.0.1:8000/index/" target="_blank" rel="noopener">http://127.0.0.1:8000/index/</a> 就会出现 500 server error提示</p><ol start="3"><li><p>改写500错误提示，在urls添加<code>project_name.views.views_name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler500 = <span class="string">'untitled.views.page_500'</span></span><br></pre></td></tr></table></figure></li><li><p>views中定义page_500方法（改写500错误提示的方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_500</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'服务器无响应'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>500错误提示就被改写为’服务器无响应’提示</p><p>同理 <code>handlerxxx=&#39;&#39;</code>可以改写错误处理视图，403异常对应 <code>raise PermissionDenied</code></p><h4 id="static-server处理静态文件"><a href="#static-server处理静态文件" class="headerlink" title="static.server处理静态文件"></a>static.server处理静态文件</h4><p>常用场景：本地测试时，用户上传头像等各种文件存放。用于本地测试的时候临时存放</p><p>在项目settings.py中添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定用户上传文件的地址</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,<span class="string">'media'</span>)</span><br></pre></td></tr></table></figure><p>项目urls中添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    re_path(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>,serve,&#123;</span><br><span class="line">        <span class="string">'document_root'</span>:settings.MEDIA_ROOT,</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时可通过<code>http://xxx/media/xxx</code>访问项目中的临时静态文件，说明设置成功</p><h3 id="请求响应对象（request对象）"><a href="#请求响应对象（request对象）" class="headerlink" title="请求响应对象（request对象）"></a>请求响应对象（request对象）</h3><h4 id="请求对象HttpRequest"><a href="#请求对象HttpRequest" class="headerlink" title="请求对象HttpRequest"></a>请求对象HttpRequest</h4><ol><li><p>请求方式method（POST/GET/…）</p></li><li><p>请求头信息META<br>REMOTE_ADDR——请求的IP地址<br>HTTP_USER_AGENT——用户请求终端信息（以什么设备请求，pc端浏览器，浏览器是什么型号的，火狐或者谷歌等）</p></li><li><p>获取请求传递参数<br>GET——GET请求参数<br>POST——POST请求参数<br>COOKIES——cookie信息</p><blockquote><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息</p></blockquote><p>FILES——文件信息</p></li></ol><p>现在来演示一下查看request的头信息META：</p><p>项目urls.py中添加url地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns =[</span><br><span class="line">    path(<span class="string">'request/'</span>,views.print_request,name=<span class="string">'print_request'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>项目views.py中添加方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_request</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(request)</span><br><span class="line">    <span class="comment"># 打印请求ip的地址</span></span><br><span class="line">    print(request.META[<span class="string">'REMOTE_ADDR'</span>])</span><br><span class="line">    <span class="comment"># 打印用户终端信息</span></span><br><span class="line">    print(request.META[<span class="string">'HTTP_USER_AGENT'</span>])</span><br><span class="line">    <span class="comment"># 打印request的其他属性</span></span><br><span class="line">    print(dir(request))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse()</span><br></pre></td></tr></table></figure><h4 id="响应-Response"><a href="#响应-Response" class="headerlink" title="响应 Response"></a>响应 Response</h4><p>常见的响应内容Content-Type</p><ul><li><p>text/html    超文本标记语言文本（HTML）</p></li><li><p>text/plain    普通文本</p></li><li><p>text/xml       XML文档</p></li><li><p>image/jpg等    图片/图形</p></li><li><p>application/json   json数据类型</p><blockquote><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote></li></ul><p>演示指定响应内容：<br>项目urls.py =&gt; urlpatterns添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'response/json'</span>,views.print_json,name=<span class="string">'print_json'</span>),</span><br></pre></td></tr></table></figure><p>项目views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_info=&#123;</span><br><span class="line">        <span class="string">'username'</span>:<span class="string">'gan'</span>,</span><br><span class="line">        <span class="string">'age'</span>:<span class="number">24</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    user_info=json.dumps(user_info)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(user_info,content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure><p>此时页面会出现json格式的内容<code>{&quot;username&quot;: &quot;gan&quot;, &quot;age&quot;: 24}</code></p><p><strong>响应对象</strong>：HttpResponse    HttpResponseRedirect    JsonResponse(响应json)    FileResponse(响应文件)</p><p>上面json响应可以简化为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_info=&#123;</span><br><span class="line">        <span class="string">'username'</span>:<span class="string">'gan'</span>,</span><br><span class="line">        <span class="string">'age'</span>:<span class="number">24</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(user_info)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200415121136242.png"  alt="image-20200415121136242"></p><p>浏览器调试中可以查看响应类型</p><h4 id="响应对象之间的关系"><a href="#响应对象之间的关系" class="headerlink" title="响应对象之间的关系"></a>响应对象之间的关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">E[other] --&gt; A[HttpResponse]</span><br><span class="line">B[FileResponse] --&gt; E</span><br><span class="line">C[JsonResponse] --&gt; E</span><br><span class="line">D[HttpResponseBadRequest] --&gt; E</span><br><span class="line">F[HttpResponseRedirectBase] --&gt;A</span><br><span class="line">G[HttpResponseRedirect] --&gt;F</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/markdown/md-advance.html" target="_blank" rel="noopener">ps: markdown高级技巧</a></p><p><strong>HttpResponse重要知识点</strong></p><ol><li><p>status查看HTTP响应状态码</p></li><li><p>status_code查看HTTP响应状态码</p><p>通过HttpResponse传入参数修改状态码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'打印响应对象'</span>,status=<span class="number">404</span>)</span><br></pre></td></tr></table></figure><p>或者直接通过status_code指定状态码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resp=HttpResponse(<span class="string">'打印响应对象'</span>)</span><br><span class="line">resp.status_code=<span class="number">404</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></li><li><p>content_type设置响应类型</p><p>上面已有演示</p></li><li><p>write()写入响应内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resp=HttpResponse(<span class="string">'打印响应对象'</span>)</span><br><span class="line">resp.write(<span class="string">'2020'</span>)</span><br><span class="line"><span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>write的内容将被直接添加到‘打印响应对象’最后</p></li></ol><p><strong>FileResponse</strong></p><p>举例：添加url后设置views方法，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> FileResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_img</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_name = os.path.join(settings.MEDIA_ROOT, <span class="string">'rain.jpg'</span>)</span><br><span class="line">        f = open(file_name,<span class="string">'rb'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">return</span> FileResponse(f, content_type=<span class="string">'image/jpeg'</span>)</span><br></pre></td></tr></table></figure><p>加载excel 文件同理 <code>content_type=&#39;application/vnd.ms-excel&#39;</code>，会直接弹出下载</p><h3 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a>基于类的视图</h3><p>视图是一个可调用对象，可以接收一个请求然后返回一个请求，基于类的视图可以结构化你的视图。基于类的视图可以利用继承和混合重用代码，内置的视图拿来即用，代码更简洁。</p><h4 id="举例：使用TemplateView"><a href="#举例：使用TemplateView" class="headerlink" title="举例：使用TemplateView"></a>举例：使用TemplateView</h4><p>步骤一：继承视图</p><p>django.views.generic.TemplateView</p><p>步骤二：配置模板地址</p><p>项目views.py中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowClassView</span><span class="params">(TemplateView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'index.html'</span></span><br></pre></td></tr></table></figure><p>步骤三：配置URL</p><p>项目urls.py中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用类来改写视图</span></span><br><span class="line"> path(<span class="string">'class/view'</span>, views.ShowClassView.as_view(), name=<span class="string">'show_class'</span>),</span><br></pre></td></tr></table></figure><p>TemplateView应用在模块中则需要配置模板地址。使用TemplateView使得工程具有模块化</p><p>新建app oauth，在模块中添加templates/index1.html，首先在项目urls.py中通过include<strong>嵌套oauth模块</strong>，在oauth.urls中添加路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用类来改写视图</span></span><br><span class="line">path(<span class="string">'class/view'</span>, views.ShowClassView.as_view(), name=<span class="string">'show_class'</span>),</span><br></pre></td></tr></table></figure><p>oauth.views中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowClassView</span><span class="params">(TemplateView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'index1.html'</span></span><br></pre></td></tr></table></figure><p>最后在项目settings.INSTALLED_APPS添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 激活该模块</span><br><span class="line">&#39;oauth.apps.OauthConfig&#39;,</span><br></pre></td></tr></table></figure><h4 id="TemplateView原理解析"><a href="#TemplateView原理解析" class="headerlink" title="TemplateView原理解析"></a>TemplateView原理解析</h4><ol><li><p>先从项目主目录寻找模板文件</p></li><li><p>然后从app的模板目录寻找模板文件</p><p>需要保证项目settings.TEMPLATES中<code>&#39;APP_DIRS&#39;: True,</code>，才会寻找模块中的template</p></li></ol><h4 id="Django内置通用视图"><a href="#Django内置通用视图" class="headerlink" title="Django内置通用视图"></a>Django内置通用视图</h4><p>django.views.generic.ListView：列表类数据的封装，如：商品列表支持分页</p><p>django.views.generic.DetailView：详情类数据的封装，如：商品详情</p><p><strong>类视图的本质</strong></p><p>class ListView(MultipleObjectTemplateResponseMixin, BaseListView)</p><div class="mermaid">          graph RLA[object]B[View] --> AC[ContextMixin] --> AD[***View] --> BE[***Mixin] --> C          </div><h3 id="积分商城添加视图内容"><a href="#积分商城添加视图内容" class="headerlink" title="积分商城添加视图内容"></a>积分商城添加视图内容</h3><p>任务目标：</p><ol><li><p>搭建项目的基本框架</p><p>添加各个模块 accounts    mine    system    mall</p></li><li><p>编写视图，从HTML加载页面</p><p>嵌套模块，模块中添加url view    </p></li><li><p>处理请求参数，走通基本的流程</p><p>使用render to response()方法</p></li></ol><h2 id="Django模板语法"><a href="#Django模板语法" class="headerlink" title="Django模板语法"></a>Django模板语法</h2><h3 id="templates介绍"><a href="#templates介绍" class="headerlink" title="templates介绍"></a>templates介绍</h3><p><strong>模板和模板引擎</strong></p><p>模板具有一定的格式或骨架，可以动态生成HTML</p><p>模板引擎决定以何种方式组织代码</p><p>一个项目可以有一个或多个模板引擎，如DTL和jinja2</p><p><strong>DTL(Django Template Language)</strong> 是Django原生模板系统，知道Django1.8唯一的模板引擎支持</p><p><strong>Jinja2</strong>速度更快，Python的功能齐全的开源模板引擎</p><p><a href="http://docs.jinkan.org/docs/jinja2" target="_blank" rel="noopener">jinja2官方文档</a></p><p>pip install jinja2</p><p><strong>渲染机制</strong></p><p>如果没有模板引擎怎样在浏览器展示HTML：</p><ol><li>从磁盘读取html字符串</li><li>将满足特定规则的内容进行替换</li><li>发送给浏览器展示</li></ol><p>模板存在的情况：</p><ol><li>从磁盘读取模板文件（get_template）</li><li>选择合适的模板引擎（select_tmeplate）</li><li>将定制的内容对模板进行渲染（render）</li><li>发送给浏览器显示</li></ol><h3 id="templates相关配置"><a href="#templates相关配置" class="headerlink" title="templates相关配置"></a>templates相关配置</h3><p>配置示例：</p><p>在项目根目录settings中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="comment"># 其他配置</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置选项：</p><p>BACKEND——模板引擎配置<br>django.template.backends.django.DjangoTemplates<br>django.template.backends.jinja2.Jinja2</p><p>DIRS——模板引擎按列表顺序搜素这些目录以查找模板源文件<br>APP_DIRS——决定模板引擎是否应该进入每个已安装的应用中查找模板。每种模板引擎后端都定义了一个惯用的名称作为应用内部存放模板的子目录名称，‘templates’一般默认存放DTL模板，‘jinja2’默认存放jinja2模板。</p><p>同时配置了DTL和jinja2模板后的查找顺序：先DTL，后jinja2，然后找app里的。</p><h3 id="模板变量的使用"><a href="#模板变量的使用" class="headerlink" title="模板变量的使用"></a>模板变量的使用</h3><p>渲染Python中的变量：</p><ol><li>语法<br><code></code> （用双大括号，变量和大括号之间有空格）</li><li>当模板引擎遇到一个变量，它将计算这个变量，然后用结果替换掉她本身</li><li>变量名称中不能有空格或标点符号(点号留给字典变量使用)</li></ol><p>渲染静态图片：</p><ol><li><p>图片地址的变量</p></li><li><p>模板文件中渲染</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; img_url &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">"not found"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img_url=<span class="string">'/meida/rain.jpg'</span></span><br><span class="line">render_to_response(template_name=<span class="string">'xxx.html'</span>,context=&#123;</span><br><span class="line">    <span class="string">'img_url'</span>:img_url,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>注意url使用的是相对路径</em></p><p>字典类型的渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>name:&#123;&#123; stu.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>age:&#123;&#123; stu.age &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stu = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'gan'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">23</span>,</span><br><span class="line">&#125;</span><br><span class="line">render(request,template_name=<span class="string">'xxx.html'</span>,context=&#123;</span><br><span class="line">    <span class="string">'stu'</span>:stu,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表/元组类型的渲染：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">city = [<span class="string">'Beijing'</span>, <span class="string">'Yichun'</span>, <span class="string">'Changsha'</span>]</span><br><span class="line">goods = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'jelly'</span>, <span class="string">'price'</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'dried strawberry'</span>, <span class="string">'price'</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'durian'</span>, <span class="string">'price'</span>: <span class="string">'70'</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">return</span> render_to_response(template_name=<span class="string">'vari.html'</span>, context=&#123;</span><br><span class="line">    <span class="string">'img_url'</span>: img_url,</span><br><span class="line">    <span class="string">'stu'</span>: stu,</span><br><span class="line">    <span class="string">'city'</span>: city,</span><br><span class="line">    <span class="string">'goods'</span>: goods</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; city.0 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; city.1 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; city.2 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; goods.0.name &#125;&#125;:&#123;&#123; goods.0.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; goods.1.name &#125;&#125;:&#123;&#123; goods.1.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; goods.2.name &#125;&#125;:&#123;&#123; goods.2.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上仅作为替换格式的介绍，对于字典、列表的替换可以用下面的模板标签的写法</p><h3 id="模板标签的使用"><a href="#模板标签的使用" class="headerlink" title="模板标签的使用"></a>模板标签的使用</h3><p><strong>模板标签的语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tag %&#125;</span><br></pre></td></tr></table></figure><p>循环控制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in data_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;`#结束标签</span><br><span class="line">&#123;% for k,v in data_dic.items %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; k &#125;&#125;:&#123;&#123; v &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;`#结束标签</span><br></pre></td></tr></table></figure><p>for 循环 排序 reversed 逆序 forloop.counter</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in data_list reversed %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123; forloop.counter &#125;&#125;:</span><br><span class="line">    内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;`#结束标签</span><br></pre></td></tr></table></figure><p>条件控制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if condition_a %&#125;</span><br><span class="line">满足了A条件</span><br><span class="line">&#123;% elif condition_b %&#125;</span><br><span class="line">满足了B条件</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">都不满足</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>其他逻辑控制：</p><ul><li>and,or</li><li>==,!=</li><li>&gt;,&lt;</li><li>=,&lt;=</li><li>in,not in</li><li>is</li></ul><p>添加注释：``(这种注释在浏览器网页中看不到)</p><p>与HTML注释的区别：</p><p><code>&lt;!-- 注释 --&gt;</code></p><p>举例（将上面的html改写）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for item in city %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for item in goods %&#125;</span><br><span class="line">        &#123;% if item.price &gt;= 20 %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.name &#125;&#125;==&gt;&gt;&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% empty %&#125;# 在for循环中如果列表为空的情况</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>没有<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>循环的分行显示，row1和row2是class名称分别代表奇数行和偶数行，可以通过css样式进行调整</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for k,v in stu.items %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;% cycle 'row1' 'row2' %&#125;"</span>&gt;</span></span><br><span class="line">            &#123;&#123; k &#125;&#125;==&gt;&#123;&#123; v &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url标签，可以通过name找到指定该url标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;# target="_blank"在一个新的页面打开 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'print_request' %&#125;"</span> <span class="attr">target</span>=<span class="string">'_blank'</span>&gt;</span>url标签测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带参数url标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'article' 2020 %&#125;?month=4"</span> <span class="attr">target</span>=<span class="string">'_blank'</span>&gt;</span>url标签测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带匿名空间url标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;# oauth是namespace名称 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'oauth:show_class' %&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>url标签测试（带命名空间）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前时间显示，now显示当前时间日期</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">It is &#123;% now "jS F Y H:i" %&#125;</span><br><span class="line">&#123;# o和f是用反斜杠转译的，可直接显示 #&#125;</span><br><span class="line">It is the &#123;% now "jS \o\f F" %&#125;</span><br></pre></td></tr></table></figure><p>输出结果<code>It is 21st April 2020 04:35 It is the 21st of April</code></p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>如何对变量进行特殊处理后再渲染。举例：将英语单词的首字母大写</p><p>model =&gt; Model</p><p>view =&gt; View</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|filter_name: params &#125;&#125;</span><br></pre></td></tr></table></figure><p>先在views中传入相关参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 首字母大写 转换大写 时间格式化等模板过滤器 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>filter capfirst<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">&#123;% for i in city_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; i|capfirst &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>filter upper<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">&#123;% for i in city_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; i|upper &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>filter date<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">&#123;&#123; now|date:'D d M Y' &#125;&#125;</span><br><span class="line">&#123;&#123; now|date:'W \o\f y' &#125;&#125;</span><br></pre></td></tr></table></figure><p>默认值显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;# False或者空值则显示nothing #&#125;</span><br><span class="line">&#123;&#123; value|default:"nothing" &#125;&#125;</span><br><span class="line">&#123;# None则显示nothing #&#125;</span><br><span class="line">&#123;&#123; value|default_if_none:"nothing" &#125;&#125;</span><br></pre></td></tr></table></figure><p>数字四舍五入显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|floatformat:3 &#125;&#125;</span><br></pre></td></tr></table></figure><p>富文本内容转义显示（渲染html格式）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|safe &#125;&#125;</span><br></pre></td></tr></table></figure><p>字符串截取：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|truncatechars:9 &#125;&#125; #截取前9个字符串</span><br><span class="line">&#123;&#123; value|truncatechars_html:9 &#125;&#125; #截取前9个字符串，不含html标记</span><br><span class="line">&#123;&#123; value|truncatewords:2 &#125;&#125;</span><br></pre></td></tr></table></figure><p>举例：对于<code>html=&#39;&lt;h3&gt;truncate filter&lt;/h3&gt;&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; html|safe &#125;&#125;</span><br><span class="line">&#123;&#123; html|truncatechars:6 &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; html|truncatechars_html:6 &#125;&#125;</span><br><span class="line">&#123;&#123; html|truncatewords:6|safe &#125;&#125;</span><br></pre></td></tr></table></figure><p>显示结果为：</p><p><img src="/" class="lazyload" data-src="/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200421162420549.png"  alt="image-20200421162420549"></p><p><font color="red">其他内置过滤器参考文档的<strong>Built-in filter reference</strong></font></p><h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><ol><li><p>在app目录下新建包templatetags，把定义过滤器的py文件放在这里面(假设app名为oauth)（这个app一定是要在settings文件中的INSTALLED_APPS注册过的，’oauth.apps.OauthConfig’）</p></li><li><p>实现过滤器oauth_extras.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 注册过滤器</span></span><br><span class="line"><span class="function"><span class="title">register</span>.<span class="title">filter</span><span class="params">(<span class="string">'filter_name'</span>,xxx)</span></span></span><br></pre></td></tr></table></figure></li><li><p>在模板中使用过滤器<br>在templ_filter_mine.html开头引入</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load oauth_extras %&#125;</span><br></pre></td></tr></table></figure><p>   使用过滤器</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|filter_name &#125;&#125;</span><br></pre></td></tr></table></figure><p>   切记：添加自定义过滤器后记得重启开发服务器</p><p>举例：使用自定义过滤器进行数字格式化</p><p>模块templatetags里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_format</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value:</span><br><span class="line">        <span class="comment"># 将数字格式化为xxx，xxx.00的格式</span></span><br><span class="line">        value = format(int(value), <span class="string">','</span>) + <span class="string">'.00'</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">register.filter(<span class="string">'num_format'</span>, num_format)</span><br></pre></td></tr></table></figure><p>分别在项目url中添加路径，然后再views添加方法，引用的html模板中首行加入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load oauth_extras %&#125;</span><br></pre></td></tr></table></figure><p>，再使用过滤器</p><h3 id="模板的抽象与继承"><a href="#模板的抽象与继承" class="headerlink" title="模板的抽象与继承"></a>模板的抽象与继承</h3><p>模板继承首先需要找出整个网站的共性部分，集成到一个网页当中个，将个性部分用一个叫做的标签包围起来</p><p>注意：1.block包围的部分是可以被继承修改的部分；2.通常block包围的地方为空，里面的内容删去，如果保留下来就相当于默认值</p><ol><li><p>将可变的部分圈出来（base.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line"><span class="comment">&lt;!--菜单栏的内容--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承父模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br></pre></td></tr></table></figure></li><li><p>填充新的内容（index.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line"><span class="comment">&lt;!--新的菜单栏的内容--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>复用父模板的内容（可选）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">&#123;&#123; supper &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!--新的菜单栏的内容--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在模板中添加公共的部分：</p><ol><li><p>将可变的部分拆出来（footer.html）</p></li><li><p>将拆出来的部分包进来（index.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 包含底部的html的模块 #&#125;</span><br><span class="line">&#123;% include 'footer.html' %&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS静态网页案例及知识点补充(含Flex布局)</title>
      <link href="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/"/>
      <url>/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是完成<a href="www.imooc.com">慕课网</a>网页项目的知识点总结</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408173846717.png"  alt="image-20200408173846717"></p><p>项目最终的完成图如上，基本达到了项目的要求。</p><p> 网页内容居中显示。每个区域宽度相对于浏览器100%显示。</p><p>顶部 导航、Logo区有链接效果，无下划线；鼠标经过相应导航时，背景颜色变为黑色。</p><p>banner区 图片上要有半透明的遮罩， 表单内容显示在图像的最上面，且表单要水平居中。表单项有：姓名、邮件、具体内容、提交按钮。表单项设置用户提示信息。   鼠标滑过表单各项时，表单项的边框颜色变成#07cbc9。鼠标滑过提交按钮时，按钮没有边框，背景颜色变成#07cbc9。提示：用于遮罩的div可以设置背景颜色为黑色，透明度属性opacity为0.4</p><p>about区 分为上中下三部分，上部分为标题与文字。中间部分从左至右为文字、图片、文字三部分，要求中间部分居中显示。下部分为文字与图片交错显示，要求下部分水平方向平铺浏览器窗口。中间部分左侧的EXPLORE按钮，鼠标移入时背景变为透明的，但是有黑色的边框。鼠标划过下部分的文字区域片中的按钮时，按钮的背景颜色为透明色，边框为黑色提示：图片上方文字所在的div有透明效果，可以设置该div的背景色为：rgba(255, 255, 255, 0.4);</p><p>gallery区 上部分为文字描述，下部分为图片展示，图片之间有一定距离，文字的颜色和大小适当设置。</p><p>项目确实有点难度，在家边摸鱼边学习摸索，花了三天才完成。主要难点集中在几个方面：1. 各种元素的居中，尤其是about的中间区域的效果（多元素同一行居中）。2. 不规则图形的绘制，如about区下半部分的矩形加箭头的蓝色框。3. position:left和float切换的问题。4.css代码精简。</p><p>下面通过项目来解决这几部分问题</p><h2 id="元素居中的几种方法"><a href="#元素居中的几种方法" class="headerlink" title="元素居中的几种方法"></a>元素居中的几种方法</h2><h3 id="margin-auto-属性"><a href="#margin-auto-属性" class="headerlink" title="margin: auto;属性"></a>margin: auto;属性</h3><p>这种方法可以使得容器（div）在页面中居中，但是不能使容器中的文字等居中。使用时需要规定容器div的宽度，比如页面中的这两个部分</p><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408185432589.png"  alt="image-20200408185432589"></p><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408185452917.png"  alt="image-20200408185452917"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>ABOUT<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'h2_desc'</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>GALLERY<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'h2_desc'</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>html页面中about区和gallery区定义了相同的class名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main_title</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定about和gallery的上部分div*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一设定了宽度后，通过margin: 50px auto; 设定了左右居中属性，这样div就处于页面最中央了，但是文字部分还没有实现居中。需要text-align属性进行文本居中。</p><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408222650160.png"  alt="image-20200408222650160"></p><h3 id="text-align-center-属性"><a href="#text-align-center-属性" class="headerlink" title="text-align: center; 属性"></a>text-align: center; 属性</h3><p>text-align属性指定元素文本的水平对齐方式。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>right</td><td>把文本排列到右边。</td></tr><tr><td>center</td><td>把文本排列到中间。</td></tr><tr><td>justify</td><td>实现两端对齐文本效果。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 text-align 属性的值。</td></tr><tr><td>left</td><td>把文本排列到左边。默认值：由浏览器决定。</td></tr></tbody></table><p>text-align:center;可以使得子元素p、h1-h6、img、form、input等元素快速居中对齐，但如果子元素是div，则不能直接使该div居中。</p><p>在上面的代码中添加text-align: center;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main_title</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定about和gallery的上部分div*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样页面文本也实现了居中效果</p><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408223008257.png"  alt="image-20200408223008257"></p><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408224732450.png"  alt="image-20200408224732450"></p><p>需要实现红色方框中的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_other"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_us"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>A WORD<span class="tag">&lt;<span class="name">br</span>&gt;</span>ABOUT US<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Praesent dignissim viverra est, sed bibendum ligula congue con. Sed ac nisl et felis gravida commodo? Suspendisse eget ullamcorper ipsum. Suspendisse diam amet<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"EXPLORE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/bb3.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stu_num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>70000<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fac_num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>600<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Faculty<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要实现三个div同行显示，最中间图片居中且div元素有重叠。此时前两种方法会将三个div竖向居中，如果使用绝对定位实现重叠效果时候，此时又不能同时实现图片居中。此时需要引进flex布局。</p><h4 id="flex的诞生"><a href="#flex的诞生" class="headerlink" title="flex的诞生"></a>flex的诞生</h4><blockquote><p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p><p>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</strong></p><h4 id="flex概念"><a href="#flex概念" class="headerlink" title="flex概念"></a>flex概念</h4><blockquote><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p></blockquote><h4 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h4><p>flex-direction    flex-wrap    flex-flow    justify-content    align-items    align-content</p><p>具体各个容器属性的介绍及用法参见<a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noopener">菜鸟教程网</a></p><p>flex-direction属性决定项目的排列方向</p><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/0cbe5f8268121114e87d0546e53cda6e.png"  alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>justify-content属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中justif-content: center; 可以实现该容器内的项目实现同一行居中对齐</p><p><strong>让我们回到正题</strong>，要实现红色方框内的效果则需要将父级div变成flex布局并设置居中对齐，然后容器中要重叠的项目（子div）设置绝对定位即可。(重点看代码中的flex和position属性)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span>&#123;</span><br><span class="line"><span class="comment">/*父元素定义flex属性得div元素在横向上排列*/</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">360px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#A4A4A4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="comment">/*同时设置两个师生数量div*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css不规则图形"><a href="#css不规则图形" class="headerlink" title="css不规则图形"></a>css不规则图形</h2><p><img src="/" class="lazyload" data-src="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408232028282.png"  alt="image-20200408232028282"></p><p>在青色div最后加上::after{}。在内容之后插入新的内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.r_img</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="comment">/*在div最后添加一个三角形区域*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="comment">/*显示一个三角形区域并上色*/</span></span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">280px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS代码精简及补充"><a href="#CSS代码精简及补充" class="headerlink" title="CSS代码精简及补充"></a>CSS代码精简及补充</h2><table><thead><tr><th></th><th>选择器</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>id，*</td><td>选择指定元素中被用户选中的内容</td></tr><tr><td>2</td><td>逗号选择器</td><td>联合选择器</td></tr><tr><td>3</td><td>空格选择器</td><td>子孙（后代）选择器</td></tr><tr><td>4</td><td>&gt;选择器</td><td>子选择器</td></tr><tr><td>5</td><td>+选择器</td><td>相邻兄弟选择器</td></tr><tr><td>6</td><td>[]</td><td>属性选择器</td></tr></tbody></table><p>灵活应用以上选择器，精简css代码</p><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><table><thead><tr><th></th><th>选择器</th></tr></thead><tbody><tr><td>1</td><td>!important</td></tr><tr><td>2</td><td>行内样式</td></tr><tr><td>3</td><td>ID选择器</td></tr><tr><td>4</td><td>类选择器</td></tr><tr><td>5</td><td>标签</td></tr><tr><td>6</td><td>通配符</td></tr><tr><td>7</td><td>浏览器默认属性</td></tr></tbody></table><p>伪元素选择器：::selection    ::before    ::after    ::first-line    ::first-letter等等</p><p>伪类选择器：a:link    a:visited    a:hover    a:active    :focus等等</p><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Career Builder<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/common.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/logo.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'###'</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'###'</span>&gt;</span>ABOUT<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'###'</span>&gt;</span>GALLERY<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'###'</span>&gt;</span>FACULTY<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'###'</span>&gt;</span>EVENTS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'###'</span>&gt;</span>CONTACT<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner_img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/banner3.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'cap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- placeholder属性设置默认显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">'basic_input'</span> <span class="attr">placeholder</span>=<span class="string">'your Name'</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">class</span>=<span class="string">'basic_input'</span> <span class="attr">placeholder</span>=<span class="string">"your Phone"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">'basic_input'</span> <span class="attr">placeholder</span>=<span class="string">"your Email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">placeholder</span>=<span class="string">"Write Your Comment Here"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"send_btn"</span> <span class="attr">value</span>=<span class="string">"SEND MESSAGE"</span> <span class="attr">class</span>=<span class="string">"send_btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>ABOUT<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'h2_desc'</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_other"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_us"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>A WORD<span class="tag">&lt;<span class="name">br</span>&gt;</span>ABOUT US<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Praesent dignissim viverra est, sed bibendum ligula congue con. Sed ac nisl et felis gravida commodo? Suspendisse eget ullamcorper ipsum. Suspendisse diam amet<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"EXPLORE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_img"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/bb3.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"about_num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stu_num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>70000<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fac_num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>600<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Faculty<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/b1.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_desc r_img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p1"</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p3"</span>&gt;</span>Lorem Ipsum has been the industry's standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"lib_btn"</span> <span class="attr">value</span>=<span class="string">"EXPLORE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/b2.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_desc r_img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p1"</span>&gt;</span>Computer Lab<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p3"</span>&gt;</span>Lorem Ipsum has been the industry's standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"com_btn"</span> <span class="attr">value</span>=<span class="string">"EXPLORE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_desc l_img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p1"</span>&gt;</span>Conference Hall<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p3"</span>&gt;</span>Lorem Ipsum has been the industry's standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"con_btn"</span> <span class="attr">value</span>=<span class="string">"EXPLORE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/b3.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_desc l_img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p1"</span>&gt;</span>Play Ground<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p3"</span>&gt;</span>Lorem Ipsum has been the industry's standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"lib_btn"</span> <span class="attr">value</span>=<span class="string">"EXPLORE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/b4.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>GALLERY<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'h2_desc'</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery_img"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03-01.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>SCIENCELAB<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03-02.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>INDOOR STADIUM<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03-03.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>TRANSPORTATION<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03-04.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>KIDS ROOM<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03-05.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>MEDITATION CLASSES<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/03-06.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc_p2"</span>&gt;</span>KIDS PLAY GROUND<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>©2020 imooc.com 京ICP备0000000号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">font-family</span>: Microsoft YaHei UI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="comment">/*浏览器100%显示*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*将页面左右居中*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="comment">/*取消超链接颜色样式*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定二级标题字样*/</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定小短线*/</span></span><br><span class="line"><span class="comment">/*用label制造出小短线区域 并使其显示*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">15px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2_desc</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定二级标题下的文字*/</span></span><br><span class="line"><span class="attribute">color</span>:<span class="number">#A4A4A4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main_title</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定about和gallery的上部分div*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*统一设置文本*/</span></span><br><span class="line"><span class="selector-class">.desc_p1</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.desc_p2</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.desc_p3</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="comment">/*先将列表整体设置为右浮动，然后再将单个列表设置为左浮动*/</span></span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">22px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-class">.cap</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line"><span class="attribute">background-color</span>: black;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">form</span>&#123;</span><br><span class="line"><span class="comment">/*将宽度设置为100% 然后使用*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">30</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;</span><br><span class="line"><span class="comment">/*设置input框为透明*/</span></span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line"><span class="comment">/*设置边框为实线*/</span></span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">textarea</span>&#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">140px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">::placeholder</span>&#123;</span><br><span class="line"><span class="comment">/*修改默认input默认显示的字体 颜色 样式*/</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-class">.basic_input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">'button'</span>]</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">'button'</span>]</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">850px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span>&#123;</span><br><span class="line"><span class="comment">/*父元素定义flex属性得div元素在横向上排列*/</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">360px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#A4A4A4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="comment">/*同时设置两个师生数量div*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1600px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-tag">img</span>,<span class="selector-class">.detail</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.img_desc</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">30px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.r_img</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="comment">/*在div最后添加一个三角形区域*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="comment">/*显示一个三角形区域并上色*/</span></span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">280px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.l_img</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="comment">/*在div最后添加一个三角形区域*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="comment">/*显示一个三角形区域并上色*/</span></span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">140px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> <span class="selector-class">.gallery_img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">670px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> <span class="selector-class">.gallery_img</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">290px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> <span class="selector-class">.gallery_img</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">5px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">80px</span> auto;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML name id class的区别</title>
      <link href="/2020/04/03/HTML-name-id-class%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/04/03/HTML-name-id-class%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p>name：指定标签的名称。</p></li><li><p>id：指定标签的唯一标识。</p></li><li><p>class：指定标签的类名。</p></li></ol><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><p>指定标签格式</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">name</span>=<span class="string">'username'</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li><blockquote><p>主要是用于获取提交表单的某表单域信息， 作为可与服务器交互数据的HTML元素的服务器端的标示，比如input、select、textarea、框架元素(iframe、frame、 window的名字，用于在其他frame或window指定target )和button等，这些元素都与表单(框架元素作用于form的target)提交有关，浏览器会根据name来设定发送到服务器的request， 在表单的接收页面只接收有name的元素,  所以赋ID的元素通过表单是接收不到值的。 我们可以在服务器端根据其Name通过Request.Params取得元素提交的值。在form里面，如果不指定name，就不会发送到服务器端。</p></blockquote></li><li><p>input type=’radio’单选标签：把几个单选标签的 name设为一个相同值时，将会进行单选操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">name</span>=<span class="string">'sex'</span>/&gt;</span>male</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">name</span>=<span class="string">'sex'</span>/&gt;</span>female</span><br></pre></td></tr></table></figure></li><li><p>在HTML DOM对象树中，可以通过document.getElementsByName()来获取有相同name标的标签，然后进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_bgcolor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementsByName(<span class="string">'sex'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;sex.length;i++)&#123;</span><br><span class="line">        <span class="comment">/*遍历sex数组，改变背景颜色*/</span></span><br><span class="line">        sex[i].style.backgroundColor=<span class="string">'red'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他特点"><a href="#其他特点" class="headerlink" title="其他特点"></a>其他特点</h3><p>name属性的值，在当前page页不具有唯一性</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>指定标签的唯一标识</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'password'</span> <span class="attr">id</span>=<span class="string">'psd'</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li><p>根据提供的唯一id号，快速获取标签对象。如：document.getElementById()</p></li><li><p>用于充当label标签for属性的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'userid'</span>&gt;</span>male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">id</span>=<span class="string">'userid'</span>/&gt;</span></span><br><span class="line">// 表示单击此label标签时，id为userid的标签获得焦点，此时单选框也被选中了。</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他特点-1"><a href="#其他特点-1" class="headerlink" title="其他特点"></a>其他特点</h3><p>id属性的值，在当前的page页面是唯一的</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>指定标签的类名</p><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">class</span>=<span class="string">"btn"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><p>CSS操作，把一些特定样式放到一个class类中，通过class修改找到特定的标签来设置CSS</p><h3 id="其他特点-2"><a href="#其他特点-2" class="headerlink" title="其他特点"></a>其他特点</h3><p>一个标签可以有多个class属性，设置时必须用空格隔开；class=‘btn submit’</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端油画商城案例（静态页面实现）</title>
      <link href="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该案例为慕课网    <a href="www.imooc.com">imooc</a>    JavaScript课程的学习笔记</p><h3 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h3><ol><li>学以致用，综合运用之前所学的知识</li><li>掌握页面布局的方法，独立完成商品展示页的开发</li><li>具有构思、规划页面布局的方法和思路</li><li>数量掌握div+css+js的相关用法</li></ol><h4 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h4><p><strong>页眉、banner区</strong></p><p><img src="/" class="lazyload" data-src="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200331103446658.png"  alt="image-20200331103446658"></p><p><strong>正文区</strong></p><p><img src="/" class="lazyload" data-src="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200331103531373.png"  alt="image-20200331103531373"></p><p><strong>页脚区</strong></p><p><img src="/" class="lazyload" data-src="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200331103613607.png"  alt="image-20200331103613607"></p><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>开发工具及版本：Sublime 3</p><p>开发使用的技术：CSS+DIV+JS</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>新建项目文件夹，新建index.html</p><p>文件夹内新建css、js文件夹，分别添加css和js文件</p><p>html内链接js，css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span> <span class="attr">href</span>=<span class="string">'css/common.css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'js/js1.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="logo和menu区域设计"><a href="#logo和menu区域设计" class="headerlink" title="logo和menu区域设计"></a>logo和menu区域设计</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li>制作左上方的logo，注意上边距、左边距的距离</li><li>制作菜单：注意菜单的位置、间距、打开效果</li><li>右侧的用户交互区：注意右边距的位置、水平位置</li><li>页眉区的尺寸和距离，注意要和下方 banner区域的大小、位置相应一致</li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mata</span> <span class="attr">charset</span>=<span class="string">'UTF-8'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>商城<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/common.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/js1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/logo.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu_title"</span> <span class="attr">onclick</span>=<span class="string">"display_list()"</span> <span class="attr">onmouseleave</span>=<span class="string">"hide_list()"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>内容分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'menu_list'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>现实主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>抽象主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auth"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">'#'</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">'#'</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1300px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.logo</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-class">.menu_title</span>&#123;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="comment">/*取消超链接的装饰*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="comment">/*去掉列表小圆点*/</span></span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">23px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">true</span>; <span class="comment">//设置全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">'menu_list'</span>);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">// 元素呈现为块级元素</span></span><br><span class="line">ul.style.display=<span class="string">'block'</span>;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ul.style.display=<span class="string">'none'</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">'menu_list'</span>);</span><br><span class="line">ul.style.display=<span class="string">'none'</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/" class="lazyload" data-src="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200403104911306.png"  alt="image-20200403104911306"></p><h3 id="重点及难点"><a href="#重点及难点" class="headerlink" title="重点及难点"></a>重点及难点</h3><ul><li>菜单的制作，要注意菜单的位置、利用js实现的弹出效果、菜单的外观样式。</li><li>位置、对齐方式等细节设置</li></ul><h3 id="经验技巧总结"><a href="#经验技巧总结" class="headerlink" title="经验技巧总结"></a>经验技巧总结</h3><ol><li>可以在设置页面区域的同时，将banner图进行设置，方便进行位置参照</li><li>div逐层设置，仔细观察样式所选择的对象以及实现的效果</li><li>js菜单效果设置</li><li>css中加上层级关系，方便后期维护</li></ol><h2 id="商品展示区制作"><a href="#商品展示区制作" class="headerlink" title="商品展示区制作"></a>商品展示区制作</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>实现banner，保持对齐。内容列表重叠在banner上（absolute定位）</li><li>用列表实现商品展示页</li><li>实现商品翻页目录显示（不实现翻页）</li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>css选择器<strong>‘&gt;’和空格</strong>区别：&gt;是选直系元素，空格选内部所有的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*如果content中直接包含menu 效果一样*/</span></span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-class">.menu</span>&gt;<span class="selector-tag">ul</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>box-shadow</strong>属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;</span><br><span class="line"><span class="comment">/*浏览器兼容性支持*/</span></span><br><span class="line"><span class="selector-tag">-webkit-box-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;<span class="comment">/*谷歌浏览器支持*/</span></span><br><span class="line"><span class="selector-tag">-moz-box-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;<span class="comment">/*火狐浏览器支持*/</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需的。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需的。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影大小</td></tr><tr><td>color</td><td>可选。颜色</td></tr><tr><td>inset</td><td>（关键字）可选。从外层的阴影（开始时）改变阴影内侧阴影</td></tr></tbody></table><p><strong>span div 对比</strong>：span级别比div小一点。div块级元素，span行级元素。</p><p><strong>font-weight属性</strong>： normal bold bolder lighter等可选。设置字体粗细</p><p><strong>line-height属性</strong>：指定行高</p><p><strong>overflow属性</strong>：指定如果内容溢出一个元素的框，会发生什么。（overflow:hidden还可以起到清除浮动效果，见下文项目总结）</p><table><thead><tr><th align="left">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">visible</td><td align="center">默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td align="left">hidden</td><td align="center">内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td align="left">scroll</td><td align="center">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">auto</td><td align="center">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">inherit</td><td align="center">规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><h3 id="重点及难点-1"><a href="#重点及难点-1" class="headerlink" title="重点及难点"></a>重点及难点</h3><ul><li>商品展示区两行三列排列方式</li><li>商品展示区两端对齐</li><li>正文区三部分布局的统一：banner区、商品展示区、页码区</li></ul><h3 id="经验技巧总结-1"><a href="#经验技巧总结-1" class="headerlink" title="经验技巧总结"></a>经验技巧总结</h3><ul><li>位置：在进行页面布局时，位置和对齐，是最重要的基础工作。</li><li>什么时候添加div：有改变即添加div（包括后期可能要改动的）。</li></ul><h2 id="页脚区"><a href="#页脚区" class="headerlink" title="页脚区"></a>页脚区</h2><p>页脚太简单了 不说了</p><p>完成所有部分的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mata</span> <span class="attr">charset</span>=<span class="string">'UTF-8'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>商城<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/common.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/js1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/logo.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu_title"</span> <span class="attr">onclick</span>=<span class="string">"display_list()"</span> <span class="attr">onmouseleave</span>=<span class="string">"hide_list()"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>内容分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'menu_list'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>现实主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>抽象主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auth"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">'#'</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">'#'</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/welcome.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/wumingnvlang.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/cart.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/wumingnvlang.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/cart.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/wumingnvlang.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/cart.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/wumingnvlang.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/cart.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/wumingnvlang.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/cart.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/wumingnvlang.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/cart.svg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_nav"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>…<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>98<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"page_num"</span>&gt;</span>99<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>M-GALLERY<span class="tag">&lt;/<span class="name">span</span>&gt;</span>©2020 POWERED BY WDNMD<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">font-family</span>: 宋体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#F2F2F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.logo</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-class">.menu_title</span>&#123;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="comment">/*取消超链接的装饰*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="comment">/*去掉列表小圆点*/</span></span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="comment">/*是的内容分类列表和banner重叠*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.banner</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1260px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">520px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="comment">/*增加阴影*/</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">background-color</span>: white;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.info</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">13px</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span> <span class="selector-class">.price</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">23px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span> <span class="selector-class">.btn</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_nav</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="comment">/*需要设置宽度，不然默认占用content宽度，实现不了居中*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="comment">/*???*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_nav</span> <span class="selector-tag">ul</span> <span class="selector-class">.page_num</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="comment">/*用padding将内部边距撑起来，增大阴影*/</span></span><br><span class="line"><span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">true</span>; <span class="comment">//设置全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">'menu_list'</span>);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">// 元素呈现为块级元素</span></span><br><span class="line">ul.style.display=<span class="string">'block'</span>;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ul.style.display=<span class="string">'none'</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">'menu_list'</span>);</span><br><span class="line">ul.style.display=<span class="string">'none'</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="/" class="lazyload" data-src="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200403203115643.png"  alt="image-20200403203115643"></p><h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><ul><li>整体布局时，各个对象的位置、对齐方式、间距等设置要注意细节，<strong>要通过计算的方式获取相互位置的对应关系</strong></li><li>ul和li的使用频率较高，<strong>非常适合于规律性显示</strong>的页面效果，例如案例中，多次使用到ul和li的场景</li><li>overflow:hidden、height、float直接的关系（下图蓝色是父div，红色是子div，右边这种情况就是起到了清除浮动的效果）</li></ul><p><img src="/" class="lazyload" data-src="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200403212918533.png"  alt="image-20200403212918533"></p><ul><li>实现水平居中、垂直居中的方法<ul><li>水平居中：margin: 25px <strong>auto</strong>;</li><li>垂直居中：line-height: 60px; height:60px;（height、line-height保持一致）</li></ul></li><li>找准层级关系，活用div。为了后期维护方便，给未来需要修改的内容添加div。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实战案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 实战 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>米糠拌饭の碎碎念/2019总结</title>
      <link href="/2020/03/29/%E7%B1%B3%E7%B3%A0%E6%8B%8C%E9%A5%AD%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2020/03/29/%E7%B1%B3%E7%B3%A0%E6%8B%8C%E9%A5%AD%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>​        这个假期真的很长很长，长到等来了我的24岁生日，我想在今天记录一些东西，保存在我刚搭建好的这个网站上。国内疫情的影响到现在已经逐渐消解，家乡的街巷已经恢复了往日的繁忙，但是地大的开学时间依旧处于待定状态，我还能继续在家待上一段时间。诚恳的说我一点也不急着开学，这个假期给了我难得的闲暇时间，让我可以安心做着自己喜欢的事，而且有了很多时间陪陪父母，这是去年初搬家以来，在家待的最长时间。在这期间我的厨艺也有了长足的进步，前段时间还和叔叔一家一起爬了武功山，了了我登顶武功山的心愿(￣▽￣)／。小小的总结一下过去的一年（含这个长假）。</p><p>​        <strong>生活上</strong>，我比以前更加焦虑了，“不干地质了我还能做什么”这个问题对我来说很棘手，我应该无法把我的爱好发展成职业，我急于寻找我可以学好且有前景的职业，做一些转行的准备。9月到现在很长一段时间，我都把业余精力放在了python web后端以及相关计算机知识的学习上，目前学习效果并不太显著，但是我还有时间，至少距离21年6月份毕业还有很长的一段时间，我不会停下脚步。不少业内人士告诉我python并不是一门优秀且广泛的web后端语言，工作中可能并不适用。我想过如果以后我成了程序员，python只是我的启蒙语言，不会是我唯一要掌握的语言，语言这种东西也是触类旁通吧，我可以继续学，这个时候靠什么语言入行程序员似乎不是那么重要。</p><p>​        过去一年，我还是喜欢拿着小相机到处拍拍，假期这段时间更是如此。截止目前快门数达到了8468，绝不让它吃灰。我的摄影和调色水平似乎有了些许提升，调色脱离了疯狂拉升饱和度、对比度的初级阶段。以后我还是会经常拿起相机的，出门闲逛怕拍照确实是很好的解压方式。过去一年，英语水平好像没有进步，依旧都会每天打开扇贝看原著、练口语或者背单词，原著里面越来越多不认识的单词了，GRE单词也背不下去了，很多时候都是匆匆打卡，敷衍了事，学英语确实需要一个目标，以前是为了六级，现在我暂时缺少了明确的目标，希望以后能找到新的学英语的动力。过去一年，是缺乏身体锻炼的一年，在学校偶尔会打打羽毛球，也就一两周一次，打球水平没有进步，依旧菜鸡。开学后希望能多上球场，提升球技。</p><p><img src="/" class="lazyload" data-src="/2020/03/29/%E7%B1%B3%E7%B3%A0%E6%8B%8C%E9%A5%AD%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/%E6%9C%AA%E6%A0%87%E9%A2%98-1.jpg"  alt="未标题-1" title="近期拍摄作品"></p><p>​        <strong>学习上</strong>，我确实对地质没多少兴趣了，很多时候学到的东西感觉太虚无缥缈，很难想象这些对真正的地质生产有多少帮助。在地科院我花了很多时间在处理老师的各种合同和各种账单，而文献什么的看的太少，各种实验也太多太杂，大量的数据都没处理。我对毕业论文有点担心，我还是说服不了导师给我一个简单点的毕业论文课题，现在定的论文题目太棘手了，假期还剩下点时间，我需要抓紧点了。毕竟首要目标是毕业，毕业后我才有选择，打气精神来，奥利给！</p><p>​        （省略若干字，不便展示）</p><p>​        <strong>写在最后</strong>：近期看了一部电影让我印象深刻，《本杰明巴顿奇事》讲的是布拉德·皮特饰演的男主从一出生便是老年人，逆龄生长，最终回到婴儿形态离世。我顺便把扇贝上的同名原著看完了，在我看来电影远比原著好看的多，除了逆龄生长的设定以外，简直是和原著完全不同的故事。电影似乎在诉说，人生倒着过或者正着过没有什么不同，即便时光倒流，遗憾的事也无法改变，不顺心的时候，除了破口大骂，最后还是得放手。向前看吧，所有的基于现在的改变都不会太晚，勇敢做决定，重新开始！</p><blockquote><p>For what it’s worth, it’s never too late, or in my case, too early, to be whoever you want to be.<br>There’s no time limit, start whenever you want.<br>You can change or stay the same. There’s no rules to this thing.<br>We can make the best or the worst of it. I hope you make the best of it.<br>I hope you see things that startle you. I hope you feel things you never felt before. I hope you meet people with a different point of view. I hope you live a life you’re proud of.<br>If you find that you are not, I hope you have the strength to start all over again.</p></blockquote><p>2020年3月29日（三月初六）</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微量元素数据解释处理</title>
      <link href="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/"/>
      <url>/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="微量元素数据处理与解释（REE）"><a href="#微量元素数据处理与解释（REE）" class="headerlink" title="微量元素数据处理与解释（REE）"></a>微量元素数据处理与解释（REE）</h2><h3 id="控制微量元素行为的地球化学规律"><a href="#控制微量元素行为的地球化学规律" class="headerlink" title="控制微量元素行为的地球化学规律"></a>控制微量元素行为的地球化学规律</h3><p><strong>微量元素</strong>（trace elements) 岩石中含量&lt;0.1%的，用ppm（μg/g，10<sup>-6</sup>）或者ppb（ng/g，10<sup>-9</sup>）表示</p><p>微观规律——地球化学亲和性、类质同象法则、晶体场理论（对过渡金属），归纳为：化学和晶体化学因素，包括原子（离子）的半径、配位数、原子和离子极化、最紧密堆积等。</p><p>宏观规律——体系性质和热力学规律的影响，如体系的化学组成、温度、压力、氧化还原电位等。</p><ol><li><p>地球化学过程的演化实质是元素在共存各相（液—固，固—固）之间的分配过程。</p></li><li><p>自然过程趋向局域平衡，元素在相互共存各相间的平衡分配取决于元素及矿物的晶体化学性质及热力学条件。</p></li><li><p>在自然过程中主量元素和微量元素在各相间分配的行为是不同的。主量元素——能形成自己的独立矿物，其在各相中分配受相律控制。</p><p>自由度 F = 组分数C - 相数φ + 2</p><p>橄榄石两相体系相图C=2 (硅酸镁和硅酸铁两种组分)</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200325093409597.png"  alt="image-20200325093409597"></p><p>微量元素——常不能形成独立相，它们在固熔体、溶体和溶液中浓度很低，因此微量元素的分配不受相律的限制，而服从稀溶液定律（亨利定律），即在分配达平衡时在各相间的化学势相等。<br>$$<br>D=\frac{C_{固相}}{C_{液相}}<br>$$<br><strong>相容元素</strong>：——D&gt;&gt;1, 优先进入矿物相，或残留相。例如： Ni, Co, V, Cr</p><p><strong>不相容元素</strong>：——D&lt;&lt;1，优先进入熔体相，D&lt;0.1为强不相容元素，</p><p>不相容元素又可进一步划分：<strong>小原子半径、高电荷的高场强元素（HFSE, high field strength elements）</strong>——REE, Th, U, Ce, Pb4+, Zr, Hf, Ti, Nb, Ta    </p><p>元素的电荷(Z)与其半径(r )比值称为场强，相当于电离势，</p><pre><code>如果Z/r&gt;3.0 (2.0), 称为高场强元素如果Z/r &lt;3.0，称为低场强元素。</code></pre><p>A. 离子电价较高、半径较小、具有较高场强, 其离子电位π&gt;3;<br>B. 难溶于水，典型代表为Nb、Ta、Zr、Hf、P、Ti、Sn;<br>C. 地球化学性质一般较稳定，不易受变质、蚀变和风化作用等的影响，因此常用来恢复遭后期变化岩石的原岩性质。</p><p><strong>低场强大离子亲石元素（ LIL, large ion lithophile）</strong>——它们极为活动，尤其是有流体存在，K, Rb, Cs, Ba, Pb2+, Sr, Eu2+</p></li></ol><p>*<em>岩石中元素的分配系数（Di）  *</em>用于研究微量元素在矿物集合体（岩石）及与之平衡的熔体之间的分配关系，常用岩石中所有矿物的分配系数与岩石中各矿物含量乘积之和表达 。<br>$$<br>D_i=\sum{W_A}{D_i}<br>$$<br>W<sub>A</sub> = 岩石中矿物重量含量<br>D<sub>i</sub>   = 元素i在矿物A中的分配系数</p><p>元素分配系数测定方法，目前应用最广泛的是<u>斑晶-基质法</u>：火山岩中斑晶矿物代表熔体结晶过程中固相，基质或淬火熔体代表熔体相（岩浆）。两相中微量元素比值即为该元素的分配系数。 </p><h4 id="岩浆演化中的元素分配模型"><a href="#岩浆演化中的元素分配模型" class="headerlink" title="岩浆演化中的元素分配模型"></a>岩浆演化中的元素分配模型</h4><p>发生熔融的2种情况：</p><ol><li><p>平衡部分熔融（或称为<strong>批式熔融，batch partial melting</strong> ）：微量元素在固相和熔体之间一直保持平衡，直到聚集到从熔体中迁移出去。</p></li><li><p><strong>分离熔融（fractional partial melting）</strong>：发生部分熔融过程中，形成的熔体连续地移出固相</p><p>实际应用中最常见的是第一种</p></li></ol><p><strong>批式熔融模型</strong>：<br>$$<br>\frac{C_L}{C_O}=\frac{1}{\overline{D_i}(1-F)+F}<br>$$<br>C<sub>L</sub> = 某元素在<strong>熔体</strong>中的含量（ppm）<br>C<sub>o</sub>=某元素在未熔融前<strong>原始岩石</strong>中的含量（ppm）<br>F = 熔融重量比例 ＝ 熔体/(熔体＋残余岩石)<br>D<sub>i</sub> = 总分配系数（各矿物相中该元素分配系数和）</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326163950954.png"  alt="image-20200326163950954"></p><p>D<sub>i</sub>=1.0    随着F变化 C<sub>L</sub>/C<sub>o</sub>=1不变</p><p>D<sub>i</sub>&gt;&gt;1.0    相容元素    A.  部分熔融的熔体中发生贫化，特别是低度部分熔融 (例如F&lt;0.1)<br>B. 贫化的速度随F的增大呈现出变缓的特征。</p><p>D<sub>i</sub>&lt;&lt;1.0    不相容元素    A. 极大量富集在初始产生的极少量熔体中。B. 随着F增加，富集程度减弱。C.其最大的富集浓度不能超出D=0的曲线，当D=0，C<sup>i</sup><sub>L</sub>/C<sup>i</sup><sub>O</sub> =1/F</p><p>对于强不相容元素D<sub>i</sub>趋近于0，</p><p>C<sub>L</sub>/C<sub>o</sub>=1/F     <strong>应用意义：如果我们知道一个强烈不相容元素在岩浆和源岩中含量， 我们就可以估算部分熔融程度F。强不相容元素高度集中在初始产生的极少量熔体中，随着F增高而被稀释</strong>。</p><p>熔融程度F趋近于0时，C<sup>i</sup><sub>L</sub>/C<sup>i</sup><sub>O</sub> =1/D<sub>i</sub>即微量元素在所形成的熔体中的富集或贫化程度最大。随着F的增大，熔体中微量元素的富集和贫化程度逐渐减少。<strong>应用意义：如果我们知道C<sub>L</sub> 和岩浆起源于一个低度部分熔融过程，有D<sub>i</sub>我们就可以估算此元素在源区 (C<sub>o</sub>)中的含量</strong>。</p><p>F趋近于1，C<sup>i</sup><sub>L</sub>/C<sup>i</sup><sub>O</sub> =1。岩石全熔，即熔体中所有元素的浓度与母岩中该元素的浓度趋于一致。没有分配的意义。</p><h4 id="批式熔融计算实例："><a href="#批式熔融计算实例：" class="headerlink" title="批式熔融计算实例："></a>批式熔融计算实例：</h4><p>计算Rb和Sr在玄武岩部分熔融过程中含量</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326171056460.png"  alt="image-20200326171056460"></p><ol><li>把矿物含量(Mode)换算为矿物重量比例(Wol、Wcpx等)。</li><li>应用Di =WA Di（上面的分配系数公式），计算Rb和Sr的总分配系数。</li></ol><p>查表获得元素在矿物中的分配系数Di</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326171658590.png"  alt="image-20200326171658590"></p><p>橄榄玄武岩 = 18% Ol＋37% Cpx＋45% Pl   (wt%)</p><p>D<sub>Rb</sub> = 0.045<br>D<sub>Sr</sub> = 0.848</p><ol start="3"><li><p>用公式计算C<sub>L</sub>/C<sub>o</sub>，用公式计算不同部分熔融程度（F＝0~1)的Rb和Sr含量比值</p></li><li><p>投图</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326172847404.png"  alt="image-20200326172847404"></p></li><li><p>解释：在玄武岩批式熔融产生岩浆中，Rb显示强烈的不相容性；Sr则弱不相容。</p></li></ol><h4 id="元素分配模型的实际意义"><a href="#元素分配模型的实际意义" class="headerlink" title="元素分配模型的实际意义"></a>元素分配模型的实际意义</h4><p>研究岩石成因和演化过程</p><ol><li><p>揭示源岩成分特征</p></li><li><p>揭示岩浆作用过程，利用已有的各种模型，揭示部分熔融、岩浆混合、分离结晶、同化混染等。</p></li></ol><h3 id="稀土元素处理"><a href="#稀土元素处理" class="headerlink" title="稀土元素处理"></a>稀土元素处理</h3><p>57-71号：15个元素+Y=16个元素<br>La,Ce,Pr,Nd, Pm, Sm, Eu, Gd,Tb, Dy, Ho, Er, Tm, Yb, Lu＋Y</p><p><strong>共性：</strong></p><ol><li><p>它们的原子结构相似；</p></li><li><p>离子半径相近(REE3＋ 离子半径1.06Å ～0.84 Å，Y3＋为0.89 Å）；</p></li><li><p>它们在自然界密切共生。</p></li></ol><p><strong>分组：</strong></p><p>轻稀土LREE：La,Ce,Pr,Nd, Pm, Sm, Eu,  </p><p>重稀土HREE：Gd,Tb, Dy, Ho, Er, Tm, Yb, Lu＋Y</p><p><strong>Oddo-Harkins效应</strong>（太阳系和地球都有此规律）</p><ul><li>原子序数为偶数的元素的丰度大大高于相邻原子序数为奇数的元素。</li><li>具有偶数质子数（A）或偶数中子数（N）的核素丰度总是高于具有奇数A或N的核素。</li><li>这一规律称为奥多一哈根斯法则，亦即奇偶规律。</li></ul><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326173844786.png"  alt="image-20200326173844786"></p><p>Oddo-Harkins效应产生原因</p><ol><li>受原子核结构控制，当质子与中子数比例适当，原子核稳定，元素分布就广。例如16O，24Mg，28Si等，最稳定，元素丰度高。</li><li>随着原子序数增大，中子数增加比质子数快，原子核趋于不稳定，元素在自然界丰度低。</li></ol><p><strong>稀土元素标准化</strong>：某一参照物质作为标准化数据, 例如, 用原始地幔、MORB等，能够清楚地显示不同矿物间REE的分异程度。  </p><p>稀土组成图具体做法：</p><ol><li><p>将样品含量(ppm)分别除以球粒陨石(或者其他数据，如MORB)，得到标准化后数据</p></li><li><p>14个元素按照原子序数排列作为横坐标（注意没有Pm和Y含量，也可以留有Pm的位置、数据为空）</p></li><li><p>纵坐标以对数表示</p></li></ol><p><strong>为什么用球粒陨石?</strong></p><p>球粒陨石的非挥发性成分=原始太阳星云的平均化学成分 = 地球整体成分</p><p><strong>为什么需要标准化？</strong></p><ol><li>消除奇偶效应，曲线平滑,</li><li>利于对比,可以直观鉴别岩石样品相对于球粒陨石的分异程度.</li><li>有利于直观展示岩石的类型和成因.</li></ol><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326174530294.png"  alt="image-20200326174530294" title="西藏钾质超钾质岩石稀土元素组成球粒陨石标准化图，标准化数据根据Boynton（1984）"></p><p>原子序数增大，相容性增强，不相容性减弱</p><h4 id="REE标准化后的重要参数"><a href="#REE标准化后的重要参数" class="headerlink" title="REE标准化后的重要参数"></a>REE标准化后的重要参数</h4><ol><li><p>稀土元素总含量∑REE能反映出<strong>各类岩石的特征</strong>。因此ΣREE对于判断岩石的源岩特征和区分岩石类型有意义。</p><p>1）一般在超基性岩、基性岩中ΣREE较低，在酸性岩和碱性岩中ΣREE较高；<br>2）沉积岩中砂岩和页岩的ΣREE较高，碳酸盐岩的ΣREE较低。</p></li><li><p>轻、重稀土元素的比值    比值=LREE/HREE或=ΣCe/ΣY</p><p>这一参数能较好地反映REE的<strong>分异程度</strong>和指示<strong>部分熔融残留体或岩浆早期结晶矿物的特征</strong>。</p><p> ΣCe碱性较ΣY强，随岩浆作用的演化，ΣCe/ΣY比值逐渐增大，即ΣCe在岩浆作用晚期富集。 </p></li></ol><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326175619187.png"  alt="image-20200326175619187" title="原始岩浆成分演化过程中REE的分馏特征 "></p><ol start="3"><li><p>稀土元素之间的比值</p><ol><li><p>(La/Yb)<sub>N</sub>、(La/Lu)<sub>N</sub>、(Ce/Yb)<sub>N</sub>  (下标N表示为标准化后的比值)</p><p>反映REE球粒陨石标准化图解中曲线总体斜率，表征LREE和HREE的分异程度。</p></li><li><p>(La/Sm)<sub>N</sub>、(Gd/Lu)<sub>N</sub></p><p>表示分馏程度， 例如： (La/Sm)<sub>N</sub>比值越大反映LREE越富集<br>孙贤鉥等据此将洋中脊玄武岩划分为三种类型：<br>(La/Sm)<sub>N</sub>＞1 为P型，即富集型，即地幔热柱或异常型；<br>(La/Sm)<sub>N</sub>≈1为T型，即过渡型；<br>(La/Sm)<sub>N</sub>＜1为N型，即正常型，对应的REE分布型式为亏损型。</p></li></ol></li><li><p>Eu异常</p><p>斜长石的结晶——不同矿物具有不同的REE分配系数，斜长石对Eu的分配系数远远大于其它REE，在各类岩浆岩中Eu异常的产生常与斜长石的分离结晶有关<br>例如：<br>1.在岩浆分离结晶过程中，斜长石的大量晶出将导致残余熔体中形成明显负异常。<br>2.在部分熔融中，斜长石的熔融导致熔体中Eu正异常。</p><p>Eu<sub>2+</sub>  可以与Ca和Sr类质同象，倾向于进入斜长石晶格</p><p><strong>月岩的Eu异常特征</strong></p><p>原始月球玄武岩岩浆，先发生了斜长石堆晶岩石(月球高地)，剩余的演化后形成了月球玄武岩。堆晶和演化的充分互补。</p></li></ol><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326202147929.png"  alt="image-20200326202147929"></p><ol start="5"><li><p>不用矿物相对REE模式的控制</p><p>主要依据REE在这些元素中的分配系数，有的导致REE分异，有的不导致REE分异</p><p>玄武岩和安山岩中矿物/熔体间REE的分配系数（据Shnetzler和Philpotts,1970）</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326202718333.png"  alt="image-20200326202718333"></p></li></ol><p>玄武岩和安山岩中矿物/熔体间REE的分配系数（据Shnetzler和Philpotts,1970）</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326202902011.png"  alt="image-20200326202902011"></p><p>​    英安岩和流纹岩中矿物/熔体间REE的分配系数（据Hanson,1978）</p><ol start="6"><li>特殊的REE模式——四组分效应<img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326204020382.png"  alt="image-20200326204020382"></li></ol><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326204036854.png"  alt="image-20200326204036854"></p><h2 id="微量元素数据处理与解释（微量）"><a href="#微量元素数据处理与解释（微量）" class="headerlink" title="微量元素数据处理与解释（微量）"></a>微量元素数据处理与解释（微量）</h2><h3 id="微量元素处理方法"><a href="#微量元素处理方法" class="headerlink" title="微量元素处理方法"></a>微量元素处理方法</h3><h4 id="多元素标准化图解"><a href="#多元素标准化图解" class="headerlink" title="多元素标准化图解"></a>多元素标准化图解</h4><p>属于REE标准化图解的扩展和普及化，最早用于玄武岩，现在可以用于所有岩石（岩浆岩和沉积岩）类型。 </p><p>标准化数值——原始地幔、球粒陨石，或者MORB。</p><p>作图的意图——比较样品与标准化数据之间的偏离程度</p><p>目前常用作标准化的原始地幔顺序和成分（primitive/primordial mantle）</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417165119864.png"  alt="image-20200417165119864"></p><p>不相容性  强 —-&gt; 弱</p><p>蜘蛛图元素组成：</p><ol><li>都是不相容元素，从左到右，不相容性逐渐减弱</li><li>包括大离子亲石元素（LILs）、高场强元素（HFSE）、REE</li></ol><p>目前常用顺序：</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417170327615.png"  alt="image-20200417170327615"></p><p><strong>作图方法</strong>：</p><p>同REE相似，分别除以标准化数值，再作图。注意主量元素，需要从wt.%换算到ppm, 再除以标准化值<br>K=K<sub>2</sub>O*10000*0.83013/250<br>Ti=TiO<sub>2</sub>*10000*0.5995/1300<br>P=P<sub>2</sub>O<sub>5</sub>*10000*0.43646/95</p><p>这里K<sub>2</sub>O、 TiO<sub>2</sub>、 P<sub>2</sub>O<sub>5</sub> 均代入主量元素（wt.%）结果</p><p><strong>为什么岛弧火山岩出现Nb、Ta的负异常？</strong></p><p>正常岛弧火山岩由源自俯冲板片脱水产生的流体交代地幔楔发生部分熔融而形成，这种富水的流体亏损高场强元素（HFSE），如Nb(Ta)、Ti、P等元素，这些元素的流体/岩石分配系数很小（&lt;&lt;1)，因此，在流体交代地幔楔形成的正常岛弧火山岩中出现显著的Nb（Ta）、Ti负异常</p><p><strong>岛弧火山岩成因</strong></p><ol><li>俯冲板片相变释放的流体加入到上覆的地幔楔；</li><li>流体携带了俯冲板片析出的活动元素 (K, Rb, Sr, Th等元素）；【溶于水的】</li><li>导致地幔楔熔融的岛弧岩浆富集上述元素。</li><li>同时, HFSEs相对亏损。</li><li>富集LILEs的地幔楔再部分熔融，高含量+不相容 </li></ol><p><strong>岩浆岩出现Nb、Ta、Ti、P负异常引申含义</strong></p><p>具有大陆地壳物质的参与，参与的物质由交代流体带来，流体是富集K, Rb, Sr, Th，亏损 Nb、Ta、Ti和P。</p><h4 id="元素或者元素比值投点图"><a href="#元素或者元素比值投点图" class="headerlink" title="元素或者元素比值投点图"></a>元素或者元素比值投点图</h4><p>二元图</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174429120.png"  alt="image-20200417174429120"></p><p>元素比值图</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174527378.png"  alt="image-20200417174527378"></p><p>三角图</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174541862.png"  alt="image-20200417174541862"></p><h3 id="微量元素图解研究用途"><a href="#微量元素图解研究用途" class="headerlink" title="微量元素图解研究用途"></a>微量元素图解研究用途</h3><h4 id="岩石分类"><a href="#岩石分类" class="headerlink" title="岩石分类"></a>岩石分类</h4><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174740771.png"  alt="image-20200417174740771"></p><p><em>横坐标代表全碱，纵坐标代表Si</em></p><h4 id="岩石成因"><a href="#岩石成因" class="headerlink" title="岩石成因"></a>岩石成因</h4><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417195008894.png"  alt="image-20200417195008894"></p><p><strong>讨论岩石成因与演化过程</strong></p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417233527967.png"  alt="image-20200417233527967"></p><p>Xu et al，2001，Geology</p><p><strong>探讨岩石源区成分和成因</strong></p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417233620122.png"  alt="image-20200417233620122"></p><p>Zhao et al，2009，Lithos</p><p><strong>判断岩石成因与演化过程</strong></p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417233820423.png"  alt="image-20200417233820423"></p><p>Zhao et al，2009，Lithos</p><h4 id="鉴别岩石形成的构造环境"><a href="#鉴别岩石形成的构造环境" class="headerlink" title="鉴别岩石形成的构造环境"></a>鉴别岩石形成的构造环境</h4><p>花岗岩相关的Pearce构造环境判别图</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417234829803.png"  alt="image-20200417234829803"></p><p>与玄武岩相关的</p><p><img src="/" class="lazyload" data-src="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417234923185.png"  alt="image-20200417234923185"></p><p>元素的构造环境鉴别小结：</p><ol><li>图解是形象的鉴别方法：<br>——是基于归纳总结不同的、已知构造环境的岩石之地球化学特征，进行统计制作的；<br>——简便、直观、可操作性强；<br>——但不要绝对化。</li><li>元素地球化学应用本质：<br>——元素成分决定于矿物相-熔体成分；<br>——元素成分决定于体系的成分与过程<br>——体系成分是第一性，构造环境是进一步推知的</li></ol>]]></content>
      
      
      <categories>
          
          <category> 地球化学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地球化学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript仿计算器案例</title>
      <link href="/2020/03/25/JavaScript%E4%BB%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/03/25/JavaScript%E4%BB%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>名称：仿windows计算器</p><p>功能：</p><ol><li>实现单击按钮录入数字</li><li>实现基础四则运算功能，并添加必要的异常处理，例如，除数为零</li><li>实现小数点功能并添加异常处理：小数点只能出现一次</li><li>实现正负号功能</li><li>实现退位功能，已经是最后一位时，显示框显示为零</li><li>清屏功能</li></ol><p>使用的知识点：</p><ol><li>利用大量的自定义函数实现业务逻辑</li><li>灵活运用事件及事件处理</li><li>培养异常处理的编程方法</li><li>培养并实践利用不同思路实现编程</li></ol><p>综合练习的目的：</p><ol><li>将css、html和js有效的进行技术组合，实现业务功能</li><li>锻炼和培养编程思想，解决问题的能力和方法</li><li>锻炼和培养利用多种编程思路，完成预先设定的目标</li></ol><h2 id="页面实现"><a href="#页面实现" class="headerlink" title="页面实现"></a>页面实现</h2><p>首先将计算器基本HTML框架建立，并设置css样式、写入js。实现数字输入与显示。</p><p>为了使代码更集中，此处将css和js写入html内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>calculator<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0px;</span><br><span class="line">            padding: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">       div&#123;</span><br><span class="line">            width: 611px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 33%;</span><br><span class="line">            top: 30%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器中选中button的写法*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">'button'</span>]</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            margin-right: 49px;</span><br><span class="line">            margin-top: 40px;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">'text'</span>]</span>&#123;</span></span><br><span class="line">            width: 560px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            text-align: right;</span><br><span class="line">            font-size: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            border: 1px solid;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">cal_1</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取输入框控件，默认为0，并将其定义为键盘不可输入状态</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">'text_o'</span>);</span></span><br><span class="line">        num.value=0;</span><br><span class="line"><span class="actionscript">        num.disabled=<span class="string">'disabled'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过标签获取所有的input，包括button按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oButton=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;oButton.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义按钮单击的函数</span></span></span><br><span class="line"><span class="actionscript">            oButton[i].onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="keyword">this</span>.value))&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 若判断为单击数字按钮则显示数字</span></span></span><br><span class="line"><span class="actionscript">                    num.value=(num.value+<span class="keyword">this</span>.value)*<span class="number">1</span>; <span class="comment">//使用了隐式转换，避免输入框第一个数字是0</span></span></span><br><span class="line"><span class="actionscript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">switch</span>(<span class="keyword">this</span>.value)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'C'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'←'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'+/-'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'/'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'+'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'-'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'×'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'.'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">case</span> <span class="string">'M'</span>:</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">break</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"cal_1()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div2'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">'text_o'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div3'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"C"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"←"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"+/-"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"/"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"×"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"6"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"-"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"7"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"8"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"9"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"+"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"."</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"="</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"M"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/03/25/JavaScript%E4%BB%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%A1%88%E4%BE%8B/image-20200324162255682.png"  alt="image-20200324162255682" title="效果图"></p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>对javascript代码添加各项功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cal_1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 获取输入框控件，默认为0，并将其定义为键盘不可输入状态</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">'text_o'</span>);</span><br><span class="line">num.value=<span class="number">0</span>;</span><br><span class="line">num.disabled=<span class="string">'disabled'</span>;</span><br><span class="line"><span class="comment">// 通过标签获取所有的input，包括button按钮</span></span><br><span class="line"><span class="keyword">var</span> oButton=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">var</span> num_temp;</span><br><span class="line"><span class="keyword">var</span> symbol;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;oButton.length; i++)&#123;</span><br><span class="line">        <span class="comment">// 定义按钮单击的函数</span></span><br><span class="line">oButton[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="keyword">this</span>.value))&#123;</span><br><span class="line">                <span class="comment">// 若判断为单击数字按钮则显示数字</span></span><br><span class="line">num.value=(num.value+<span class="keyword">this</span>.value)*<span class="number">1</span>; <span class="comment">// 隐式转换</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 其他按钮的显示</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="keyword">this</span>.value)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">num.value=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'←'</span>:</span><br><span class="line">                        <span class="comment">// 回退，通过substr去掉最后一个字符</span></span><br><span class="line">num.value=num.value.substr(<span class="number">0</span>,num.value.length<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(num.value.length==<span class="number">0</span>)&#123;</span><br><span class="line">num.value=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+/-'</span>:</span><br><span class="line">                        <span class="comment">// 正负号添加</span></span><br><span class="line">num.value=num.value*(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">'0'</span>;</span><br><span class="line">symbol=<span class="keyword">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">'0'</span>;</span><br><span class="line">symbol=<span class="keyword">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">'0'</span>;</span><br><span class="line">symbol=<span class="keyword">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'×'</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">'0'</span>;</span><br><span class="line">symbol=<span class="keyword">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'='</span>:</span><br><span class="line"><span class="keyword">switch</span>(symbol)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)/<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)+<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)-<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'×'</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)*<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'.'</span>:</span><br><span class="line">                        <span class="comment">// 判断是否存在小数点，如果不存在才添加</span></span><br><span class="line"><span class="keyword">if</span>(!num.value.indexOf(<span class="string">'.'</span>))&#123;</span><br><span class="line">num.value=num.value+<span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                        <span class="comment">// window.location获取当前页面 href跳转页面</span></span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">'https://www.rice-and-bran.site'</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完善细节"><a href="#完善细节" class="headerlink" title="完善细节"></a>完善细节</h3><p>给鼠标悬浮在按键上添加背景色改变的效果，并将输入框字符向右缩进一点点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">'button'</span>]</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#a8a8a8</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">'text'</span>]</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">560px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: right;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX数学公式输入</title>
      <link href="/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/"/>
      <url>/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LaTeX（音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。</p></blockquote><p><em><a href="https://baike.baidu.com/item/LaTeX/1212106?fr=aladdin" target="_blank" rel="noopener">摘自百度百科LaTeX</a></em></p><p>Typora支持LaTeX格式输入数学公式，一起来试试吧！</p><p><img src="/" class="lazyload" data-src="/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/2018041621294865.png"  alt="2018041621294865"></p><p><img src="/" class="lazyload" data-src="/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/20180416213036844.png"  alt="20180416213036844"></p><p><img src="/" class="lazyload" data-src="/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/20180416213119987.png"  alt="20180416213119987"></p><p><img src="/" class="lazyload" data-src="/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/20180416213126857.png"  alt="20180416213126857"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请SSL证书并安装到Nginx服务器上</title>
      <link href="/2020/03/16/%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6%E5%B9%B6%E5%AE%89%E8%A3%85%E5%88%B0Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2020/03/16/%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6%E5%B9%B6%E5%AE%89%E8%A3%85%E5%88%B0Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>数据加密传输，是HTTP和HTTPS之间的本质性区别。当你使用Chrome浏览器访问一个HTTP网站的时候，你会发现浏览器会对该HTTP网站显示“不安全”的安全警告，提示用户当前所访问的网站可能会存在风险。为了让自己的网站加上使用https协议，你需要这样做：</p><h2 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h2><p>登录阿里云，搜索SSL证书，选择免费型DV SSL，下单，填写信息，进行审核。审核通过后将证书下载到本地。</p><h2 id="将SSL证书安装到Nginx服务器上"><a href="#将SSL证书安装到Nginx服务器上" class="headerlink" title="将SSL证书安装到Nginx服务器上"></a>将SSL证书安装到Nginx服务器上</h2><p>以CentOS 7为例。</p><p>下载的证书包含.pem的证书文件和.key的证书密钥文件</p><p><code>ssh root@aliyun</code>登录到阿里云服务器（如何设置ssh免密登录可以查看hexo搭建到云服务器上的博文），在Nginx安装目录（默认Nginx安装目录为/usr/local/nginx/conf）下<strong>创建cert目录</strong>，并将下载的证书文件和密钥文件拷贝到cert目录中。</p><p>这里通过本地scp<strong>上传证书</strong>文件(自行替换本地文件路径和服务器名称)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp 本地文件路径&#x2F;xxx.key root@aliyun:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;cert</span><br><span class="line">scp 本地文件路径&#x2F;xxx.pem root@aliyun:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;cert</span><br></pre></td></tr></table></figure><p><strong>修改Nginx安装目录/conf/nginx.conf文件</strong></p><p>找到以下配置信息并修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  www.rice-and-bran.site; &#x2F;&#x2F;添加域名</span><br><span class="line">    ssl_certificate      cert&#x2F;3606559_www.rice-and-bran.site.pem; &#x2F;&#x2F;添加证书文件路径</span><br><span class="line">    ssl_certificate_key  cert&#x2F;3606559_www.rice-and-bran.site.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; &#x2F;&#x2F;修改ssl_ciphers</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; &#x2F;&#x2F;修改protocols，若没有则添加</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   html; &#x2F;&#x2F;若搭建好博客则输入博客路径</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存nginx.conf文件后退出</p><p>执行以下命令<strong>重启Nginx服务器</strong></p><p>若没有<strong>将nginx添加在Linux环境变量中</strong>，可以执行以下代码先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>记得在阿里云服务器中找到安全组管理，添加443端口</p><p>over，此时输入通过https协议访问服务器，不用担心安全警告了！</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> SSL证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理笔记</title>
      <link href="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="计算机层次与编程语言"><a href="#计算机层次与编程语言" class="headerlink" title="计算机层次与编程语言"></a>计算机层次与编程语言</h3><h4 id="程序翻译与程序解释"><a href="#程序翻译与程序解释" class="headerlink" title="程序翻译与程序解释"></a>程序翻译与程序解释</h4><p>第一种程序语言执行过程：将较为高级的计算机语言l1转化为较为低级的计算机语言l0（计算机实际执行的语言），这一转化过程称为程序翻译，翻译的工具称为编译器。然后交给计算机执行。</p><p>第二种程序语言执行过程：先用较为低级的计算机语言l0实现一个程序（解释器），将高级语言l1作为输入，通过该程序转化为较为低级的计算机语言l0。这一过程称为程序解释。</p><ul><li>计算机执行的指令都是l0</li><li>翻译过程生成新的l0程序，解释过程不生成新的l0程序</li><li>解释过程由l0编写的解释器去解释l1程序</li></ul><p>翻译型语言：C/C++、Object-C、Golang等</p><p>解释型语言：Python、Php、Javascript等</p><p>Java、C#属于翻译+解释型语言，例如Java程序会先编译成JVM字节码，然后再解释成机器码执行。</p><h4 id="计算机的层次"><a href="#计算机的层次" class="headerlink" title="计算机的层次"></a>计算机的层次</h4><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200313214215583.png"  alt="image-20200313214215583"></p><p><strong>硬件逻辑层</strong></p><p>由门、触发器等逻辑电路组成</p><p><strong>微程序机器层</strong></p><p>编程语言是微指令集，微指令所组成的微程序直接交由硬件执行</p><p><strong>传统机器层</strong></p><p>编程语言是CPU指令集（机器指令），和硬件直接相关，不同架构CPU使用不同的CPU指令集</p><p><em>一条机器指令对应一个微程序，一个微程序对应一组微指令</em></p><p><strong>操作系统</strong></p><p>向上提供了简易的操作界面，向下对接了指令系统，管理硬件资源，操作系统是位于软件和硬件中的适配层</p><p><strong>汇编语言层</strong></p><p>编程语言是汇编语言，汇编语言可以翻译成可直接执行的机器语言，完成翻译的过程的程序就是汇编器</p><p><strong>高级语言层</strong></p><p>编程语言为广大程序员所接受的高级语言，高级语言的类别非常多，有几百种</p><p><strong>应用层</strong></p><p>满足计算机针对某种用途而专门设计，各种应用程序</p><h3 id="计算机的计算单位"><a href="#计算机的计算单位" class="headerlink" title="计算机的计算单位"></a>计算机的计算单位</h3><p><strong>容量单位</strong></p><p>在物理层面，高低电平记录信息，0/1表示bit（比特位）。</p><p>1Byte=8bits KB MB GB TB PB…</p><p><strong>网络速度</strong></p><p>Mbps=Million bits per second</p><p><strong>CPU速度</strong></p><p>CPU的速度一般体现为CPU的时钟频率，CPU的时钟频率单位一般是Hz（每秒钟周期变动重复次数的计量）</p><h3 id="计算机的字符与编码集"><a href="#计算机的字符与编码集" class="headerlink" title="计算机的字符与编码集"></a>计算机的字符与编码集</h3><h4 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h4><ul><li>使用7个bits就可以完全表示ASCII码</li><li>包括95个可打印字符</li><li>33个不可打印字符（包括控制字符）</li></ul><p><em>33+95=128=2<sup>7</sup></em></p><p>但是很多符号无法表示，所以诞生了<strong>Extended ASCII码</strong>，包括常见数学运算符，带音标的欧洲字符，表格符等其他常用符等。</p><h4 id="字符编码集的国际化"><a href="#字符编码集的国际化" class="headerlink" title="字符编码集的国际化"></a>字符编码集的国际化</h4><p>未解决语言多样性，体系不同，不以有限字符组合等问题，中日韩语言最为复杂</p><p><strong>中文编码集</strong></p><p>GB2312（《信息交换用汉字编码字符集——基本集》），一共收录了7445个字符，包括6763个汉字和682个其他符号。</p><p>1995年，GBK(《汉字内码扩展规范》)，向下兼容GB2312，向上支持国际ISO标准，收录了21003个汉字，支持全部中日韩汉字。</p><p>Unicode，兼容全球的字符集，定义了世界通用的符号集，UTF-<em>实现了编码，*</em>UTF-8**以字节为单位对Unicode进行编码。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><strong>冯诺依曼机</strong>组成包括：存储器、运算器、控制器和I\O设备</p><h3 id="计算机的总线"><a href="#计算机的总线" class="headerlink" title="计算机的总线"></a>计算机的总线</h3><p><strong>总线</strong> 为了解决不同设备之间的通信问题，有usb、PCI总线、ISA总线等等</p><p>总线 分为<strong>片内总线</strong>和<strong>系统总线</strong>，片内总线就是芯片内部的总线，寄存器与运算器、控制器之间连接；系统总线是连接计算机外部各种设备的总线，又可分为数据总线、地址总线、控制总线。</p><p><strong>数据总线</strong>：双向传输各个部件的数据信息；数据总线的位数（总线宽度）是数据总线的重要参数，位数一般与CPU位数相同（32位、64位）。</p><p><strong>地址总线</strong>：指定源数据或目的数据在内存中的地址；地址总线的位数与存储单元有关。地址总线位数=n，寻址范围：0~2<sup>n</sup>。</p><p><strong>控制总线</strong>：控制总线是用来发出各种控制信号的传输线；控制信号经由控制总线从一个组件发给另一个组件；控制总线可以监视不同组件之间的状态（就绪/未就绪）。</p><h4 id="总线的仲裁"><a href="#总线的仲裁" class="headerlink" title="总线的仲裁"></a>总线的仲裁</h4><p>用来决定不同设备使用总线的优先顺序，解决总线使用权的冲突问题</p><p><strong>仲裁方法</strong>：链式查询、计数器定时查询、独立请求</p><p><strong>链式查询</strong>：各个设备通过串联电路连接，通过连接顺序决定使用总线的优先级。好处：电路复杂度低、仲裁方式简单；坏处：优先级低的设备难以获得总线使用权，对电路故障敏感。</p><p><strong>计时器定时查询</strong>：仲裁控制器对设备编号并使用计数器累计计数，接收到仲裁信号后，往所有设备发出计数值，计数值与设备编号一致则获得总线使用权。</p><p><strong>独立请求</strong>：每个设备均有总线独立连接仲裁器，设备可单独向仲裁器发送请求和接收请求，当同时收到多个请求信号，仲裁器有权按优先级分配使用权。好处：响应速度快、优先顺序可动态改变；坏处：设备连线多，总线控制复杂。</p><h3 id="计算机的输入输出设备"><a href="#计算机的输入输出设备" class="headerlink" title="计算机的输入输出设备"></a>计算机的输入输出设备</h3><h4 id="常见的输入输出设备"><a href="#常见的输入输出设备" class="headerlink" title="常见的输入输出设备"></a>常见的输入输出设备</h4><p>字符输入设备：键盘 ；图形输入设备：鼠标、数位板、扫描仪等</p><p>图像输出设备：显示器、打印机、投影仪</p><h4 id="输入输出接口的通用设计"><a href="#输入输出接口的通用设计" class="headerlink" title="输入输出接口的通用设计"></a>输入输出接口的通用设计</h4><p>需要包含数据线、状态线、命令线、设备选择线。</p><p><strong>数据线</strong>：是I/O设备与主机之间进行数据交换的传递线，分为单线传输和双向传输</p><p><strong>状态线</strong>：I/O设备状态向主机报告的信号线，查询设备是否已经正常连接并就绪，查询设备是否已经被占用</p><p><strong>命令线</strong>：CPU向设备发送命令的信号线，发送读写信号，发送启动停止信号</p><p><strong>设备选择线</strong>：主机选择I/O设备进行操作的信号线，对连在总线上的设备进行选择</p><h4 id="CPU与I-O设备的通信"><a href="#CPU与I-O设备的通信" class="headerlink" title="CPU与I/O设备的通信"></a>CPU与I/O设备的通信</h4><p>分为程序中断、DMA（直接存储器访问）</p><p><strong>程序中断</strong>：当外围I/O设备就绪时，向CPU发出中断信号，CPU有专门的电路响应中断信号。简图</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200320150931915.png"  alt="image-20200320151023181"></p><p>提供低速设备通知CPU的一种异步的方式，CPU可以在高速运转同时兼顾低速设备的响应。但是频繁中断，CPU使用效率低</p><p><strong>DMA（直接存储器访问）</strong>：DMA直接连接主存与I/O设备，DMA工作时不需要CPU参与</p><p>当主存与I/O设备交换信息时，不需要中断CPU，可以提高CPU的效率</p><h3 id="计算机存储器概览"><a href="#计算机存储器概览" class="headerlink" title="计算机存储器概览"></a>计算机存储器概览</h3><h4 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h4><p>按存储介质分为：半导体存储器和磁存储器</p><p>按存取方式分类：随机存储器（RAM）、串行存储器、只读存储器（ROM）</p><h4 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h4><p>缓存、主存、辅存</p><p><strong>缓存-主存层次</strong>：</p><ul><li>原理：局部性原理</li><li>实现：在CPU于主存之间增加一层速度快（容量小）的Cache</li><li>目的：解决主存速度不足的问题</li></ul><blockquote><p>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</p></blockquote><p><strong>主存-辅存层次</strong>：</p><ul><li>原理：局部性原理</li><li>实现：主存之外增加辅助存储器（磁盘、SD卡、U盘等）</li><li>目的：解决主存容量不足的问题</li></ul><h3 id="计算机的主存储器与辅助存储器"><a href="#计算机的主存储器与辅助存储器" class="headerlink" title="计算机的主存储器与辅助存储器"></a>计算机的主存储器与辅助存储器</h3><h4 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h4><p>RAM(随机读取存储器：Random Access Memory)，通过电容存储数据，必须隔一段时间刷新一次，如果掉电，那么一段时间后将丢失所有数据</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200320154612678.png"  alt="主存与计算机交互的结构" title="主存与计算机交互的结构"></p><p>32位系统地址总线只有32位，所以寻址范围只有2<sup>32</sup>，最大支持内存只有4GB</p><p>32位系统    2<sup>32</sup>=4 x 2<sup>30</sup>=4GB</p><p>64位系统    2<sup>64</sup>= 2<sup>34</sup> x 2<sup>30</sup>= 2<sup>34</sup> GB</p><h4 id="辅助存储器"><a href="#辅助存储器" class="headerlink" title="辅助存储器"></a>辅助存储器</h4><p>磁盘：表面是可磁化的硬磁特性材料，移动磁头径向运动读取磁道信息</p><h3 id="计算机的高速缓存"><a href="#计算机的高速缓存" class="headerlink" title="计算机的高速缓存"></a>计算机的高速缓存</h3><h4 id="高速缓存的工作原理"><a href="#高速缓存的工作原理" class="headerlink" title="高速缓存的工作原理"></a>高速缓存的工作原理</h4><p><strong>字</strong>：是指存放在一个存储单元中的二进制代码组合</p><p><strong>字块</strong>：存储在连续的存储单元中而被看作是一个单元的一组字</p><p>假设一个字有32位，一个字块共B个字，主存共M个字块，B x M = 主存总字数</p><p>B x M x 32 = 主存总容量（bits）</p><p>字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址</p><p>2<sup>m</sup>=M, 2<sup>b</sup>=B</p><p><em>例子</em>：假设主存用户容量空间为4G，字块大小为4M，字长为32位，则对于字地址中的块地址m和块内地址b的位数，至少应该是多少？</p><p>4G=4096M</p><p>字块数：4096÷4=1024</p><p>字块地址m：log<sub>2</sub>1024=10</p><p>块内字数：4M÷32bit=1048576</p><p>块内地址b：log<sub>2</sub>1048576=20</p><p><strong>命中率</strong>是衡量缓存的重要性能指标。理论上CPU每次都能从高速缓存存取数据的时候，命中率为1。</p><p>访问主存的次数：N<sub>m</sub>; 访问Cache次数：N<sub>c</sub></p><p>命中率h：<br>$$<br>h=\frac{N_c}{N_c+N_m}<br>$$<br><strong>访问效率</strong>也能衡量缓存的性能</p><p>访问效率：e；访问主存时间：t<sub>m</sub>；访问缓存的时间：t<sub>c</sub>；访问Cache-主存系统平均时间：</p><p>t<sub>a</sub>=ht<sub>c</sub>+(1-h)t<sub>m</sub></p><p>访问效率e：<br>$$<br>e=\frac{t_c}{t_a}=\frac{t_c}{ht_c+(1-h)t_m}<br>$$</p><h4 id="高速缓存的替换策略（具体可跳转至原理实践章节）"><a href="#高速缓存的替换策略（具体可跳转至原理实践章节）" class="headerlink" title="高速缓存的替换策略（具体可跳转至原理实践章节）"></a>高速缓存的替换策略（具体可跳转至原理实践章节）</h4><p>当CPU所需数据不在高速缓存中，需要从主存载入所需数据</p><p>替换算法：随机算法，先进先出算法（FIFO）、最不经常使用算法（LFU）、最近最少使用算法（LRU）</p><p><strong>先进先出算法（FIFO）</strong>：把高速缓存看作是一个先进先出的队列，优先替换最先进入队列的字块</p><p><strong>最不经常使用算法（LFU）</strong>：优先淘汰最不经常使用的字块，需要额外的空间记录字块的使用频率</p><p><strong>最近最少使用算法（LRU）</strong>：优先淘汰一段时间内没有使用的字块。有多种实现方法，一般使用双向链表，把当前访问节点置于链表前面（保证链表头部节点是最近使用的）</p><h3 id="计算机的指令系统"><a href="#计算机的指令系统" class="headerlink" title="计算机的指令系统"></a>计算机的指令系统</h3><h4 id="机器指令的形式"><a href="#机器指令的形式" class="headerlink" title="机器指令的形式"></a>机器指令的形式</h4><p>机器指令主要由两个部分组成：操作码和地址码字段。操作码指明指令所要完成的操作，操作码位数反映了机器操作种类，如2<sup>8</sup>=256种操作；地址码直接给出操作数或者操作数的地址，分三地址指令（地址码字段有三个地址）、二地址指令和一地址指令。</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200327095100477.png"  alt="image-20200327095100477"></p><p>比如加法运算，第1,2个地址指向两个加数，第3个地址指向结果存放处。</p><p>二地址指令就是(addr1)OP(addr2)→(addr1)或(addr2)</p><p><strong>零地址指令</strong>：在机器指令中无地址码，一般是空操作、停机操作、中断返回操作等</p><h4 id="机器指令的操作类型"><a href="#机器指令的操作类型" class="headerlink" title="机器指令的操作类型"></a>机器指令的操作类型</h4><p>数据传输类型：</p><ul><li>寄存器之间、寄存器与存储单元、存储单元之间传送</li><li>数据读取、交换地址数据、清零置一等操作</li></ul><p>算术逻辑类型：</p><ul><li>操作数之间的加减乘除运算</li><li>操作数的与或非等逻辑位运算</li></ul><p>移位操作：</p><ul><li>数据左移（乘2）、数据右移（除2）</li><li>完成数据在算术逻辑单元的必要操作</li></ul><p>控制指令：</p><ul><li>等待指令、停机指令、空操作指令、中断指令等</li></ul><h4 id="机器指令的寻址方式"><a href="#机器指令的寻址方式" class="headerlink" title="机器指令的寻址方式"></a>机器指令的寻址方式</h4><p>对于<strong>指令寻址</strong>可分为顺序寻址和跳跃寻址</p><p>对于<strong>数据寻址</strong>，分为立即寻址、直接寻址、间接寻址</p><p><strong>立即寻址</strong>：指令直接获得操作数，无需访问存储器</p><p><strong>直接寻址</strong>：直接给出操作数在主存的地址，寻找操作数简单，无需计算数据地址</p><p><strong>间接寻址</strong>：指令地址码给出的是操作数地址的地址，需要一次或多次主存来获取操作数</p><table><thead><tr><th align="center">寻址方式</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">立即寻址</td><td align="center">速度快</td><td align="center">地址码位数限制操作数表示范围</td></tr><tr><td align="center">直接寻址</td><td align="center">寻找操作数简单</td><td align="center">地址码位数限制操作数寻址范围</td></tr><tr><td align="center">间接寻址</td><td align="center">操作数寻址范围大</td><td align="center">速度较慢</td></tr></tbody></table><h3 id="计算机的控制器"><a href="#计算机的控制器" class="headerlink" title="计算机的控制器"></a>计算机的控制器</h3><p>控制器是协调和控制计算机运行的。</p><p>控制器包含程序计数器、时序发生器、指令译码器、各种寄存器、总线。其中寄存器又分为指令寄存器、主存地址寄存器、主存数据寄存器、通用寄存器</p><p><strong>程序计数器</strong>：用来存储下一条指令的地址，循环从程序计数器中拿出指令，当指令被拿出时，指向下一条指令。当指令被拿出时，指向下一条指令。</p><p><strong>实习发生器</strong>：用于发送时序脉冲，CPU依据不同的时序脉冲有节奏的进行工作</p><p><strong>指令译码器</strong>：是控制器的主要部件之一，计算机指令由操作码和地址码组成，翻译操作码对应的操作以及控制传输地址码对应的数据</p><p><strong>指令寄存器</strong>：控制器主要部件之一，从主存或高速缓存取计算机指令</p><p><strong>主存地址寄存器</strong>：保存当前CPU正要访问的内存单元的地址</p><p><strong>主存数据寄存器</strong>：保存当前CPU正要读或写的主存数据</p><p><strong>通用寄存器</strong>：暂时存放或传送数据或指令，可保存ALU的运算中间结果，容量比一般专用寄存器要大</p><h3 id="计算机的运算器"><a href="#计算机的运算器" class="headerlink" title="计算机的运算器"></a>计算机的运算器</h3><p>运算器是用来进行数据运算加工的</p><p>运算器包括数据缓冲器、ALU、通用寄存器、状态字寄存器、总线</p><p><strong>数据缓冲器</strong>：分为输入缓冲和输出缓冲，输入缓冲暂时存放外设送过来的数据、输出缓冲暂时存放送往外设的数据</p><p><strong>ALU（算术逻辑单击）</strong>：运算器的主要组成，常见的位运算（左右移、与或非等），算术运算（加减乘除等）</p><p><strong>状态字寄存器</strong>：存放运算状态（条件码、进位、溢出、结果正负等），存放运算控制信息（调试跟踪标记位、允许中断位等）</p><p><strong>通用寄存器</strong>：用于暂时存放或传送数据或指令，可保存ALU的运算中间结果，容量比一般专用寄存器要大</p><h3 id="计算机指令的执行过程"><a href="#计算机指令的执行过程" class="headerlink" title="计算机指令的执行过程"></a>计算机指令的执行过程</h3><h4 id="指令执行过程"><a href="#指令执行过程" class="headerlink" title="指令执行过程"></a>指令执行过程</h4><p>取指令（从缓存取指令，送到指令寄存器）    分析指令（指令译码器译码，发出控制信号，程序计数器+1）    执行指令（装载数据到寄存器，ALU处理数据，记录运算状态，送出运算结果）</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200327231511179.png"  alt="image-20200327231511179" title="指令执行过程"></p><h4 id="CPU的流水线设计"><a href="#CPU的流水线设计" class="headerlink" title="CPU的流水线设计"></a>CPU的流水线设计</h4><p>优化指令执行过程，大大提升CPU运算效率</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><h3 id="进制运算的基础"><a href="#进制运算的基础" class="headerlink" title="进制运算的基础"></a>进制运算的基础</h3><h4 id="进制概述"><a href="#进制概述" class="headerlink" title="进制概述"></a>进制概述</h4><p>进位制是一种记数方式，亦称进位计数法或位值计数法，有限种数字符号来表示无限的数值，使用的数字符号的数目称为之中进位制的基数或底数</p><p>计算机内使用八进制和十六进制能大大减少数据长度，比如：</p><p>1024=0b1000000000    1024=0o2000    1024=ox400</p><p>分别表示二进制（0b）、八进制（0o）、十六进制（0x）的1024</p><h4 id="二进制运算的基础"><a href="#二进制运算的基础" class="headerlink" title="二进制运算的基础"></a>二进制运算的基础</h4><p>整数二级制十进制转换不展开讲了，重复相除和拆分展开</p><p>十进制小数转换二进制，重复相乘法。</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328100422573.png"  alt="image-20200328100422573"></p><h3 id="有符号数和无符号数"><a href="#有符号数和无符号数" class="headerlink" title="有符号数和无符号数"></a>有符号数和无符号数</h3><p>数值第一位就是符号位，使用0表示正数，使用1表示负数 即<strong>原码表示法</strong></p><p>但是用原码进行运算非常复杂，特别是两个操作数符号不同的时候。首先判断两个操作数绝对值大小，使用绝对值大的数减去绝对值小的数，对于符号值，以绝对值大的为准</p><h3 id="二进制的补码表示法"><a href="#二进制的补码表示法" class="headerlink" title="二进制的补码表示法"></a>二进制的补码表示法</h3><p>减法运算复杂，希望能找到使用正数替代复试的方法，使用加法代替减法操作，从而消除减法，但是在计算补码过程中，还是使用了减法</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328104156873.png"  alt="image-20200328104156873"></p><p>其中n表示x的位数</p><p>例1：n=4，x=13，计算x的二进制原码和补码</p><p>原码：0,1101</p><p>补码：0,1101</p><p>例2：n=4 x=-13，计算x的二进制原码和补码</p><p>原码：1,1101</p><p>补码：2<sup>n+1</sup>+x=2<sup>4+1</sup>-13=100000-1101=10011</p><p>第一位是符号位  x=1,0011</p><h3 id="二进制反码表示法"><a href="#二进制反码表示法" class="headerlink" title="二进制反码表示法"></a>二进制反码表示法</h3><p>反码的目的是找出原码与补码之间的规律，消除转换过程中的减法</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328110453247.png"  alt="image-20200328110453247"></p><p>例1：n=4 x=-13，计算x的二进制原码和反码</p><p>原码：x=1,1101</p><p>反码：(2<sup>n+1</sup>+x)+x=(2<sup>4+1</sup>-1)-13=11111-1101=10010</p><p>反码：x=1,0010</p><p><strong>正数的原码、补码、反码都是相同的</strong></p><p><strong>负数的反码等于原码除符号位外按位取反，负数的补码等于反码加1</strong></p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328111934601.png"  alt="image-20200328111934601"></p><p>例2：n=4 x=-9 计算x的二进制原码 反码 补码</p><p>原码：1,1001    反码：1,0110    补码：1,0111</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328113723245.png"  alt="image-20200328113723245"></p><p>这样，通过先求反码再求补码的方式就可以消除减法</p><h3 id="小数的补码"><a href="#小数的补码" class="headerlink" title="小数的补码"></a>小数的补码</h3><p>小数部分也与前面的规律相同</p><p>例1：x=9/16，计算x的二进制原码 反码和补码</p><p>用重复相乘法求原码：0,0.1001 所以反码=补码=0,0.1001</p><p>例2：x=-11/32，计算x的二进制原码 反码和补码</p><p>原码1,0.01011 反码：1,1.10100 补码：1,1.10101</p><h3 id="定点数与浮点数"><a href="#定点数与浮点数" class="headerlink" title="定点数与浮点数"></a>定点数与浮点数</h3><h4 id="定点数的表示方法"><a href="#定点数的表示方法" class="headerlink" title="定点数的表示方法"></a>定点数的表示方法</h4><p>小数点固定在某个位置的数称之为定点数</p><p>若不是0.1011或者1011这样的纯小数或者纯整数，需要乘以比例因子以满足定点数保存格式</p><h4 id="浮点数的表示方法"><a href="#浮点数的表示方法" class="headerlink" title="浮点数的表示方法"></a>浮点数的表示方法</h4><p>计算机处理的很大程度上不是纯小数或纯整数；数据范围很大，定点数难以表达。因此需要浮点数表示方法</p><h5 id="浮点数的表示格式"><a href="#浮点数的表示格式" class="headerlink" title="浮点数的表示格式"></a>浮点数的表示格式</h5><p>N=S×r<sup>j</sup></p><p>S：尾数    r：基数    j：阶码</p><p>尾数必须使用纯小数</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328155237200.png"  alt="image-20200328155237200"></p><h5 id="浮点数的表示范围"><a href="#浮点数的表示范围" class="headerlink" title="浮点数的表示范围"></a>浮点数的表示范围</h5><p>假设阶码数值取m位，尾数数值取n位。</p><p>阶码能够表达的最大值：2<sup>m</sup>-1</p><p>阶码表示范围：[-(2<sup>m</sup>-1), 2<sup>m</sup>-1]</p><p>尾数能够表达的最大值：1-2<sup>-n</sup>，最小值2<sup>-n</sup></p><p>尾数表示范围：负数[-(1-2<sup>-n</sup>), -(2<sup>-n</sup>)]    正数[2<sup>-n</sup>, 1-2<sup>-n</sup>]</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328161505201.png"  alt="image-20200328161505201"></p><p>单精度浮点数：使用4字节、32位来表达浮点数（float）</p><p>双精度浮点数：使用8字节、64位来表达浮点数（double）</p><h5 id="浮点数的规格化"><a href="#浮点数的规格化" class="headerlink" title="浮点数的规格化"></a>浮点数的规格化</h5><p>尾数必须用纯小数，最高位必须是1</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328231643732.png"  alt="image-20200328231643732"></p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328232756330.png"  alt="image-20200328232756330"></p><p><strong>例题必须理解</strong></p><h4 id="定点数与浮点数的对比"><a href="#定点数与浮点数的对比" class="headerlink" title="定点数与浮点数的对比"></a>定点数与浮点数的对比</h4><ul><li>当定点数与浮点数位数相同时，浮点数表示的范围更大</li><li>当浮点数尾数为规格化数时，浮点数的精度更高</li><li>浮点数运算包含阶码和尾数，浮点数的运算更为复杂</li></ul><p>浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数</p><h3 id="定点数的加减法运算"><a href="#定点数的加减法运算" class="headerlink" title="定点数的加减法运算"></a>定点数的加减法运算</h3><h4 id="定点数的加法"><a href="#定点数的加法" class="headerlink" title="定点数的加法"></a>定点数的加法</h4><p>整数加法：<br>$$<br>A[补]+B[补]=[A+B]<a href="mod2^{n+1}">补</a><br>$$<br>小数加法：<br>$$<br>A[补]+B[补]=[A+B]<a href="mod2">补</a><br>$$<br><strong>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</strong></p><p><strong>例1</strong>：A=-110010,B=001101，求A+B</p><p>A[补]=1,001110    B[补]=B[原]=0,001101</p><p>A[补]+B[补]=1,011011</p><p>A+B=1,011011[补]=-100101</p><p><strong>例2</strong>：A=-0.1010010，B=0.0110100，求A+B</p><p>A[补]=1,1.0101110    B[补]=B[原]=0,0.0110100</p><p>A[补]+B[补]=1,1.1100010</p><p>A+B=1,1.1100010[补]=-0.0011110</p><p><strong>例3</strong>：A=-10010000，B=-01010000，求A+B</p><p>A[补]=1,01110000    B[补]=1,10110000</p><p>A[补]+B[补]=<strong>1,00100000</strong></p><p>A+B=1,00100000[补]=-11100000</p><p>验证：A=-144 B=-80 A+B=-224</p><p><strong>例4</strong>：A=-10010000，B=-11010000，求A+B</p><p>A[补]=1,01110000    B[补]=1,00110000</p><p>A[补]+B[补]=0,10100000</p><p>A+B=0,10100000[补]=10100000</p><p>验证：A=-144 B=-208 <strong>但是</strong>A+B=160</p><p>产生矛盾</p><p>这是因为A、B都是八位，但是A+B的结果用八位表示不出来，发生了<strong>溢出</strong></p><h4 id="判断溢出"><a href="#判断溢出" class="headerlink" title="判断溢出"></a>判断溢出</h4><p>双符号位判断法</p><p>单符号位表示变为双符号位：0=&gt;00,1=&gt;11</p><p>双符号位产生的进位丢弃</p><p>结果的双符号位不同则表示溢出</p><p>所以例4：</p><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200404183948040.png"  alt="image-20200404183948040"></p><p>说明例题4原结果无效！</p><h4 id="定点数的减法"><a href="#定点数的减法" class="headerlink" title="定点数的减法"></a>定点数的减法</h4><p>整数减法：<br>$$<br>A[补]-B[补]=A+(-B)<a href="mod2^{n+1}">补</a><br>$$<br>小数减法：<br>$$<br>A[补]-B[补]=A+(-B)<a href="mod2">补</a><br>$$<br><strong>(-B)[补]等于B[补]连同符号位按位取反，末位加一</strong></p><p><strong>例5：</strong>A=11001000,B=-00110100，求A-B</p><p>A[补]=A[原]=0,11001000    B[补]=1,1100100</p><p>(-B)[补]=0,00110100</p><p>建议用双符号位相加检查溢出</p><p>A-B=A+(-B)[补]=0,11111100=11111100</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</strong></p><p><strong>双符号位判断溢出：</strong></p><p>单符号位表示变为双符号位：0=&gt;00,1=&gt;11</p><p>双符号位产生的进位丢弃</p><p>结果的双符号位不同则表示溢出</p><p><strong>(-B)[补]等于B[补]连同符号位按位取反，末位加一</strong></p><h3 id="浮点数的加减法运算"><a href="#浮点数的加减法运算" class="headerlink" title="浮点数的加减法运算"></a>浮点数的加减法运算</h3><p>步骤：对阶——尾数求和——尾数规格化——舍入——溢出判断</p><h4 id="对阶"><a href="#对阶" class="headerlink" title="对阶"></a>对阶</h4><p><em>对阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算</em></p><ul><li>浮点数尾数运算简单</li><li>浮点数位数实际小数位于阶码有关</li><li>阶码按小阶看齐大阶的原则</li></ul><p>x=0.1101×2<sup>01</sup></p><p>y=(-0.1010)×2<sup>11</sup></p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0001</td><td>00</td><td>1101</td><td>x</td></tr><tr><td>00</td><td>0011</td><td>11</td><td>1010</td><td>y</td></tr></tbody></table><p>小阶看齐大阶，所以x=0.001101×2<sup>11</sup>，此时尾数数值位需要舍去两位</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0011</td><td>00</td><td>0011(01)</td><td>x</td></tr></tbody></table><h4 id="尾数求和"><a href="#尾数求和" class="headerlink" title="尾数求和"></a>尾数求和</h4><ul><li><p>使用补码进行运算</p></li><li><p>减法运算转化为加法运算：A-B=A+(-B)</p></li></ul><p>x=0.001101×2<sup>11</sup></p><p>y=(-0.1010)×2<sup>11</sup></p><p>x[原]=00.0011    x[补]=00.0011</p><p>y[原]=11.1010    y[补]=11.0110</p><p>S=(x+y)[补]=11.1001</p><p>此时</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0011</td><td>11</td><td>1001</td><td>x+y</td></tr></tbody></table><h4 id="尾数规格化"><a href="#尾数规格化" class="headerlink" title="尾数规格化"></a>尾数规格化</h4><p>对补码进行规格化需要判断两种情况：S&gt;0和S&lt;0</p><p>S[补]=00.1xxxxxx(S&gt;0)</p><p>S[补]=11.0xxxxxx(S&lt;0)</p><p>如果不满足以上格式（符号位与最高位不一致的格式），需要进行左移操作，同时阶码相应变化，以满足规格化</p><p>刚才的例子中S=(x+y)[补]=11.1001 不满足格式，需要左移操作（舍去最高位1，末位加0）</p><p>同时阶码数值位减1</p><p>即S=(x+y)[补]=11.0010</p><p>（x+y）[原]=-0.1110</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0010</td><td>11</td><td>0010</td><td>S</td></tr></tbody></table><p>x+y=-0.1110×2<sup>10</sup></p><h4 id="尾数规格化（右移）"><a href="#尾数规格化（右移）" class="headerlink" title="尾数规格化（右移）"></a>尾数规格化（右移）</h4><ul><li>一般情况下都是左移</li><li>尾数双符号位不一致下需要右移（定点运算的溢出情况）</li><li>右移的话则需要进行<strong>舍入</strong>操作</li></ul><h4 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h4><p>‘0舍1入’法（相当于二进制的四舍五入）</p><p>S[补]=10.10110111</p><p>此时双符号位不一致，需要右移，</p><p>S[补]=11.01011011(1)</p><p>末位舍去1，“0舍1入”整体还要再加1。同时阶码需要加1哦</p><p>S[补]=11.01011100</p><p><strong>该方法可以大大挺高精度，但是可能会溢出</strong></p><h4 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h4><ul><li><p>定点运算双符号位不一致位溢出</p></li><li><p>浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规</p></li><li><p>浮点运算主要通过阶码的双符号位判断是否溢出。如果规格化后，阶码双符号位不一致，则认为是溢出</p></li></ul><p><img src="/" class="lazyload" data-src="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-2020.png"  alt="image-20200404223253625"></p><p>例子：x=0.11010011×2<sup>1101</sup>, y=0.11101110×2<sup>1100</sup>, 假设阶码4位，尾数8位，计算x+y</p><p>结果为：</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>1110</td><td>00</td><td>10100101</td><td>x+y</td></tr></tbody></table><h3 id="浮点数的乘除法运算"><a href="#浮点数的乘除法运算" class="headerlink" title="浮点数的乘除法运算"></a>浮点数的乘除法运算</h3><p>乘法：阶码相加，尾数求积</p><p>x=S<sub>x</sub>×r<sup>jx</sup>    y=S<sub>y</sub>×r<sup>jy</sup></p><p>x×y=(S<sub>x</sub>×S<sub>y</sub>)×r<sup>(jx+jy)</sup></p><p>除法：阶码相减，尾数求商</p><p>x/y=(S<sub>x</sub>/S<sub>y</sub>)×r<sup>(jx-jy)</sup></p><p>步骤：阶码运算——尾数运算——尾数规格化——舍入——溢出判断</p><h2 id="原理实践"><a href="#原理实践" class="headerlink" title="原理实践"></a>原理实践</h2><p>实现双向链表→实现置换算法（先进先出算法、最近最少使用算法、最不经常使用算法）</p><p><strong>先进先出算法（FIFO）</strong>：把高速缓存看作是一个先进先出的队列，优先替换最先进入队列的字块</p><p><strong>最不经常使用算法（LFU）</strong>：优先淘汰最不经常使用的字块，需要额外的空间记录字块的使用频率</p><p><strong>最近最少使用算法（LRU）</strong>：优先淘汰一段时间内没有使用的字块。有多种实现方法，一般使用双向链表，把当前访问节点置于链表前面（保证链表头部节点是最近使用的）</p><h3 id="双向链表的原理与实践"><a href="#双向链表的原理与实践" class="headerlink" title="双向链表的原理与实践"></a>双向链表的原理与实践</h3><p><strong>单向链表</strong>：节点1→节点2→节点3→节点4→节点5</p><p>每一个节点都有下一个节点的地址或引用</p><p><strong>双向链表</strong>：节点1&lt;=&gt;节点2&lt;=&gt;节点3&lt;=&gt;节点4&lt;=&gt;节点5</p><p>每一个节点都有上一个节点和下一个节点的地址或引用</p><ul><li>可以快速找到一个节点的下一个节点</li><li>可以快速找到一个节点的上一个节点</li><li>可以快速去掉链表中的某一个节点</li></ul><ol><li><p>实现链表节点，存放Key-Value数据</p></li><li><p>实现双向链表（往头部增加节点、往尾部增加节点、删除任意节点、增加任意节点、弹出头部节点、弹出尾部节点）</p><p>增加任意节点就是往头部或尾部增加，不做重复演示</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="string">"""实现链表节点"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line">        <span class="comment"># 上下节点的引用</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        val = <span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(self.key, self.value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        val = <span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(self.key, self.value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现双向链表需要头部指针：head尾部指针：tail分别指向链表的头部和尾部</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>:</span></span><br><span class="line">    <span class="string">"""实现双向链表"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity=<span class="number">0xffff</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 0xffff是int的最大值</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.tail = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 当前列表存储的节点</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往头部添加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add_head</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># 判断当前列表头部是否为空（没有节点）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = node</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.head.next = <span class="literal">None</span></span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.next = self.head</span><br><span class="line">            self.head.prev = node</span><br><span class="line">            self.head = node</span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往尾部增加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add_tail</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># 判断当前列表尾部是否为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tail:</span><br><span class="line">            self.head = node</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">            self.tail.next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail.next = node</span><br><span class="line">            node.prev = self.tail</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.tail.next = <span class="literal">None</span></span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从尾部删除</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del_tail</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tail:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = self.tail</span><br><span class="line">        <span class="keyword">if</span> node.prev:</span><br><span class="line">            self.tail = node.prev</span><br><span class="line">            self.tail.next = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail = self.head = <span class="literal">None</span></span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从头部删除</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del_head</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">if</span> node.next:</span><br><span class="line">            self.head = node.next</span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.head = self.tail = <span class="literal">None</span></span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除任意节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># 如果node=None 默认删除尾部节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            node = self.tail</span><br><span class="line">        <span class="keyword">if</span> node == self.tail:</span><br><span class="line">            self.__del_tail()</span><br><span class="line">        <span class="keyword">elif</span> node == self.head:</span><br><span class="line">            self.__del_head()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.prev.next = node.next</span><br><span class="line">            node.next.prev = node.prev</span><br><span class="line">            self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="string">"""定义公有api供外部使用"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 弹出头部节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__del_head()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加节点(从尾部）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__add_tail(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往头部添加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_front</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__add_head(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, node=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__remove(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印链表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">        p = self.head</span><br><span class="line">        line = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            line += <span class="string">'&#123;&#125;'</span>.format(p)</span><br><span class="line">            p = p.next</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                line += <span class="string">'=&gt;'</span></span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p>接下来模拟双向链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = DoubleLinkedList(<span class="number">10</span>)</span><br><span class="line">    nodes = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        node = Node(i, i)</span><br><span class="line">        nodes.append(node)</span><br><span class="line">    l.append(nodes[<span class="number">0</span>])</span><br><span class="line">    l.print()</span><br><span class="line">    l.append(nodes[<span class="number">1</span>])</span><br><span class="line">    l.print()</span><br><span class="line">    l.pop()</span><br><span class="line">    l.print()</span><br><span class="line">    l.append(nodes[<span class="number">2</span>])</span><br><span class="line">    l.print()</span><br><span class="line">    l.append_front(nodes[<span class="number">3</span>])</span><br><span class="line">    l.print()</span><br><span class="line">    l.append(nodes[<span class="number">4</span>])</span><br><span class="line">    l.print()</span><br><span class="line">    l.remove(nodes[<span class="number">2</span>])</span><br><span class="line">    l.print()</span><br><span class="line">    l.remove()</span><br><span class="line">    l.print()</span><br></pre></td></tr></table></figure><p>可以把每个功能都自己尝试下！</p><h3 id="实践FIFO缓存置换算法"><a href="#实践FIFO缓存置换算法" class="headerlink" title="实践FIFO缓存置换算法"></a>实践FIFO缓存置换算法</h3><p>FIFO先进先出算法的实现。淘汰缓存时，把先进入列表的淘汰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> computer_principle.DoubleLinkedList <span class="keyword">import</span> DoubleLinkedList, Node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FIFOcache</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        self.map = &#123;&#125;</span><br><span class="line">        self.list = DoubleLinkedList(self.capacity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="comment"># 定义get方法查看node是否存在</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.map:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = self.map.get(key)</span><br><span class="line">            <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment"># 添加node</span></span><br><span class="line">        <span class="keyword">if</span> self.capacity == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.map:</span><br><span class="line">            node = self.map.get(key)</span><br><span class="line">            self.list.remove(node)</span><br><span class="line">            node.value = value</span><br><span class="line">            self.list.append(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.size == self.capacity:</span><br><span class="line">                node = self.list.pop()</span><br><span class="line">                <span class="keyword">del</span> self.map[node.key]</span><br><span class="line">                self.size -= <span class="number">1</span></span><br><span class="line">            node = Node(key, value)</span><br><span class="line">            self.list.append(node)</span><br><span class="line">            self.map[key] = node</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.list.print()</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cache = FIFOcache(<span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    print(cache.get(<span class="number">1</span>))</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    print(cache.get(<span class="number">1</span>))</span><br><span class="line">    cache.put(<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">    cache.print()</span><br></pre></td></tr></table></figure><h3 id="实践LRU缓存置换算法"><a href="#实践LRU缓存置换算法" class="headerlink" title="实践LRU缓存置换算法"></a>实践LRU缓存置换算法</h3><p>最近最少使用算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> computer_principle.DoubleLinkedList <span class="keyword">import</span> Node, DoubleLinkedList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUcache</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.map = &#123;&#125;</span><br><span class="line">        self.list = DoubleLinkedList(self.capacity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment"># 添加节点，若存在就将它提到最前面</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.map:</span><br><span class="line">            node = self.map[key]</span><br><span class="line">            self.list.remove(node)</span><br><span class="line">            node.value = value</span><br><span class="line">            self.list.append_front(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = Node(key, value)</span><br><span class="line">            <span class="keyword">if</span> self.list.size &gt;= self.list.capacity:</span><br><span class="line">                <span class="comment"># 链表满了，剔除最后一个再添加</span></span><br><span class="line">                self.list.remove()</span><br><span class="line">                self.list.append_front(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.list.append_front(node)</span><br><span class="line">                self.map[key]=node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.list.print()</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cache=LRUcache(<span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    cache.put(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    cache.put(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    cache.put(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    cache.put(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">    cache.print()</span><br></pre></td></tr></table></figure><h3 id="实践LFU缓存置换算法"><a href="#实践LFU缓存置换算法" class="headerlink" title="实践LFU缓存置换算法"></a>实践LFU缓存置换算法</h3><p>最不经常使用算法，同使用频率节点按FIFO算法淘汰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> computer_principle.DoubleLinkedList <span class="keyword">import</span> DoubleLinkedList, Node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUNode</span><span class="params">(Node)</span>:</span></span><br><span class="line"><span class="comment"># 定义LFU的节点，需要多一个频率属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.freq = <span class="number">0</span></span><br><span class="line">        super().__init__(key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUcache</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.map = &#123;&#125;</span><br><span class="line">        <span class="comment"># key：频率，value：频率对应的双向链表</span></span><br><span class="line">        self.freq_map = &#123;&#125;</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新节点频率的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__update_freq</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        freq = node.freq</span><br><span class="line">        <span class="comment"># 将node从原有频率图中剔除</span></span><br><span class="line">        node = self.freq_map[freq].remove(node)</span><br><span class="line">        <span class="keyword">if</span> self.freq_map[freq].size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">del</span> self.freq_map[freq]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        freq += <span class="number">1</span></span><br><span class="line">        node.freq = freq</span><br><span class="line">        <span class="keyword">if</span> freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_map:</span><br><span class="line">            self.freq_map[freq] = DoubleLinkedList()</span><br><span class="line">        self.freq_map[freq].append(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.map:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        node = self.map.get(key)</span><br><span class="line">        self.__update_freq(node)</span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.capacity == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 缓存命中 增加频率</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.map:</span><br><span class="line">            node = self.map.get(key)</span><br><span class="line">            node.value = value</span><br><span class="line">            self.__update_freq(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 缓存没有命中 剔除最小频率节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.capacity == self.size:</span><br><span class="line">                min_freq = min(self.freq_map)</span><br><span class="line">                node = self.freq_map[min_freq].pop()</span><br><span class="line">                <span class="keyword">del</span> self.map[node.key]</span><br><span class="line">                self.size -= <span class="number">1</span></span><br><span class="line">            node = LFUNode(key, value)</span><br><span class="line">            node.freq = <span class="number">1</span></span><br><span class="line">            self.map[key] = node</span><br><span class="line">            <span class="keyword">if</span> node.freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_map:</span><br><span class="line">                self.freq_map[node.freq] = DoubleLinkedList()</span><br><span class="line">            node = self.freq_map[node.freq].append(node)</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.freq_map.items():</span><br><span class="line">            print(<span class="string">'freq:&#123;&#125;'</span>.format(k))</span><br><span class="line">            self.freq_map[k].print()</span><br><span class="line">        print(<span class="string">'*********************\n'</span>)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cache = LFUcache(<span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    cache.print()</span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    cache.print()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavasCript入门学习</title>
      <link href="/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript概述"><a href="#javascript概述" class="headerlink" title="javascript概述"></a>javascript概述</h2><blockquote><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p></blockquote><p><em>放在head中的JS代码会在页面加载完成之前就读取，而放在body中的JS代码，会在整个页面加载完成之后读取。<br>这就说明了，如果我们想定义一个全局对象，而这个对象是页面中的某个按钮时，我们必须将其放入body中，道理很明显：如果放入head，那当你定义的时候，那个按钮都没有被加载，可能获得的是一个undefind。</em></p><p>javascript外部引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"index.js"</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>javascript在html内部使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    ***；</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><strong>js变量</strong>与其他程序设计语言相同，是用来临时存储信息</p><p>创建的时候不区分数据类型，但是在赋值的时候区分数据类型，是<strong>弱数据类型语言</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>；</span><br><span class="line"><span class="keyword">var</span> x=<span class="number">2</span>,name=<span class="string">"zhangsan"</span>；</span><br><span class="line">第二种方法：</span><br><span class="line"><span class="keyword">var</span> x；</span><br><span class="line">x=<span class="number">1</span>；</span><br></pre></td></tr></table></figure><p><strong>js调试</strong><code>alert(flag)</code>弹框调试，<code>console.log(flag)</code>控制台输出调试。用于观察变量值的变化规律，是否符合程序设计的目的。</p><h2 id="自定义函数与数据类型"><a href="#自定义函数与数据类型" class="headerlink" title="自定义函数与数据类型"></a>自定义函数与数据类型</h2><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p><strong>自定义函数</strong>自定义函数是完成某一功能的代码段，可重复执行，方便管理和维护。</p><p>创建方法一：函数声明，可以先使用后定义(但是一般都遵循先定义后使用原则)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">代码片段</span><br><span class="line"><span class="keyword">return</span>***;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>创建方法二：这种叫做函数表达式，必须先定义后使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun1=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型及类型转换"><a href="#数据类型及类型转换" class="headerlink" title="数据类型及类型转换"></a>数据类型及类型转换</h3><p><img src="/" class="lazyload" data-src="/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200312220242268.png"  alt="image-20200312220242268"></p><p><img src="/" class="lazyload" data-src="/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200312220446200.png"  alt="image-20200312220446200"></p><p>类型转换的函数：parseInt()、parseFloat() 、Number() 、Boolean()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str+<span class="number">1</span>); <span class="comment">//输出1231</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)+<span class="number">1</span>); <span class="comment">//输出124</span></span><br></pre></td></tr></table></figure><p>说明转换为int型起了作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str*<span class="number">1</span>+<span class="number">1</span>); <span class="comment">//输出124</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)+<span class="number">1</span>); <span class="comment">//输出124</span></span><br></pre></td></tr></table></figure><p><code>str*1</code>完成了字符串的<strong>隐式类型转换</strong>，第三行则是<strong>强制类型转换</strong></p><p> 若要字符转为数值，需要用<code>isNaN()</code>先进行判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'123'</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(str1))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时isNaN()返回的是false，最后转换成了Int类型，!是对结果进行取反</span></span><br></pre></td></tr></table></figure><p>对比parseInt()、parseFloat() 、Number()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'123a1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">'a123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">'1.1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//1.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">''</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(str)); <span class="comment">//若是字符类型，则空字符或者null都是返回false</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(str)); <span class="comment">//返货false，非零返回true</span></span><br></pre></td></tr></table></figure><h2 id="变量与运算符"><a href="#变量与运算符" class="headerlink" title="变量与运算符"></a>变量与运算符</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>全局变量、局部变量<br>局部变量：在函数内部创建的变量，称为局部变量，其他函数不能使用。<br>全局变量：在函数外部创建的变量，称为全局变量，在函数之间可以共享使用。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><strong>比较运算符</strong>：用于比较两个值。结果是true或者false<br>运算符范围：&gt;、&gt;=、!=、&lt;、&lt;=<br><strong>逻辑运算符</strong>：包含逻辑与、或、非等，其结果为true或false<br>格式：&amp;&amp; and    || or    ! 非<br><strong>三目运算符(三元运算符）</strong>：根据不同的条件，执行不同的操作/返回不同的值<br>格式：条件？ 值1：值2<br>条件成立返回值1，条件不成立返回值2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> flag=x&gt;<span class="number">10</span>?<span class="string">'大于'</span>:<span class="string">'小于'</span>;<span class="comment">//先运行三目运算符，然后赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//此时返回‘小于’</span></span><br></pre></td></tr></table></figure><p><strong>运算符优先级</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> flag=x&lt;<span class="number">10</span>; <span class="comment">//比较运算符优先级高于赋值，所以flag=True</span></span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200313105419392.png"  alt="image-20200313105419392"></p><p>优先级从高到低，当不清楚运算顺序的时候，建议添加小括号。</p><h2 id="程序控制语句"><a href="#程序控制语句" class="headerlink" title="程序控制语句"></a>程序控制语句</h2><h3 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    ***; <span class="comment">//满足条件1执行</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">***; <span class="comment">//满足条件2执行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ***; <span class="comment">//不满足以上条件执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多条件控制语句"><a href="#多条件控制语句" class="headerlink" title="多条件控制语句"></a>多条件控制语句</h3><p>switch 中用于case判断，但是不能带运算符，默认==。<br>除此以外的case用default。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*根据成绩输出相应评级*/</span></span><br><span class="line"><span class="keyword">var</span> score=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> dgree=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> sco=<span class="built_in">parseInt</span>(score/<span class="number">10</span>);</span><br><span class="line"><span class="keyword">switch</span>(sco)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        degree=<span class="string">'满分'</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//必须添加break停止运行，否则会运行到下一个break为止</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        degree=<span class="string">'优秀'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        degree=<span class="string">'良好'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        degree=<span class="string">'不及格'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(degree);</span><br></pre></td></tr></table></figure><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><p>分为for循环、while循环、do-while循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*for循环计算100以内奇数相加*/</span></span><br><span class="line"><span class="comment">/*for循环*/</span></span><br><span class="line"><span class="comment">/*第一行可以直接声明i=0，for(;i&lt;=100;i++)&#123;&#125;*/</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">/*while循环*/</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">/*do while循环*/</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'123321'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">//123，第一个参数表示起始位置，第二个表示截取长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">//123，第一个参数表示起始位置，第二个表示结束位置（前闭后开）</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-1</span>,<span class="number">3</span>)); <span class="comment">//123，当第一个参数为负数，为认为是0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">2</span>)); <span class="comment">//3,参数表示位置，第3个位置的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">//6，str长度，注意后面没有小括号</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="number">1</span>,<span class="number">4</span>))； <span class="comment">//5，从第5个位置开始找‘1’这个字符第一次出现的位置。第二参数可不填，默认为0</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'gg,jj,ww,rice,and,bran'</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">','</span>); <span class="comment">//按逗号分隔为数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">//输出数组中第一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.concat(<span class="string">'site'</span>,<span class="string">'blog'</span>)); <span class="comment">//在数组中添加这两个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">'site'</span>,<span class="string">'blog'</span>)); <span class="comment">//直接在字符后面接上siteblog，无分隔！</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'gg'</span>,<span class="string">'99'</span>)); <span class="comment">//只替换第一个gg为99</span></span><br></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1=<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//获取当前时间日期</span></span><br><span class="line"><span class="keyword">var</span> d2=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2021-6-3 0:59:36'</span>); <span class="comment">//指定日期时间</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getDate()); <span class="comment">//获取当前日</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getMonth()+<span class="number">1</span>); <span class="comment">//获取当前月份，js月份从0开始，0-11</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getFullYear()); <span class="comment">//获取当前年份</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getHours()); <span class="comment">//获取当前小时</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getMinutes()); <span class="comment">//获取当前分钟</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getSeconds()); <span class="comment">//获取当前秒数</span></span><br><span class="line"><span class="keyword">var</span> n=d2.getTime()-d1.getTime(); <span class="comment">//getTime()转化为毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(n/(<span class="number">24</span>*<span class="number">3600</span>*<span class="number">1000</span>))); <span class="comment">//计算相差的天数</span></span><br></pre></td></tr></table></figure><p>日期格式化yy-mm-dd hh:mm:ss，将当前日期格式化输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_FmtDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> y,m,dd,h,m,s;</span><br><span class="line">y=d.getFullYear();</span><br><span class="line">m=d.getMonth()+<span class="number">1</span>;</span><br><span class="line">dd=d.getDate();</span><br><span class="line">h=d.getHours();</span><br><span class="line">m=d.getMinutes();</span><br><span class="line">s=d.getSeconds();</span><br><span class="line">FmtDate = y+<span class="string">'-'</span>+m+<span class="string">'-'</span>+dd+<span class="string">" "</span>+h+<span class="string">':'</span>+m+<span class="string">':'</span>+s;</span><br><span class="line"><span class="keyword">return</span> FmtDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun_FmtDate());</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>Math.sqrt()、Math.random()…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">-3.141592653</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(n)); <span class="comment">//四舍五入取整</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toFixed(<span class="number">2</span>)); <span class="comment">//保留两位小数,四舍五入</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>)); <span class="comment">//取最小值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>)); <span class="comment">//取最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(n)); <span class="comment">//取绝对值</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组对象的作用是：使用单独的变量名来存储一系列的值。</p><p>数组创建的几种方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申明或创建一个不指定长度的数组，又称实例化创建：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 申明或创建一个数组并指定长度：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 申明或创建一个带有默认值的数组：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'a'</span>,<span class="string">'r'</span>,<span class="string">'r'</span>,<span class="string">'a'</span>,<span class="string">'y'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//创建一个数组并赋值的简写：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=[<span class="string">'a'</span>,<span class="string">'r'</span>,<span class="string">'r'</span>,<span class="string">'a'</span>,<span class="string">'y'</span>,<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 数组赋值、字符下标、数组遍历</span></span><br><span class="line"><span class="built_in">console</span>.log(arrayObj[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arrayObj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arrayObj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单元素设置"><a href="#表单元素设置" class="headerlink" title="表单元素设置"></a>表单元素设置</h2><p><strong>表单</strong> 表单的主要作用是在客户端接收用户的信息，然后将数据递交给后台的程序来操控这些数据。jS就是用来设置或获取各种表单元素的值</p><p><code>document.getElementById()</code>获取元素，<code>onclick()</code>点击事件，<code>onload()</code>加载事件</p><p><code>document.getElementsById()</code>获取多个元素(数组)</p><blockquote><p>onload 事件会在页面或图像加载完成后立即发生。</p><p>onload 通常用于 <body> 元素，在页面完全载入后(包括图片、css文件等等)执行脚本代码</body></p></blockquote><p>实现页面中出现表单，刷新后表单中默认值改变，点击后表单默认值改变，并弹出页面提示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"alter()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onload</span>=<span class="string">"alter()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'userName'</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"ganjiawei"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">'btn'</span> <span class="attr">onclick</span>=<span class="string">"show()"</span> <span class="attr">value</span>=<span class="string">"btn"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// document.getElementById()——静态方法获取元素，获取之后通过.value修改value值</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'userName'</span>).value=<span class="string">'your name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'hhhh'</span>)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'userName'</span>).value=<span class="string">'ganjiawei'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 实现<strong>单选框radio</strong>，并alert返回其值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    // radio是表单圆形选择框，check='checked'表示默认选择，name属性设置成同名则可以实现仅单选</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">name</span>=<span class="string">'sex'</span> <span class="attr">value</span>=<span class="string">'1'</span> <span class="attr">check</span>=<span class="string">'checked'</span>/&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">name</span>=<span class="string">'sex'</span> <span class="attr">value</span>=<span class="string">'0'</span>/&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">id</span>=<span class="string">'btn'</span> <span class="attr">onclick</span>=<span class="string">'show_sex()'</span> <span class="attr">value</span>=<span class="string">'btn'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_sex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementsByName(<span class="string">'sex'</span>);</span><br><span class="line">    <span class="keyword">if</span>(sex[<span class="number">0</span>].checked)&#123;</span><br><span class="line">        <span class="comment">//checked 返回布尔值，选中则是true</span></span><br><span class="line">        alert(<span class="string">'male'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">'female'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>列表选择框form</strong></p><p>实现年月日选择框，并实现多级联动（方法一：重新给天数赋值）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onload</span>=<span class="string">'date_select()'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">'y'</span> <span class="attr">id</span>=<span class="string">'y'</span> <span class="attr">onchange</span>=<span class="string">'date_change()'</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>年</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">'m'</span> <span class="attr">id</span>=<span class="string">'m'</span> <span class="attr">onchange</span>=<span class="string">'date_chage()'</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>月</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">'d'</span> <span class="attr">id</span>=<span class="string">'d'</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>日</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">date_select</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取id为y,m,d的控件</span></span><br><span class="line">    <span class="keyword">var</span> y=<span class="built_in">document</span>.getElementById(<span class="string">'y'</span>);</span><br><span class="line">    <span class="keyword">var</span> m=<span class="built_in">document</span>.getElementById(<span class="string">'m'</span>);</span><br><span class="line">    <span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">'d'</span>);</span><br><span class="line">    <span class="keyword">var</span> year=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> now_year=<span class="built_in">parseInt</span>(year.getFullYear());</span><br><span class="line">    for_d(y,<span class="number">1996</span>,now_year);</span><br><span class="line">    for_d(m,<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line">    for_d(d,<span class="number">1</span>,<span class="number">31</span>);</span><br><span class="line">    <span class="comment">// 获取列表框的长度</span></span><br><span class="line">    <span class="keyword">var</span> n=y.length;</span><br><span class="line">    <span class="comment">// 使年份的默认选项在中间年份</span></span><br><span class="line">    y.selectedIndex=<span class="built_in">Math</span>.round(n/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义循环函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">for_d</span>(<span class="params">obj,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">        <span class="comment">// option 集合可返回包含 &lt;select&gt; 元素中所有 &lt;option&gt; 的一个数组。</span></span><br><span class="line">        <span class="comment">// 具体用法文章后面DOM章节会涉及到</span></span><br><span class="line">        obj.options.add(<span class="keyword">new</span> Option(i,i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义年月日三级联动的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">date_change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y=<span class="built_in">document</span>.getElementById(<span class="string">'y'</span>);</span><br><span class="line">    <span class="keyword">var</span> m=<span class="built_in">document</span>.getElementById(<span class="string">'m'</span>);</span><br><span class="line">    <span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">'d'</span>);</span><br><span class="line">    <span class="keyword">var</span> d_end;</span><br><span class="line">    <span class="keyword">var</span> m_value=<span class="built_in">parseInt</span>(m.value);</span><br><span class="line">    <span class="keyword">var</span> y_value=<span class="built_in">parseInt</span>(y.value);</span><br><span class="line">    <span class="keyword">if</span> (m_value==<span class="number">4</span> || m_value==<span class="number">6</span> || m_value==<span class="number">9</span> || m_value==<span class="number">11</span>)&#123;</span><br><span class="line">        d_end=<span class="number">30</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m_value==<span class="number">2</span>)&#123;</span><br><span class="line">        d_end=<span class="number">28</span>;</span><br><span class="line">        <span class="keyword">if</span>((y_value%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y_value%<span class="number">100</span>!=<span class="number">0</span>) || y_value%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            d_end=<span class="number">29</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        d_end=<span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d.options.length=<span class="number">0</span>; <span class="comment">//将天数清零，重新赋值</span></span><br><span class="line">    for_d(d,<span class="number">1</span>,d_end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：移除多余天数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义年月日三级联动的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">date_change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y=<span class="built_in">document</span>.getElementById(<span class="string">'y'</span>);</span><br><span class="line">    <span class="keyword">var</span> m=<span class="built_in">document</span>.getElementById(<span class="string">'m'</span>);</span><br><span class="line">    <span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">'d'</span>);</span><br><span class="line">    <span class="keyword">var</span> m_value=<span class="built_in">parseInt</span>(m.value);</span><br><span class="line">    <span class="keyword">var</span> y_value=<span class="built_in">parseInt</span>(y.value);</span><br><span class="line">    for_d(d,<span class="number">1</span>,<span class="number">31</span>);</span><br><span class="line">    <span class="keyword">if</span> (m_value==<span class="number">4</span> || m_value==<span class="number">6</span> || m_value==<span class="number">9</span> || m_value==<span class="number">11</span>)&#123;</span><br><span class="line">        d.options.remove(d.length<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m_value==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            d.options.remove(d.length<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((y_value%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y_value%<span class="number">100</span>!=<span class="number">0</span>) || y_value%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                d.options.remove(d.length<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复选框checkbox</strong></p><p>实现全选、全不选以及反选效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CheckBox<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"CheckBox"</span> <span class="attr">name</span>=<span class="string">"interest"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>swim<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"CheckBox"</span> <span class="attr">name</span>=<span class="string">"interest"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>jog<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"CheckBox"</span> <span class="attr">name</span>=<span class="string">"interest"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>hike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"CheckBox"</span> <span class="attr">name</span>=<span class="string">"interest"</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>ride<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"all"</span> <span class="attr">onclick</span>=<span class="string">"CheckInt1()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"oppsite"</span> <span class="attr">onclick</span>=<span class="string">"CheckInt2()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 实现全选与全不选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckInt1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> interests=<span class="built_in">document</span>.getElementsByName(<span class="string">'interest'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;interests.length;i++)&#123;</span><br><span class="line">        interests[i].checked=flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="comment">// 注意这个地方获取的是单个控件element不加s</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).value=<span class="string">'none'</span>;    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).value=<span class="string">'all'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flag=!flag; <span class="comment">// 开关变量来控制CheckBox的选中状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现反选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckInt2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> interests=<span class="built_in">document</span>.getElementsByName(<span class="string">'interest'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=interests.length;i++)&#123;</span><br><span class="line">        interests[i].checked=!interests[i].checked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM与事件总结"><a href="#DOM与事件总结" class="headerlink" title="DOM与事件总结"></a>DOM与事件总结</h2><p><strong>事件</strong>是指被程序发现的行为或发生的事情，而且它可能会被程序处理</p><p>特点：js事件都是以on开头，onclick、onchange、onload…</p><p>分类：键盘事件、鼠标事件、表单事件</p><p><img src="/" class="lazyload" data-src="/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200319181000800.png"  alt="image-20200319181000800"></p><p><strong>DOM(Document Object Model)</strong> 文档对象模型，将文档（页面）表现为结构化的表达方法，使得每一个页面元素都是可操控，DOM将网页和脚本以及其他的编程语言联系了起来。</p><p>特点：利用js控制页面中的所有元素，是页面更加“聪明”</p><p>分类：元素节点、属性节点、文本节点</p><p><img src="/" class="lazyload" data-src="/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200319181351074.png"  alt="image-20200319181351074"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将hexo部署到github</title>
      <link href="/2020/03/09/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
      <url>/2020/03/09/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h3 id="在github中添加ssh-keys（非必要步骤）"><a href="#在github中添加ssh-keys（非必要步骤）" class="headerlink" title="在github中添加ssh keys（非必要步骤）"></a>在github中添加ssh keys（非必要步骤）</h3><p><strong>获取本地公钥</strong></p><p>命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;githu注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入指令后会要求你提供一个位置和文件名去存放键值对和密码，可以Enter键去使用默认值</p><p><strong>添加在github</strong></p><p>打开user/用户名/.ssh/id_rsa.pub文件，将ssh keys复制到github/setting/SSH keys中保存。本地命令行输入代码测试是否成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h3><p>github首页新建仓库New repository，Repository name设置为用户名.github.io</p><p>打开博客根目录下_config.yml文件</p><p><strong>修改deploy：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;flying-rat&#x2F;flying-rat.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>安装git部署插件</strong></p><p>命令行切换到博客根目录，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><strong>给git配置身份</strong></p><p>打开git bash依次执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#39;flying-rat&#39;</span><br><span class="line">git config --global user.email &#39;jwei.gan@qq.com&#39;</span><br></pre></td></tr></table></figure><p><strong>部署</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp; hexo d</span><br></pre></td></tr></table></figure><p><a href="https://flying-rat.github.io" target="_blank" rel="noopener">https://flying-rat.github.io</a></p><p>大功告成！！！</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将hexo博客搭建到云服务器上(通过Nginx)</title>
      <link href="/2020/03/08/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2020/03/08/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="本地电脑ssh连接远程服务器-免密访问"><a href="#本地电脑ssh连接远程服务器-免密访问" class="headerlink" title="本地电脑ssh连接远程服务器(免密访问)"></a>本地电脑ssh连接远程服务器(免密访问)</h2><p>win10 centos7.3</p><h3 id="免密访问服务器"><a href="#免密访问服务器" class="headerlink" title="免密访问服务器"></a>免密访问服务器</h3><p><strong>在本地修改~/.ssh/config文件内容</strong></p><p>看看是否存在config文件，没有的话在.ssh文件中创建一个config文件，然后修改/添加内容（host名字取为aliyun）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host aliyun</span><br><span class="line">HostName 公网ip</span><br><span class="line">User root</span><br></pre></td></tr></table></figure><p><strong>获取本地公钥</strong></p><p>命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;githu注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入指令后会要求你提供一个位置和文件名去存放键值对和密码，可以Enter键去使用默认值</p><p><em>同时可以将ssh keys复制到github中，用以下代码测试是否成功</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><strong>从本地拷贝ssh公钥到服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp C:\Users\gan\.ssh\id_rsa.pub root@aliyun:~</span><br></pre></td></tr></table></figure><p>然后ssh登录到服务器，输入，查看是否存在authorized_keys</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>然后再直接输入<code>:wq</code>保存文件并退出</p><p>继续输入以下代码，将公钥复制到authoried_keys中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>此时就可以通过<code>ssh root@aliyun</code>免密访问服务器</p><p>顺便可以修改一下<strong>链接超时的时间限制</strong>，防止连接超时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;ssh_config</span><br></pre></td></tr></table></figure><p>输入<code>/Port</code>确认默认端口是否为22</p><p>输入<code>/ClientAlive</code>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClientAliveInterval 30</span><br><span class="line">ClientAliveCountMax 3</span><br></pre></td></tr></table></figure><p><code>:wq</code>保存文件并退出</p><p>重启sshd服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h3 id="关闭服务器的密码登录"><a href="#关闭服务器的密码登录" class="headerlink" title="关闭服务器的密码登录"></a>关闭服务器的密码登录</h3><p>重新进入ssh_config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;ssh_config</span><br></pre></td></tr></table></figure><p>将PasswordAuthentication改为no</p><p>保存退出并重启sshd服务</p><h2 id="服务器搭建远程Git库"><a href="#服务器搭建远程Git库" class="headerlink" title="服务器搭建远程Git库"></a>服务器搭建远程Git库</h2><p>先<code>ssh root@aliyun</code>登录到服务器，<strong>安装git</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version &#x2F;&#x2F; 如无，则安装</span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p><strong>创建用户并配置其仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git &#x2F;&#x2F; 设置密码</span><br><span class="line">su git &#x2F;&#x2F; 这步很重要，不切换用户后面会很麻烦</span><br><span class="line">cd &#x2F;home&#x2F;git&#x2F;</span><br><span class="line">mkdir -p projects&#x2F;blog &#x2F;&#x2F; 项目存在的真实目录</span><br><span class="line">mkdir repos &amp;&amp; cd repos</span><br><span class="line">git init --bare blog.git &#x2F;&#x2F; 创建一个裸露的仓库</span><br><span class="line">cd blog.git&#x2F;hooks</span><br><span class="line">vi post-receive &#x2F;&#x2F; 创建 hook 钩子函数，输入了内容如下</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">git --work-tree&#x3D;&#x2F;home&#x2F;git&#x2F;projects&#x2F;blog --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;repos&#x2F;blog.git checkout -f</span><br></pre></td></tr></table></figure><p>输入完毕后<code>:wq</code>退出保存</p><p>然后<strong>修改权限</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br><span class="line">exit &#x2F;&#x2F; 退出到 root 登录</span><br><span class="line">chown -R git:git &#x2F;home&#x2F;git&#x2F;repos&#x2F;blog.git &#x2F;&#x2F; 添加权限</span><br></pre></td></tr></table></figure><p>切换回来本地测试git仓库是否可用（我命名了阿里云服务器，可以直接ssh@公网ip）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@aliyun:&#x2F;home&#x2F;git&#x2F;repos&#x2F;blog.git</span><br></pre></td></tr></table></figure><p>如果所在克隆了空文件夹到本地说明git仓库可用</p><p><strong>建立ssh信任关系</strong>，使得git不需要密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i C:&#x2F;Users&#x2F;yourname&#x2F;.ssh&#x2F;id_rsa.pub git@server_ip &#x2F;&#x2F;这一行在C:\Program Files\Git\bin\sh.exe命令行中输入</span><br><span class="line">ssh git@server_ip &#x2F;&#x2F; 测试能否登录</span><br></pre></td></tr></table></figure><p><em>此时不需要密码即可登录成功</em></p><h2 id="搭建Nginx服务器"><a href="#搭建Nginx服务器" class="headerlink" title="搭建Nginx服务器"></a>搭建Nginx服务器</h2><p><strong>下载安装nginx</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.17.9.tar.gz</span><br><span class="line">tar xzvf nginx-1.17.9.tar.gz</span><br><span class="line">cd nginx-1.17.9</span><br><span class="line">.&#x2F;configure &#x2F;&#x2F; 如果后面还想要配置 SSL 协议，就执行后面一句！</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">alias nginx&#x3D;&#39;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&#39; &#x2F;&#x2F; 为 nginx 取别名，后面可直接用</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</span><br><span class="line">vi nginx.conf</span><br><span class="line">修改 root 解析路径，如下图，否则nginx无法访问 &#x2F;home&#x2F;git&#x2F;project&#x2F;blog</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/03/08/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/image-20200312182635546.png"  alt="image-20200312182635546"></p><h3 id="通过公网ip访问服务器设置"><a href="#通过公网ip访问服务器设置" class="headerlink" title="通过公网ip访问服务器设置"></a>通过公网ip访问服务器设置</h3><p>找到ecs实例—配置规则—添加安全组规则，添加如下内容</p><p><img src="/" class="lazyload" data-src="/2020/03/08/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/image-20200312175400260.png"  alt="image-20200312175400260"></p><h3 id="hexo中修改-config-yml"><a href="#hexo中修改-config-yml" class="headerlink" title="hexo中修改_config.yml"></a>hexo中修改_config.yml</h3><p>博客文件夹打开_config.yml，添加git服务器</p><p><img src="/" class="lazyload" data-src="/2020/03/08/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/image-20200312181245974.png"  alt="image-20200312181245974"></p><p>在package.json中添加npm脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "deploy": "hexo clean &amp;&amp; hexo g -d",</span><br><span class="line">  "start": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样在博客文件夹调用<code>npm start</code>就可以本地调试了，<code>npm run deploy</code>就可以部署到服务器了，然后可以通过公网ip访问博客了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Nginx </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主量元素处理</title>
      <link href="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/"/>
      <url>/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="岩石地球化学的主要指标"><a href="#岩石地球化学的主要指标" class="headerlink" title="岩石地球化学的主要指标"></a>岩石地球化学的主要指标</h2><h3 id="SiO2饱和度和矿物共生组合"><a href="#SiO2饱和度和矿物共生组合" class="headerlink" title="SiO2饱和度和矿物共生组合"></a>SiO<sub>2</sub>饱和度和矿物共生组合</h3><p>​    SiO<sub>2</sub>过饱和矿物 <strong>石英</strong></p><p>​    SiO<sub>2</sub>不饱和矿物 <strong>镁橄榄石、似长石类（霞石、白榴石等）</strong></p><p>​    SiO<sub>2</sub>饱和矿物 <strong>辉石、角闪石、斜长石、钾长石、云母等</strong></p><p><strong><em>SiO<sub>2</sub>不饱和矿物与SiO<sub>2</sub>反应式</em></strong></p><p>Mg<sub>2</sub>SiO<sub>4</sub>(橄榄石)+SiO<sub>2</sub>(熔体)=2MgSiO<sub>3</sub>(顽火辉石)</p><p>NaAlSiO<sub>4</sub>(霞石)+SiO<sub>2</sub>(熔体)=NaAlSi<sub>3</sub>O<sub>8</sub>(钠长石)</p><p>KAlSiO<sub>4</sub>(钾霞石)+SiO<sub>2</sub>(熔体)=KAlSi<sub>3</sub>O<sub>8</sub>(钾长石)</p><h3 id="里特曼指数σ"><a href="#里特曼指数σ" class="headerlink" title="里特曼指数σ"></a>里特曼指数σ</h3><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305113348788.png"  alt="image-20200305113348788"></p><p>σ&lt;3.3 钙碱性岩</p><p>σ=3.3-9 碱性岩</p><p>σ&gt;9 过碱性岩</p><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305114145940.png"  alt="image-20200305114145940"></p><h3 id="Al2O3饱和度与矿物组合"><a href="#Al2O3饱和度与矿物组合" class="headerlink" title="Al2O3饱和度与矿物组合"></a>Al<sub>2</sub>O<sub>3</sub>饱和度与矿物组合</h3><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305114601494.png"  alt="image-20200305114601494"></p><h2 id="主量元素数据直接用于岩石分类和系列划分"><a href="#主量元素数据直接用于岩石分类和系列划分" class="headerlink" title="主量元素数据直接用于岩石分类和系列划分"></a>主量元素数据直接用于岩石分类和系列划分</h2><h3 id="TAS图解使用方法"><a href="#TAS图解使用方法" class="headerlink" title="TAS图解使用方法"></a>TAS图解使用方法</h3><ol><li><p>适用于新鲜的、无蚀变和未变质的<strong>火山岩</strong>（因为K和Na活泼易于带入带出），低碱高Mg岩石有更详细划分</p></li><li><p>计算投图：主量元素数据中，先剔除H2O，CO2，LOI。再重新计算到100％，之后投图。</p></li><li><p>TAS图中，有些是2个岩石类型，成分一致，但是根据特征矿物细分，例如是粗面岩还是粗面英安岩，需要根据CIPW计算结果，确定Q含量，<br>若Q&lt;20为粗面岩，<br>若Q&gt;20为粗面英安岩 。</p><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305115039745.png"  alt="image-20200305115039745"></p></li></ol><h3 id="A-NK—A-CNK图解"><a href="#A-NK—A-CNK图解" class="headerlink" title="A/NK—A/CNK图解"></a>A/NK—A/CNK图解</h3><p>​    根据Al<sub>2</sub>O<sub>3</sub>/CaO+Na<sub>2</sub>O+K<sub>2</sub>O比值判定Al<sub>2</sub>O<sub>3</sub>的饱和度。同时用于判断其形成的大地构造环境</p><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305171414859.png"  alt="image-20200305171414859"></p><h2 id="CIPW计算后用于岩石分类和系列划分"><a href="#CIPW计算后用于岩石分类和系列划分" class="headerlink" title="CIPW计算后用于岩石分类和系列划分"></a>CIPW计算后用于岩石分类和系列划分</h2><p><strong>模式矿物含量（Mode）</strong>是观察到的矿物体积百分数</p><p><strong>标准矿物计算（Norm）</strong>是岩石经过计算的理想化的矿物组成，肉眼无法鉴定具体矿物含量，如火山岩类</p><ol><li>岩石的CIPW标准矿物与实际矿物含量是有出入的，</li><li>主要是CIPW计算是以无水岩浆中矿物结晶顺序，按照标准矿物理想分子式进行计算，得到岩石中各种标准矿物的质量分数，</li><li>简化了很多内容，如标准矿物是无水的，因此计算中不考虑含水矿物黑云母、角闪石等。</li></ol><p>CIPW计算中的两个术语：<em>Fo，是橄榄石中Mg-Ol和Fe-Ol的比例，专指橄榄石<br>Mg#，是指全岩的MgO-FeO关系，读作Mg号，或者Mg数</em></p><p>CIPW计算之后可以进行一系列的岩石分类</p><ol><li><p>Ab-An-Or图解用于花岗岩分类</p><p>  用于标准矿物Q&gt;10％的酸性岩分类，为简便方法，可以有效地区分英云闪长岩、更长花岗岩、花岗岩和花岗闪长岩。也可以谨慎地用于变形和变质的花岗质岩石，判断原岩类型。</p></li><li><p>玄武岩Ne-Di-Ol-Hy-Q分类图</p></li><li><p>玄武岩/辉长岩详细分类图</p></li><li><p>基性岩的分类</p></li><li><p>超镁铁岩的分类</p></li></ol><h2 id="主量元素用于判别岩浆作用过程"><a href="#主量元素用于判别岩浆作用过程" class="headerlink" title="主量元素用于判别岩浆作用过程"></a>主量元素用于判别岩浆作用过程</h2><p>​    判别岩浆（地球化学）作用过程，主要是看一系列岩石的主量元素成分的变化趋势</p><h4 id="哈克图解"><a href="#哈克图解" class="headerlink" title="哈克图解"></a>哈克图解</h4><p>​    A Harker，1909年开始使用SiO2作为横坐标(x) / 其他元素作为纵坐标(y)的双变量图，后来称为哈克图解</p><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305174522715.png"  alt="image-20200305174522715">    </p><p><strong>哈克图解的做法</strong></p><p>​    以SiO2为横坐标，其他氧化物为纵坐标，投出一组样品的结果，得到不同氧化物对SiO2的散点图。推广：任意两个组分之间的二元投点都可以称为哈克图解。</p><p><strong>意义</strong>：如果一组岩石样品具有成因和演化关系，则全部样品将显示正的或者负的相关关系。</p><p>横坐标表示分异结晶过程，SiO2为横坐标，可以指示从基性到酸性，范围宽，如果主要是基性熔岩，可以用MgO、或者Zr为横坐标</p><p><strong>分离结晶作用</strong>是指岩浆中，某个或者多个矿物持续从岩浆中结晶出去，剩余的岩浆就会发生成分的有规律变化。总体为液相→固相</p><p><strong>同化混染作用的影响</strong>在矿物分离结晶作用发生的同时，还存在围岩或者外来物质的加入和混合，导致主量元素图解不显示明显的连续变化趋势。</p><h4 id="哈克图解中出现转折点的含义："><a href="#哈克图解中出现转折点的含义：" class="headerlink" title="哈克图解中出现转折点的含义："></a>哈克图解中出现转折点的含义：</h4><p>转折点或者曲折趋势，表示结晶作用过程出现一个新的矿物相，或者在部分熔融的过程中消耗了一个矿物相。根据一段线性的斜率的不同，确定某一组分消耗的多少和何种矿物消耗该组分。</p><h5 id="长石类"><a href="#长石类" class="headerlink" title="长石类"></a>长石类</h5><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305212724480.png"  alt="image-20200305212724480"></p><p><strong>长石的三个端元和长石分类</strong></p><p>钾长石KAlSi<sub>3</sub>O<sub>8</sub>(Or)，钠长石NaAlSi<sub>3</sub>O<sub>8</sub>(Ab)，钙长石CaAl<sub>2</sub>Si<sub>3</sub>O<sub>8</sub>(An)。</p><p>碱性长石（K-Na长石）亚类，不连续固溶体系列（An 5-10%）</p><p>斜长石（Ca-Na长石）亚类，连续固溶体系列（Or 5-10%）</p><p><strong>碱性长石分类</strong></p><ol><li>富钾长石类：透长石、正长石、微斜长石</li><li>富钠长石类： 钠长石、歪长石</li><li>钾钠质长石类：条纹长石 (不混熔的结果)</li></ol><h5 id="主要造岩矿物化学成分"><a href="#主要造岩矿物化学成分" class="headerlink" title="主要造岩矿物化学成分"></a>主要造岩矿物化学成分</h5><p>橄榄石(Mg,Fe)<sub>2</sub>[SiO<sub>4</sub>]</p><p>斜方辉石(Mg,Fe)<sub>2</sub>[Si<sub>2</sub>O<sub>6</sub>]</p><p>单斜辉石(Ca,Mg,Fe)[Si<sub>2</sub>O<sub>6</sub>]</p><p><em>上述3个矿物使用的Fe-Mg，CaO的量是不同的</em></p><p><em>Ol:  FeO+MgO=58~60 wt.%</em></p><p><em>Opx：FeO+MgO=40 wt.%</em></p><p><em>Cpx：FeO+MgO=20<del>22 wt.%，CaO=22</del>25 wt.%</em></p><p>长石(K,Na,Ca,Ba)[(Al,Si)Si<sub>2</sub>O<sub>8</sub>]</p><p>磷灰石Ca<sub>5</sub>[PO<sub>4</sub>]<sub>3</sub>(F,Cl,OH)</p><p>磁铁矿FeFe<sub>2</sub>O<sub>4</sub></p><p>然后接着讨论<strong>哈克图解转折点的含义</strong></p><p>例1：夏威夷火山岩CaO－MgO图解中，</p><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305220341716.png"  alt="image-20200305220341716"></p><p><strong><em>思路：从分离的矿物成分和残余岩浆成分2方面考虑</em></strong></p><p>当MgO低于7％，CaO与MgO呈现正相关性，表明斜长石和单斜辉石同时从岩浆熔体中结晶出来（早起分离的矿物可以是堆晶，也可以是斑晶）。当MgO高于7％，CaO和MgO呈现负相关，主要是单独由橄榄石分离结晶控制岩浆作用过程。</p><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305221258660.png"  alt="image-20200305221258660"></p><p>图中右半段各种矿物开始分离结晶</p><p><img src="/" class="lazyload" data-src="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305230627949.png"  alt="image-20200305230627949"></p><p>图中显示了橄榄石的分离结晶过程（Mg减少，Al增加）和堆晶过程（Mg增加，Al减少）</p><p><strong>岩浆作用过程小结：</strong></p><ul><li>掌握不同矿物的组成</li><li>主量元素线性变化——矿物结晶脱离熔体(同时导致平衡熔体中该组分线性降低)</li><li>主量元素线性变化——或者部分熔融中矿物进入熔体相(同时导致平衡熔体中该组分线性升高)</li><li>需要找到岩浆演化的起始点（原始岩浆）</li><li>拐点代表结晶或者熔融加入的矿物相变化</li><li>注意用于哈克图解的一系列样品，必须具有成因关联（时-空关系）</li><li>上述的矿物分离结晶过程，就是鲍文反应序列、岩浆岩从超基性-基性-中性-酸性的演化序列。</li></ul><p><strong><em>使用</em></strong></p><ul><li>一个明显属于同期产出、空间上成分不同的杂岩体，可以使用统一投点</li><li>一个小区域、属于一个岩浆岩省的，同期产出的可以统一投点</li><li>一个造山带内同期产出的，要注意造山带的岩石圈不均一性质，不要一起投图，例如青藏高原拉萨地块东西分段，东段和西段同时期的岩浆岩源区有差异，不一起投点</li></ul><p>参考资料：赵志丹《岩石地球化学》课件</p>]]></content>
      
      
      <categories>
          
          <category> 地球化学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地球化学 </tag>
            
            <tag> 主量元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位</title>
      <link href="/2020/03/04/CSS%E5%AE%9A%E4%BD%8D/"/>
      <url>/2020/03/04/CSS%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h1><p>&emsp;&emsp;<strong>CSS定位</strong>是使用<strong>position</strong>属性，分为：relative、absolute、static、fixed四种，默认static无定位</p><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>position: relative;</p><p>&emsp;&emsp;相对定位的偏移参考元素是元素本身（该元素以前所在的位置），不会使元素脱离文档流。元素的初始位置占据的空间会被保留。<br>&emsp;&emsp;偏移一般为两个方向上边距（top）和左边距（left）</p><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>position: absolute;</p><p>&emsp;&emsp;相对于已定位的最近的祖先元素，如果没有已定位的最近的祖先元素，那么它的位置相对于最初的包含块（如body）</p><p><strong><em>相对定位—-不破坏文档流<br>绝对定位—-破坏文档流</em></strong></p><p><strong>练习：</strong>把蓝色方块放置在红色方块中间，效果图如下：</p><p><img src="/" class="lazyload" data-src="/2020/03/04/CSS%E5%AE%9A%E4%BD%8D/image-20200304141656094.png"  alt="image-20200304141656094"></p><p>实现：将父类设为相对定位，子类设为绝对定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*完善下列代码*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.per</span>&#123;</span></span><br><span class="line">     width: 300px;</span><br><span class="line">     height: 300px;</span><br><span class="line">     background: red;</span><br><span class="line"><span class="css">     <span class="selector-tag">margin-left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">     margin-top: 200px;</span><br><span class="line"><span class="css">     <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">   <span class="selector-class">.son</span>&#123;</span></span><br><span class="line">     width: 100px;</span><br><span class="line">     height: 100px;</span><br><span class="line">     background: blue;</span><br><span class="line">     position: absolute;</span><br><span class="line">     top: 100px;</span><br><span class="line">     left: 100px;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定位和浮动"><a href="#定位和浮动" class="headerlink" title="定位和浮动"></a>定位和浮动</h2><p>&emsp;&emsp;绝对定位和float的区别：绝对定位的区块会覆盖顶上的内容，而float不会。</p><p>&emsp;&emsp;相对定位和float组合会显示各自特点，float可以产生不会被忽略的浮动（不会重叠），相对定位可以设置元素移动位置。</p><h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>&emsp;&emsp;z-index决定谁在前面谁在后面，数字越大就在越上面。且为方便以后的扩张，数字最好设置为整倍数如：10,20,30</p><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>&emsp;&emsp;<strong>固定定位</strong>是相对于浏览器窗口进行定位，无论如何拉动拉条都固定在浏览器的某个位置</p><p>​        position：fixed</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用指南（持续更新）</title>
      <link href="/2020/03/02/hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/03/02/hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="关于hexo文章中插入图片的问题"><a href="#关于hexo文章中插入图片的问题" class="headerlink" title="关于hexo文章中插入图片的问题"></a>关于hexo文章中插入图片的问题</h2><ol><li><p>安装cnpm</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></li><li><p>使用cnpm 安装<strong>0.05版本</strong>的hexo-asset-image插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>该插件作用是创建博文时自动生成同名文件夹，用于存放图片</p></li><li><p>修改_config.yml文件，将post_asset_folder选项改为true</p></li><li><p>在文章用引用图片使用相对路径</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">你想替换的文字</span>](<span class="link">xx/图片名称.jpg '光标停留图片时候显示的内容'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="hexo-g-遇到的报错"><a href="#hexo-g-遇到的报错" class="headerlink" title="hexo g 遇到的报错"></a>hexo g 遇到的报错</h2><p>1.<strong>YAMLException: can not read a block mapping entry；</strong></p><p>解决办法：文章中 tags: 后面一定要有半角空格！！！注意冒号后边要有空格，“-”符号前后都要有空格！cover: 后面也要有一个空格！</p><h2 id="hexo子分类"><a href="#hexo子分类" class="headerlink" title="hexo子分类"></a>hexo子分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - python</span><br><span class="line"> - Django</span><br></pre></td></tr></table></figure><h2 id="mathjax"><a href="#mathjax" class="headerlink" title="mathjax"></a>mathjax</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># MathJax</span><br><span class="line"># Please see doc for more details: https:&#x2F;&#x2F;docs.jerryc.me&#x2F;config.html#mathjax</span><br><span class="line"># ---------------</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  # true 表示每一頁都加載mathjax.js</span><br><span class="line">  # false 需要時加載，須在使用的Markdown Front-matter 加上 mathjax: true</span><br><span class="line">  per_page: false</span><br></pre></td></tr></table></figure><p>在hexo主题中_config.yml文件中设置mathjax开启</p><p>然后需要在博客目录下安装渲染模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm uninstall hexo-renderer-marked --save</span><br><span class="line">cnpm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h2 id="local-search"><a href="#local-search" class="headerlink" title="local_search"></a>local_search</h2><p>现在博客目录下安装hexo-generator-search模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后再hexo的_config.yml中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  # path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</span><br><span class="line">  # field - the search scope you want to search, you can chose:</span><br><span class="line">  # post (Default) - will only covers all the posts of your blog.</span><br><span class="line">  # page - will only covers all the pages of your blog.</span><br><span class="line">  # all - will covers all the posts and pages of your blog.</span><br><span class="line">  # content - whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</span><br></pre></td></tr></table></figure><p>在主题设置_config.yml中开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Please see doc for more details: https:&#x2F;&#x2F;docs.jerryc.me&#x2F;config.html#本地搜索</span><br><span class="line"># ---------------</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#39;t find any results for the search: $&#123;query&#125;&quot; # if there are no result</span><br></pre></td></tr></table></figure><p>若本地搜索依旧无法正常使用建议重装主题</p><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><p>在确保主题支持的情况下开启mermaid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># mermaid</span><br><span class="line"># see https:&#x2F;&#x2F;github.com&#x2F;knsv&#x2F;mermaid</span><br><span class="line"># -------------------------------</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  # built-in themes: default&#x2F;forest&#x2F;dark&#x2F;neutral</span><br><span class="line">  theme: default</span><br></pre></td></tr></table></figure><p>mermaid书写格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><div class="mermaid">          pie    title Key elements in Product X    "Calcium" : 42.96    "Potassium" : 50.05    "Magnesium" : 10.01    "Iron" :  5          </div>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS浮动</title>
      <link href="/2020/02/28/CSS%E6%B5%AE%E5%8A%A8/"/>
      <url>/2020/02/28/CSS%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML—浮动特性"><a href="#HTML—浮动特性" class="headerlink" title="HTML—浮动特性"></a>HTML—浮动特性</h1><h1 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h1><h2 id="float的崩溃"><a href="#float的崩溃" class="headerlink" title="float的崩溃"></a>float的崩溃</h2><p>&emsp;&emsp;<strong>float崩溃</strong>（也叫破坏、崩塌）是指：float作为子元素设置以后，父级元素的高度发生了崩溃（将子元素设置为浮动之后，父元素没有指定高度的情况下，父元素的高度将不存在）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>float崩溃<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">border: 1px solid black;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">width: 600px;</span><br><span class="line">background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#div3</span>&#123;</span></span><br><span class="line">height: 300px;</span><br><span class="line">width: 200px;</span><br><span class="line">background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div1'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div2'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div3'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;因为div2和div3都是<strong>块级元素</strong>，所以自然显示为<strong>文档流</strong>的特点，即div2和div3按上下顺序显示。div1没有设定宽度，所以继承父级<body>的宽度。效果如下图</body></p><p><img src="/" class="lazyload" data-src="/2020/02/28/CSS%E6%B5%AE%E5%8A%A8/float%E5%B4%A9%E6%BA%83%E4%B8%8E%E5%8C%85%E8%A3%B9.png"  alt="float崩溃与包裹"></p><p>&emsp;&emsp;将div3标签添加float属性，使得div3变成脱离了<strong>文档流</strong>，变成了浮动层，就不被包含在父一级中了。此时父级的高度变成了div2的高度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#div3&#123;</span><br><span class="line">height: 300px;</span><br><span class="line">width: 200px;</span><br><span class="line">background-color: blue;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/02/28/CSS%E6%B5%AE%E5%8A%A8/float%E5%B4%A9%E6%BA%83%E4%B8%8E%E5%8C%85%E8%A3%B91.png"  alt="image-20200301222731177" title="此时div3脱离了文档流"></p><p>&emsp;&emsp;若再将div2也设置为浮动状态，div1高度将不存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#div2&#123;</span><br><span class="line">height:200px;</span><br><span class="line">width: 600px;</span><br><span class="line">background-color: yellow;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/2020/02/28/CSS%E6%B5%AE%E5%8A%A8/float%E5%B4%A9%E6%BA%83%E4%B8%8E%E5%8C%85%E8%A3%B92.png"  alt="image-20200301224011467" title="div2和div1均变为了浮动状态"></p><h2 id="float包裹"><a href="#float包裹" class="headerlink" title="float包裹"></a>float包裹</h2><p>&emsp;&emsp;当父级块元素变成浮动了，父级元素的宽高变成了子元素的宽高，这就称为<strong>包裹特性</strong>。</p><p>&emsp;&emsp;html页面中的图文混排，可以将图片与文字放置在同一个div中，并将div和图片都添加float属性，也可以将图片放置在div中，段落和div同级，div添加float属性即可。</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p><strong>清除浮动的目的：</strong></p><ol><li><p>为了父元素不会出现“高度崩塌”；</p></li><li><p>如果强制规定外层容器的尺寸，则显得就不那么灵活了，高度就不能自动适应了;</p></li><li><p>从某个元素开始，不在需要浮动效果了。</p></li></ol><p>&emsp;&emsp;当有三个同级div（div1，div2，div3）时候，前两个div设置float属性，div3会在前两个div后面显示。如果此时给div3设置清除浮动，div3会继续变为文档流，前两个div在第一行显示，div3在第二行显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#div3&#123;</span><br><span class="line">clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前最主流做法：在三个div之外专门建立一个用于清除浮动的div，设置清除浮动的属性。适用于复杂页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#clearDiv::after&#123;</span><br><span class="line"><span class="comment">&lt;!--需要对该div添加一些内容，添加content，同时防止content中的内容被其他设置误操作而显示出来，添加visibility属性。行高设置为默认0px，display将content转化为块级元素--&gt;</span></span><br><span class="line">content: '';</span><br><span class="line">visibility: hidden;</span><br><span class="line">height: 0px;</span><br><span class="line">display: block;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;针对ie浏览器可能出现的一些bug，如边距重叠，浮动不能清除等。需要添加以下代码，zoom属性是页面对象重新加载和计算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#clearDiv&#123;</span><br><span class="line">zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/28/hello-world/"/>
      <url>/2020/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
